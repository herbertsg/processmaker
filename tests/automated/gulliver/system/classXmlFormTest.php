<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:24.
*/

class classXmlFormTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var XmlForm
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new XmlForm();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('XmlForm');        $this->assertTrue( count($methods) == 4);
    }

    /**
    * @covers XmlForm::parseFile
    * @todo   Implement testparseFile().
    */
    public function testparseFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseFile', $methods ), 'exists method parseFile' );
        $r = new ReflectionMethod('XmlForm', 'parseFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'language');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'forceParse');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers XmlForm::setValues
    * @todo   Implement testsetValues().
    */
    public function testsetValues()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setValues', $methods ), 'exists method setValues' );
        $r = new ReflectionMethod('XmlForm', 'setValues');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'newValues');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == Array());
    }

    /**
    * @covers XmlForm::render
    * @todo   Implement testrender().
    */
    public function testrender()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('render', $methods ), 'exists method render' );
        $r = new ReflectionMethod('XmlForm', 'render');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'template');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'scriptContent');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers XmlForm::cloneObject
    * @todo   Implement testcloneObject().
    */
    public function testcloneObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('cloneObject', $methods ), 'exists method cloneObject' );
        $r = new ReflectionMethod('XmlForm', 'cloneObject');
        $params = $r->getParameters();
    }

  }
