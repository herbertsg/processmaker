<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.database_base.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:22.
*/

class classdatabase_baseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var database_base
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new database_base();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('database_base');        $this->assertTrue( count($methods) == 8);
    }

    /**
    * @covers database_base::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('database_base', '__construct');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sType');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == DB_ADAPTER);
        $this->assertTrue( $params[1]->getName() == 'sServer');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == DB_HOST);
        $this->assertTrue( $params[2]->getName() == 'sUser');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == DB_USER);
        $this->assertTrue( $params[3]->getName() == 'sPass');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == DB_PASS);
        $this->assertTrue( $params[4]->getName() == 'sDataBase');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == DB_NAME);
    }

    /**
    * @covers database_base::generateDropTableSQL
    * @todo   Implement testgenerateDropTableSQL().
    */
    public function testgenerateDropTableSQL()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateDropTableSQL', $methods ), 'exists method generateDropTableSQL' );
        $r = new ReflectionMethod('database_base', 'generateDropTableSQL');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTable');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers database_base::generateCreateTableSQL
    * @todo   Implement testgenerateCreateTableSQL().
    */
    public function testgenerateCreateTableSQL()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateCreateTableSQL', $methods ), 'exists method generateCreateTableSQL' );
        $r = new ReflectionMethod('database_base', 'generateCreateTableSQL');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTable');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aColumns');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers database_base::generateDropColumnSQL
    * @todo   Implement testgenerateDropColumnSQL().
    */
    public function testgenerateDropColumnSQL()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateDropColumnSQL', $methods ), 'exists method generateDropColumnSQL' );
        $r = new ReflectionMethod('database_base', 'generateDropColumnSQL');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTable');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sColumn');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers database_base::generateAddColumnSQL
    * @todo   Implement testgenerateAddColumnSQL().
    */
    public function testgenerateAddColumnSQL()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateAddColumnSQL', $methods ), 'exists method generateAddColumnSQL' );
        $r = new ReflectionMethod('database_base', 'generateAddColumnSQL');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTable');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sColumn');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'aParameters');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers database_base::generateChangeColumnSQL
    * @todo   Implement testgenerateChangeColumnSQL().
    */
    public function testgenerateChangeColumnSQL()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateChangeColumnSQL', $methods ), 'exists method generateChangeColumnSQL' );
        $r = new ReflectionMethod('database_base', 'generateChangeColumnSQL');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTable');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sColumn');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'aParameters');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers database_base::executeQuery
    * @todo   Implement testexecuteQuery().
    */
    public function testexecuteQuery()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('executeQuery', $methods ), 'exists method executeQuery' );
        $r = new ReflectionMethod('database_base', 'executeQuery');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sQuery');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers database_base::close
    * @todo   Implement testclose().
    */
    public function testclose()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('close', $methods ), 'exists method close' );
        $r = new ReflectionMethod('database_base', 'close');
        $params = $r->getParameters();
    }

  }
