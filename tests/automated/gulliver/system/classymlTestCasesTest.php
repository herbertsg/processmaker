<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.ymlTestCases.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:24.
*/

class classymlTestCasesTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ymlTestCases
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $testCaseFile = "";
        $testDomain ="";
        $testLime = "";
        $this->object = new ymlTestCases( $testCaseFile, &$testDomain, &$testLime);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('ymlTestCases');        $this->assertTrue( count($methods) == 6);
    }

    /**
    * @covers ymlTestCases::ymlTestCases
    * @todo   Implement testymlTestCases().
    */
    public function testymlTestCases()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ymlTestCases', $methods ), 'exists method ymlTestCases' );
        $r = new ReflectionMethod('ymlTestCases', 'ymlTestCases');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'testCaseFile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'testDomain');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'testLime');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers ymlTestCases::load
    * @todo   Implement testload().
    */
    public function testload()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('load', $methods ), 'exists method load' );
        $r = new ReflectionMethod('ymlTestCases', 'load');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'inputTestCasesIndex');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == 'TestCases');
        $this->assertTrue( $params[1]->getName() == 'fields');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    /**
    * @covers ymlTestCases::addToPlan
    * @todo   Implement testaddToPlan().
    */
    public function testaddToPlan()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addToPlan', $methods ), 'exists method addToPlan' );
        $r = new ReflectionMethod('ymlTestCases', 'addToPlan');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'count');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '-1');
        $this->assertTrue( $params[1]->getName() == 'start');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
    }

    /**
    * @covers ymlTestCases::run
    * @todo   Implement testrun().
    */
    public function testrun()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('run', $methods ), 'exists method run' );
        $r = new ReflectionMethod('ymlTestCases', 'run');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'testerObject');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'fields');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
        $this->assertTrue( $params[2]->getName() == 'count');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '-1');
        $this->assertTrue( $params[3]->getName() == 'start');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '0');
    }

    /**
    * @covers ymlTestCases::runSingle
    * @todo   Implement testrunSingle().
    */
    public function testrunSingle()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('runSingle', $methods ), 'exists method runSingle' );
        $r = new ReflectionMethod('ymlTestCases', 'runSingle');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'testerObject');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'fields');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    /**
    * @covers ymlTestCases::runMultiple
    * @todo   Implement testrunMultiple().
    */
    public function testrunMultiple()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('runMultiple', $methods ), 'exists method runMultiple' );
        $r = new ReflectionMethod('ymlTestCases', 'runMultiple');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'testerObject');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'fields');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
        $this->assertTrue( $params[2]->getName() == 'count');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '-1');
        $this->assertTrue( $params[3]->getName() == 'start');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '0');
    }

  }
