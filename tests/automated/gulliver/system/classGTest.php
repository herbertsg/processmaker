<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.g.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:22.
*/

class classGTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var G
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new G();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('G');
        $this->assertTrue( count($methods) == 139, "now there are " . count($methods) . " methods.");
    }

    /**
    * @covers G::is_https
    * @todo   Implement testis_https().
    */
    public function testis_https()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('is_https', $methods ), 'exists method is_https' );
        $r = new ReflectionMethod('G', 'is_https');
        $params = $r->getParameters();
    }

    /**
    * @covers G::array_fill_value
    * @todo   Implement testarray_fill_value().
    */
    public function testarray_fill_value()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('array_fill_value', $methods ), 'exists method array_fill_value' );
        $r = new ReflectionMethod('G', 'array_fill_value');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'arr');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == array());
        $this->assertTrue( $params[1]->getName() == 'value');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'recursive');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::generate_password
    * @todo   Implement testgenerate_password().
    */
    public function testgenerate_password()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generate_password', $methods ), 'exists method generate_password' );
        $r = new ReflectionMethod('G', 'generate_password');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'length');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '8');
    }

    /**
    * @covers G::array_concat
    * @todo   Implement testarray_concat().
    */
    public function testarray_concat()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('array_concat', $methods ), 'exists method array_concat' );
        $r = new ReflectionMethod('G', 'array_concat');
        $params = $r->getParameters();
    }

    /**
    * @covers G::var_compare
    * @todo   Implement testvar_compare().
    */
    public function testvar_compare()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('var_compare', $methods ), 'exists method var_compare' );
        $r = new ReflectionMethod('G', 'var_compare');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'value');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'varN');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::var_probe
    * @todo   Implement testvar_probe().
    */
    public function testvar_probe()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('var_probe', $methods ), 'exists method var_probe' );
        $r = new ReflectionMethod('G', 'var_probe');
        $params = $r->getParameters();
    }

    /**
    * @covers G::getVersion
    * @todo   Implement testgetVersion().
    */
    public function testgetVersion()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getVersion', $methods ), 'exists method getVersion' );
        $r = new ReflectionMethod('G', 'getVersion');
        $params = $r->getParameters();
    }

    /**
    * @covers G::getIpAddress
    * @todo   Implement testgetIpAddress().
    */
    public function testgetIpAddress()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getIpAddress', $methods ), 'exists method getIpAddress' );
        $r = new ReflectionMethod('G', 'getIpAddress');
        $params = $r->getParameters();
    }

    /**
    * @covers G::getMacAddress
    * @todo   Implement testgetMacAddress().
    */
    public function testgetMacAddress()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getMacAddress', $methods ), 'exists method getMacAddress' );
        $r = new ReflectionMethod('G', 'getMacAddress');
        $params = $r->getParameters();
    }

    /**
    * @covers G::microtime_float
    * @todo   Implement testmicrotime_float().
    */
    public function testmicrotime_float()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('microtime_float', $methods ), 'exists method microtime_float' );
        $r = new ReflectionMethod('G', 'microtime_float');
        $params = $r->getParameters();
    }

    /**
    * @covers G::setFatalErrorHandler
    * @todo   Implement testsetFatalErrorHandler().
    */
    public function testsetFatalErrorHandler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setFatalErrorHandler', $methods ), 'exists method setFatalErrorHandler' );
        $r = new ReflectionMethod('G', 'setFatalErrorHandler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'newFatalErrorHandler');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers G::setErrorHandler
    * @todo   Implement testsetErrorHandler().
    */
    public function testsetErrorHandler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setErrorHandler', $methods ), 'exists method setErrorHandler' );
        $r = new ReflectionMethod('G', 'setErrorHandler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'newCustomErrorHandler');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers G::fatalErrorHandler
    * @todo   Implement testfatalErrorHandler().
    */
    public function testfatalErrorHandler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('fatalErrorHandler', $methods ), 'exists method fatalErrorHandler' );
        $r = new ReflectionMethod('G', 'fatalErrorHandler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'buffer');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::customErrorHandler
    * @todo   Implement testcustomErrorHandler().
    */
    public function testcustomErrorHandler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('customErrorHandler', $methods ), 'exists method customErrorHandler' );
        $r = new ReflectionMethod('G', 'customErrorHandler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'errno');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'msg');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'file');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'line');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'context');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
    }

    /**
    * @covers G::showErrorSource
    * @todo   Implement testshowErrorSource().
    */
    public function testshowErrorSource()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('showErrorSource', $methods ), 'exists method showErrorSource' );
        $r = new ReflectionMethod('G', 'showErrorSource');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'type');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'msg');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'file');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'line');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers G::customErrorLog
    * @todo   Implement testcustomErrorLog().
    */
    public function testcustomErrorLog()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('customErrorLog', $methods ), 'exists method customErrorLog' );
        $r = new ReflectionMethod('G', 'customErrorLog');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'type');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'msg');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'file');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'line');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers G::verboseError
    * @todo   Implement testverboseError().
    */
    public function testverboseError()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verboseError', $methods ), 'exists method verboseError' );
        $r = new ReflectionMethod('G', 'verboseError');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'type');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'errno');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'msg');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'file');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'line');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'context');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
    }

    /**
    * @covers G::encrypt
    * @todo   Implement testencrypt().
    */
    public function testencrypt()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('encrypt', $methods ), 'exists method encrypt' );
        $r = new ReflectionMethod('G', 'encrypt');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'key');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::decrypt
    * @todo   Implement testdecrypt().
    */
    public function testdecrypt()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('decrypt', $methods ), 'exists method decrypt' );
        $r = new ReflectionMethod('G', 'decrypt');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'key');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::lookup
    * @todo   Implement testlookup().
    */
    public function testlookup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('lookup', $methods ), 'exists method lookup' );
        $r = new ReflectionMethod('G', 'lookup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'target');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::mk_dir
    * @todo   Implement testmk_dir().
    */
    public function testmk_dir()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('mk_dir', $methods ), 'exists method mk_dir' );
        $r = new ReflectionMethod('G', 'mk_dir');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strPath');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'rights');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '511');
    }

    /**
    * @covers G::rm_dir
    * @todo   Implement testrm_dir().
    */
    public function testrm_dir()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('rm_dir', $methods ), 'exists method rm_dir' );
        $r = new ReflectionMethod('G', 'rm_dir');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dirName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::verifyPath
    * @todo   Implement testverifyPath().
    */
    public function testverifyPath()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyPath', $methods ), 'exists method verifyPath' );
        $r = new ReflectionMethod('G', 'verifyPath');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strPath');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'createPath');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers G::expandPath
    * @todo   Implement testexpandPath().
    */
    public function testexpandPath()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('expandPath', $methods ), 'exists method expandPath' );
        $r = new ReflectionMethod('G', 'expandPath');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strPath');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers G::LoadSystem
    * @todo   Implement testLoadSystem().
    */
    public function testLoadSystem()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadSystem', $methods ), 'exists method LoadSystem' );
        $r = new ReflectionMethod('G', 'LoadSystem');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strClass');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::LoadSystemExist
    * @todo   Implement testLoadSystemExist().
    */
    public function testLoadSystemExist()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadSystemExist', $methods ), 'exists method LoadSystemExist' );
        $r = new ReflectionMethod('G', 'LoadSystemExist');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strClass');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::RenderPage
    * @todo   Implement testRenderPage().
    */
    public function testRenderPage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('RenderPage', $methods ), 'exists method RenderPage' );
        $r = new ReflectionMethod('G', 'RenderPage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strTemplate');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == 'default');
        $this->assertTrue( $params[1]->getName() == 'strSkin');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'classic');
        $this->assertTrue( $params[2]->getName() == 'objContent');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'layout');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers G::LoadSkin
    * @todo   Implement testLoadSkin().
    */
    public function testLoadSkin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadSkin', $methods ), 'exists method LoadSkin' );
        $r = new ReflectionMethod('G', 'LoadSkin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strSkinName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::LoadInclude
    * @todo   Implement testLoadInclude().
    */
    public function testLoadInclude()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadInclude', $methods ), 'exists method LoadInclude' );
        $r = new ReflectionMethod('G', 'LoadInclude');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strInclude');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::LoadAllModelClasses
    * @todo   Implement testLoadAllModelClasses().
    */
    public function testLoadAllModelClasses()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadAllModelClasses', $methods ), 'exists method LoadAllModelClasses' );
        $r = new ReflectionMethod('G', 'LoadAllModelClasses');
        $params = $r->getParameters();
    }

    /**
    * @covers G::LoadAllPluginModelClasses
    * @todo   Implement testLoadAllPluginModelClasses().
    */
    public function testLoadAllPluginModelClasses()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadAllPluginModelClasses', $methods ), 'exists method LoadAllPluginModelClasses' );
        $r = new ReflectionMethod('G', 'LoadAllPluginModelClasses');
        $params = $r->getParameters();
    }

    /**
    * @covers G::LoadTemplate
    * @todo   Implement testLoadTemplate().
    */
    public function testLoadTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadTemplate', $methods ), 'exists method LoadTemplate' );
        $r = new ReflectionMethod('G', 'LoadTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strTemplateName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::LoadClassRBAC
    * @todo   Implement testLoadClassRBAC().
    */
    public function testLoadClassRBAC()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadClassRBAC', $methods ), 'exists method LoadClassRBAC' );
        $r = new ReflectionMethod('G', 'LoadClassRBAC');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strClass');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::LoadClass
    * @todo   Implement testLoadClass().
    */
    public function testLoadClass()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadClass', $methods ), 'exists method LoadClass' );
        $r = new ReflectionMethod('G', 'LoadClass');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strClass');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::LoadThirdParty
    * @todo   Implement testLoadThirdParty().
    */
    public function testLoadThirdParty()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadThirdParty', $methods ), 'exists method LoadThirdParty' );
        $r = new ReflectionMethod('G', 'LoadThirdParty');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sPath');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sFile');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::encryptlink
    * @todo   Implement testencryptlink().
    */
    public function testencryptlink()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('encryptlink', $methods ), 'exists method encryptlink' );
        $r = new ReflectionMethod('G', 'encryptlink');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'url');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::parseURI
    * todo   Implement testparseURI().
    */
    public function testparseURI()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseURI', $methods ), 'exists method parseURI' );
        $r = new ReflectionMethod('G', 'parseURI');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'uri');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'isRestRequest');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    public function parseNormalUri()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseNormalUri', $methods ), 'exists method parseNormalUri' );
        $r = new ReflectionMethod('G', 'parseNormalUri');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aRequestUri');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    public function parseRestUri()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseRestUri', $methods ), 'exists method parseRestUri' );
        $r = new ReflectionMethod('G', 'parseRestUri');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aRequestUri');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    public function dispatchRestService()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dispatchRestService', $methods ), 'exists method parseRestUri' );
        $r = new ReflectionMethod('G', 'dispatchRestService');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'uri');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::strip_slashes
    * @todo   Implement teststrip_slashes().
    */
    public function teststrip_slashes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('strip_slashes', $methods ), 'exists method strip_slashes' );
        $r = new ReflectionMethod('G', 'strip_slashes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'vVar');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::logTimeByPage
    * @todo   Implement testlogTimeByPage().
    */
    public function testlogTimeByPage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('logTimeByPage', $methods ), 'exists method logTimeByPage' );
        $r = new ReflectionMethod('G', 'logTimeByPage');
        $params = $r->getParameters();
    }

    /**
    * @covers G::streamCSSBigFile
    * @todo   Implement teststreamCSSBigFile().
    */
    public function teststreamCSSBigFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('streamCSSBigFile', $methods ), 'exists method streamCSSBigFile' );
        $r = new ReflectionMethod('G', 'streamCSSBigFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::streamJSTranslationFile
    * @todo   Implement teststreamJSTranslationFile().
    */
    public function teststreamJSTranslationFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('streamJSTranslationFile', $methods ), 'exists method streamJSTranslationFile' );
        $r = new ReflectionMethod('G', 'streamJSTranslationFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'locale');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'en');
    }

    /**
    * @covers G::streamFile
    * @todo   Implement teststreamFile().
    */
    public function teststreamFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('streamFile', $methods ), 'exists method streamFile' );
        $r = new ReflectionMethod('G', 'streamFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'download');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'downloadFileName');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::trimSourceCodeFile
    * @todo   Implement testtrimSourceCodeFile().
    */
    public function testtrimSourceCodeFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('trimSourceCodeFile', $methods ), 'exists method trimSourceCodeFile' );
        $r = new ReflectionMethod('G', 'trimSourceCodeFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::sendHeaders
    * @todo   Implement testsendHeaders().
    */
    public function testsendHeaders()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('sendHeaders', $methods ), 'exists method sendHeaders' );
        $r = new ReflectionMethod('G', 'sendHeaders');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'contentType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'download');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'downloadFileName');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers G::virtualURI
    * @todo   Implement testvirtualURI().
    */
    public function testvirtualURI()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('virtualURI', $methods ), 'exists method virtualURI' );
        $r = new ReflectionMethod('G', 'virtualURI');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'url');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'convertionTable');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'realPath');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers G::createUID
    * @todo   Implement testcreateUID().
    */
    public function testcreateUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createUID', $methods ), 'exists method createUID' );
        $r = new ReflectionMethod('G', 'createUID');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'scope');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'id');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::getUIDName
    * @todo   Implement testgetUIDName().
    */
    public function testgetUIDName()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUIDName', $methods ), 'exists method getUIDName' );
        $r = new ReflectionMethod('G', 'getUIDName');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'uid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'scope');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers G::formatNumber
    * @todo   Implement testformatNumber().
    */
    public function testformatNumber()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('formatNumber', $methods ), 'exists method formatNumber' );
        $r = new ReflectionMethod('G', 'formatNumber');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'num');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'language');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'latin');
    }

    /**
    * @covers G::formatDate
    * @todo   Implement testformatDate().
    */
    public function testformatDate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('formatDate', $methods ), 'exists method formatDate' );
        $r = new ReflectionMethod('G', 'formatDate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'datetime');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'format');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'Y-m-d');
        $this->assertTrue( $params[2]->getName() == 'lang');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::getformatedDate
    * @todo   Implement testgetformatedDate().
    */
    public function testgetformatedDate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getformatedDate', $methods ), 'exists method getformatedDate' );
        $r = new ReflectionMethod('G', 'getformatedDate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'date');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'format');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'yyyy-mm-dd');
        $this->assertTrue( $params[2]->getName() == 'lang');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::arrayDiff
    * @todo   Implement testarrayDiff().
    */
    public function testarrayDiff()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('arrayDiff', $methods ), 'exists method arrayDiff' );
        $r = new ReflectionMethod('G', 'arrayDiff');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array1');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'array2');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::complete_field
    * @todo   Implement testcomplete_field().
    */
    public function testcomplete_field()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('complete_field', $methods ), 'exists method complete_field' );
        $r = new ReflectionMethod('G', 'complete_field');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'campo');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'long');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'tipo');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers G::sqlEscape
    * @todo   Implement testsqlEscape().
    */
    public function testsqlEscape()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('sqlEscape', $methods ), 'exists method sqlEscape' );
        $r = new ReflectionMethod('G', 'sqlEscape');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sqlString');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'DBEngine');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == DB_ADAPTER);
    }

    /**
    * @covers G::MySQLSintaxis
    * @todo   Implement testMySQLSintaxis().
    */
    public function testMySQLSintaxis()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('MySQLSintaxis', $methods ), 'exists method MySQLSintaxis' );
        $r = new ReflectionMethod('G', 'MySQLSintaxis');
        $params = $r->getParameters();
    }

    /**
    * @covers G::replaceDataField
    * @todo   Implement testreplaceDataField().
    */
    public function testreplaceDataField()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('replaceDataField', $methods ), 'exists method replaceDataField' );
        $r = new ReflectionMethod('G', 'replaceDataField');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sqlString');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'result');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'DBEngine');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'mysql');
    }

    /**
    * @covers G::loadLanguageFile
    * @todo   Implement testloadLanguageFile().
    */
    public function testloadLanguageFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadLanguageFile', $methods ), 'exists method loadLanguageFile' );
        $r = new ReflectionMethod('G', 'loadLanguageFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'languageId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'forceParse');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::registerLabel
    * @todo   Implement testregisterLabel().
    */
    public function testregisterLabel()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerLabel', $methods ), 'exists method registerLabel' );
        $r = new ReflectionMethod('G', 'registerLabel');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'id');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'label');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::LoadMenuXml
    * @todo   Implement testLoadMenuXml().
    */
    public function testLoadMenuXml()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadMenuXml', $methods ), 'exists method LoadMenuXml' );
        $r = new ReflectionMethod('G', 'LoadMenuXml');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::SendMessageXml
    * @todo   Implement testSendMessageXml().
    */
    public function testSendMessageXml()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('SendMessageXml', $methods ), 'exists method SendMessageXml' );
        $r = new ReflectionMethod('G', 'SendMessageXml');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'strType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'file');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'labels');
    }

    /**
    * @covers G::SendTemporalMessage
    * @todo   Implement testSendTemporalMessage().
    */
    public function testSendTemporalMessage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('SendTemporalMessage', $methods ), 'exists method SendTemporalMessage' );
        $r = new ReflectionMethod('G', 'SendTemporalMessage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'strType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'LABEL');
        $this->assertTrue( $params[3]->getName() == 'time');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
        $this->assertTrue( $params[4]->getName() == 'width');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
        $this->assertTrue( $params[5]->getName() == 'customLabels');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == true);
        $this->assertTrue( $params[5]->getDefaultValue() == '');
    }

    /**
    * @covers G::SendMessage
    * @todo   Implement testSendMessage().
    */
    public function testSendMessage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('SendMessage', $methods ), 'exists method SendMessage' );
        $r = new ReflectionMethod('G', 'SendMessage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'strType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'file');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'labels');
    }

    /**
    * @covers G::SendMessageText
    * @todo   Implement testSendMessageText().
    */
    public function testSendMessageText()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('SendMessageText', $methods ), 'exists method SendMessageText' );
        $r = new ReflectionMethod('G', 'SendMessageText');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'text');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'strType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::LoadMessage
    * @todo   Implement testLoadMessage().
    */
    public function testLoadMessage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadMessage', $methods ), 'exists method LoadMessage' );
        $r = new ReflectionMethod('G', 'LoadMessage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'file');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'messages');
    }

    /**
    * @covers G::LoadXmlLabel
    * @todo   Implement testLoadXmlLabel().
    */
    public function testLoadXmlLabel()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadXmlLabel', $methods ), 'exists method LoadXmlLabel' );
        $r = new ReflectionMethod('G', 'LoadXmlLabel');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'file');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'labels');
    }

    /**
    * @covers G::LoadMessageXml
    * @todo   Implement testLoadMessageXml().
    */
    public function testLoadMessageXml()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadMessageXml', $methods ), 'exists method LoadMessageXml' );
        $r = new ReflectionMethod('G', 'LoadMessageXml');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'file');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'labels');
    }

    /**
    * @covers G::LoadTranslationObject
    * @todo   Implement testLoadTranslationObject().
    */
    public function testLoadTranslationObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadTranslationObject', $methods ), 'exists method LoadTranslationObject' );
        $r = new ReflectionMethod('G', 'LoadTranslationObject');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'lang');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == 'en');
    }

    /**
    * @covers G::LoadTranslation
    * @todo   Implement testLoadTranslation().
    */
    public function testLoadTranslation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadTranslation', $methods ), 'exists method LoadTranslation' );
        $r = new ReflectionMethod('G', 'LoadTranslation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'lang');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'en');
        $this->assertTrue( $params[2]->getName() == 'data');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::getTranslations
    * @todo   Implement testgetTranslations().
    */
    public function testgetTranslations()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTranslations', $methods ), 'exists method getTranslations' );
        $r = new ReflectionMethod('G', 'getTranslations');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'msgIDs');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'lang');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'en');
    }

    /**
    * @covers G::LoadArrayFile
    * @todo   Implement testLoadArrayFile().
    */
    public function testLoadArrayFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('LoadArrayFile', $methods ), 'exists method LoadArrayFile' );
        $r = new ReflectionMethod('G', 'LoadArrayFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'strFile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers G::expandUri
    * @todo   Implement testexpandUri().
    */
    public function testexpandUri()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('expandUri', $methods ), 'exists method expandUri' );
        $r = new ReflectionMethod('G', 'expandUri');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'methodPage');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::genericForceLogin
    * @todo   Implement testgenericForceLogin().
    */
    public function testgenericForceLogin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('genericForceLogin', $methods ), 'exists method genericForceLogin' );
        $r = new ReflectionMethod('G', 'genericForceLogin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'permission');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'urlNoAccess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'urlLogin');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'login/login');
    }

    /**
    * @covers G::capitalize
    * @todo   Implement testcapitalize().
    */
    public function testcapitalize()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('capitalize', $methods ), 'exists method capitalize' );
        $r = new ReflectionMethod('G', 'capitalize');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::toUpper
    * @todo   Implement testtoUpper().
    */
    public function testtoUpper()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('toUpper', $methods ), 'exists method toUpper' );
        $r = new ReflectionMethod('G', 'toUpper');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sText');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::toLower
    * @todo   Implement testtoLower().
    */
    public function testtoLower()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('toLower', $methods ), 'exists method toLower' );
        $r = new ReflectionMethod('G', 'toLower');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sText');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::http_build_query
    * @todo   Implement testhttp_build_query().
    */
    public function testhttp_build_query()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('http_build_query', $methods ), 'exists method http_build_query' );
        $r = new ReflectionMethod('G', 'http_build_query');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'formdata');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'numeric_prefix');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'key');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::header
    * @todo   Implement testheader().
    */
    public function testheader()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('header', $methods ), 'exists method header' );
        $r = new ReflectionMethod('G', 'header');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'parameter');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::forceLogin
    * @todo   Implement testforceLogin().
    */
    public function testforceLogin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('forceLogin', $methods ), 'exists method forceLogin' );
        $r = new ReflectionMethod('G', 'forceLogin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'permission');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'urlNoAccess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers G::add_slashes
    * @todo   Implement testadd_slashes().
    */
    public function testadd_slashes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('add_slashes', $methods ), 'exists method add_slashes' );
        $r = new ReflectionMethod('G', 'add_slashes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'val_old');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::uploadFile
    * @todo   Implement testuploadFile().
    */
    public function testuploadFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('uploadFile', $methods ), 'exists method uploadFile' );
        $r = new ReflectionMethod('G', 'uploadFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'path');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'nameToSave');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'permission');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '438');
    }

    /**
    * @covers G::resizeImage
    * @todo   Implement testresizeImage().
    */
    public function testresizeImage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('resizeImage', $methods ), 'exists method resizeImage' );
        $r = new ReflectionMethod('G', 'resizeImage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'path');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'resWidth');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'resHeight');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'saveTo');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers G::array_merges
    * @todo   Implement testarray_merges().
    */
    public function testarray_merges()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('array_merges', $methods ), 'exists method array_merges' );
        $r = new ReflectionMethod('G', 'array_merges');
        $params = $r->getParameters();
    }

    /**
    * @covers G::array_merge_2
    * @todo   Implement testarray_merge_2().
    */
    public function testarray_merge_2()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('array_merge_2', $methods ), 'exists method array_merge_2' );
        $r = new ReflectionMethod('G', 'array_merge_2');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'array_i');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::generateUniqueID
    * @todo   Implement testgenerateUniqueID().
    */
    public function testgenerateUniqueID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateUniqueID', $methods ), 'exists method generateUniqueID' );
        $r = new ReflectionMethod('G', 'generateUniqueID');
        $params = $r->getParameters();
    }

    /**
    * @covers G::generateCode
    * @todo   Implement testgenerateCode().
    */
    public function testgenerateCode()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generateCode', $methods ), 'exists method generateCode' );
        $r = new ReflectionMethod('G', 'generateCode');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'iDigits');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '4');
        $this->assertTrue( $params[1]->getName() == 'sType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'NUMERIC');
    }

    /**
    * @covers G::verifyUniqueID
    * @todo   Implement testverifyUniqueID().
    */
    public function testverifyUniqueID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyUniqueID', $methods ), 'exists method verifyUniqueID' );
        $r = new ReflectionMethod('G', 'verifyUniqueID');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'uid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::is_utf8
    * @todo   Implement testis_utf8().
    */
    public function testis_utf8()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('is_utf8', $methods ), 'exists method is_utf8' );
        $r = new ReflectionMethod('G', 'is_utf8');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::CurDate
    * @todo   Implement testCurDate().
    */
    public function testCurDate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('CurDate', $methods ), 'exists method CurDate' );
        $r = new ReflectionMethod('G', 'CurDate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sFormat');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers G::getSystemConstants
    * @todo   Implement testgetSystemConstants().
    */
    public function testgetSystemConstants()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSystemConstants', $methods ), 'exists method getSystemConstants' );
        $r = new ReflectionMethod('G', 'getSystemConstants');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'params');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers G::capitalizeWords
    * @todo   Implement testcapitalizeWords().
    */
    public function testcapitalizeWords()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('capitalizeWords', $methods ), 'exists method capitalizeWords' );
        $r = new ReflectionMethod('G', 'capitalizeWords');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'text');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::unhtmlentities
    * @todo   Implement testunhtmlentities().
    */
    public function testunhtmlentities()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('unhtmlentities', $methods ), 'exists method unhtmlentities' );
        $r = new ReflectionMethod('G', 'unhtmlentities');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::xmlParser
    * @todo   Implement testxmlParser().
    */
    public function testxmlParser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('xmlParser', $methods ), 'exists method xmlParser' );
        $r = new ReflectionMethod('G', 'xmlParser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::_del_p
    * @todo   Implement test_del_p().
    */
    public function test_del_p()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('_del_p', $methods ), 'exists method _del_p' );
        $r = new ReflectionMethod('G', '_del_p');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'ary');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::ary2xml
    * @todo   Implement testary2xml().
    */
    public function testary2xml()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ary2xml', $methods ), 'exists method ary2xml' );
        $r = new ReflectionMethod('G', 'ary2xml');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'cary');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'd');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'forcetag');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::ins2ary
    * @todo   Implement testins2ary().
    */
    public function testins2ary()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ins2ary', $methods ), 'exists method ins2ary' );
        $r = new ReflectionMethod('G', 'ins2ary');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'ary');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'element');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'pos');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers G::evalJScript
    * @todo   Implement testevalJScript().
    */
    public function testevalJScript()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('evalJScript', $methods ), 'exists method evalJScript' );
        $r = new ReflectionMethod('G', 'evalJScript');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'c');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::inflect
    * @todo   Implement testinflect().
    */
    public function testinflect()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('inflect', $methods ), 'exists method inflect' );
        $r = new ReflectionMethod('G', 'inflect');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'replacement');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '_');
        $this->assertTrue( $params[2]->getName() == 'map');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == array());
    }

    /**
    * @covers G::pr
    * @todo   Implement testpr().
    */
    public function testpr()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('pr', $methods ), 'exists method pr' );
        $r = new ReflectionMethod('G', 'pr');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'var');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::dump
    * @todo   Implement testdump().
    */
    public function testdump()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dump', $methods ), 'exists method dump' );
        $r = new ReflectionMethod('G', 'dump');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'var');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::stripCDATA
    * @todo   Implement teststripCDATA().
    */
    public function teststripCDATA()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('stripCDATA', $methods ), 'exists method stripCDATA' );
        $r = new ReflectionMethod('G', 'stripCDATA');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::sys_get_temp_dir
    * @todo   Implement testsys_get_temp_dir().
    */
    public function testsys_get_temp_dir()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('sys_get_temp_dir', $methods ), 'exists method sys_get_temp_dir' );
        $r = new ReflectionMethod('G', 'sys_get_temp_dir');
        $params = $r->getParameters();
    }

    /**
    * @covers G::PMWSCompositeResponse
    * @todo   Implement testPMWSCompositeResponse().
    */
    public function testPMWSCompositeResponse()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('PMWSCompositeResponse', $methods ), 'exists method PMWSCompositeResponse' );
        $r = new ReflectionMethod('G', 'PMWSCompositeResponse');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oResp');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'prop');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::emailAddress
    * @todo   Implement testemailAddress().
    */
    public function testemailAddress()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('emailAddress', $methods ), 'exists method emailAddress' );
        $r = new ReflectionMethod('G', 'emailAddress');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sEmail');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::json_encode
    * @todo   Implement testjson_encode().
    */
    public function testjson_encode()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('json_encode', $methods ), 'exists method json_encode' );
        $r = new ReflectionMethod('G', 'json_encode');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'Json');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::json_decode
    * @todo   Implement testjson_decode().
    */
    public function testjson_decode()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('json_decode', $methods ), 'exists method json_decode' );
        $r = new ReflectionMethod('G', 'json_decode');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'Json');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::isHttpRequest
    * @todo   Implement testisHttpRequest().
    */
    public function testisHttpRequest()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('isHttpRequest', $methods ), 'exists method isHttpRequest' );
        $r = new ReflectionMethod('G', 'isHttpRequest');
        $params = $r->getParameters();
    }

    /**
    * @covers G::sendMail
    * @todo   Implement testsendMail().
    */
    public function testsendMail()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('sendMail', $methods ), 'exists method sendMail' );
        $r = new ReflectionMethod('G', 'sendMail');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'from');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'fromName');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'address');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'subject');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'body');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
    }

    /**
    * @covers G::envelopEmailAddresses
    * @todo   Implement testenvelopEmailAddresses().
    */
    public function testenvelopEmailAddresses()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('envelopEmailAddresses', $methods ), 'exists method envelopEmailAddresses' );
        $r = new ReflectionMethod('G', 'envelopEmailAddresses');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'address');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::gettype
    * @todo   Implement testgettype().
    */
    public function testgettype()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('gettype', $methods ), 'exists method gettype' );
        $r = new ReflectionMethod('G', 'gettype');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'var');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::removeComments
    * @todo   Implement testremoveComments().
    */
    public function testremoveComments()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeComments', $methods ), 'exists method removeComments' );
        $r = new ReflectionMethod('G', 'removeComments');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'buffer');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::getMemoryUsage
    * @todo   Implement testgetMemoryUsage().
    */
    public function testgetMemoryUsage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getMemoryUsage', $methods ), 'exists method getMemoryUsage' );
        $r = new ReflectionMethod('G', 'getMemoryUsage');
        $params = $r->getParameters();
    }

    /**
    * @covers G::getFormatUserList
    * @todo   Implement testgetFormatUserList().
    */
    public function testgetFormatUserList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getFormatUserList', $methods ), 'exists method getFormatUserList' );
        $r = new ReflectionMethod('G', 'getFormatUserList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'format');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aUserInfo');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::getModel
    * @todo   Implement testgetModel().
    */
    public function testgetModel()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getModel', $methods ), 'exists method getModel' );
        $r = new ReflectionMethod('G', 'getModel');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'model');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::is_rwritable
    * @todo   Implement testis_rwritable().
    */
    public function testis_rwritable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('is_rwritable', $methods ), 'exists method is_rwritable' );
        $r = new ReflectionMethod('G', 'is_rwritable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'path');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pattern');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '*');
    }

    /**
    * @covers G::rglob
    * @todo   Implement testrglob().
    */
    public function testrglob()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('rglob', $methods ), 'exists method rglob' );
        $r = new ReflectionMethod('G', 'rglob');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pattern');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '*');
        $this->assertTrue( $params[1]->getName() == 'flags');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'path');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::browser_detection
    * @todo   Implement testbrowser_detection().
    */
    public function testbrowser_detection()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('browser_detection', $methods ), 'exists method browser_detection' );
        $r = new ReflectionMethod('G', 'browser_detection');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'which_test');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'test_excludes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'external_ua_string');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers G::get_os_data
    * @todo   Implement testget_os_data().
    */
    public function testget_os_data()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('get_os_data', $methods ), 'exists method get_os_data' );
        $r = new ReflectionMethod('G', 'get_os_data');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pv_browser_string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pv_browser_name');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'pv_version_number');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers G::get_item_version
    * @todo   Implement testget_item_version().
    */
    public function testget_item_version()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('get_item_version', $methods ), 'exists method get_item_version' );
        $r = new ReflectionMethod('G', 'get_item_version');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pv_browser_user_agent');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pv_search_string');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'pv_b_break_last');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'pv_extra_search');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers G::get_set_count
    * @todo   Implement testget_set_count().
    */
    public function testget_set_count()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('get_set_count', $methods ), 'exists method get_set_count' );
        $r = new ReflectionMethod('G', 'get_set_count');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pv_type');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pv_value');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers G::check_is_mobile
    * @todo   Implement testcheck_is_mobile().
    */
    public function testcheck_is_mobile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('check_is_mobile', $methods ), 'exists method check_is_mobile' );
        $r = new ReflectionMethod('G', 'check_is_mobile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pv_browser_user_agent');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::get_mobile_data
    * @todo   Implement testget_mobile_data().
    */
    public function testget_mobile_data()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('get_mobile_data', $methods ), 'exists method get_mobile_data' );
        $r = new ReflectionMethod('G', 'get_mobile_data');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pv_browser_user_agent');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::getBrowser
    * @todo   Implement testgetBrowser().
    */
    public function testgetBrowser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getBrowser', $methods ), 'exists method getBrowser' );
        $r = new ReflectionMethod('G', 'getBrowser');
        $params = $r->getParameters();
    }

    /**
    * @covers G::script_time
    * @todo   Implement testscript_time().
    */
    public function testscript_time()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('script_time', $methods ), 'exists method script_time' );
        $r = new ReflectionMethod('G', 'script_time');
        $params = $r->getParameters();
    }

    /**
    * @covers G::getDirectorySize
    * @todo   Implement testgetDirectorySize().
    */
    public function testgetDirectorySize()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDirectorySize', $methods ), 'exists method getDirectorySize' );
        $r = new ReflectionMethod('G', 'getDirectorySize');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'path');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'maxmtime');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
    }

    /**
    * @covers G::getCacheFileNameByPattern
    * @todo   Implement testgetCacheFileNameByPattern().
    */
    public function testgetCacheFileNameByPattern()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCacheFileNameByPattern', $methods ), 'exists method getCacheFileNameByPattern' );
        $r = new ReflectionMethod('G', 'getCacheFileNameByPattern');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'path');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pattern');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::getCheckSum
    * @todo   Implement testgetCheckSum().
    */
    public function testgetCheckSum()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCheckSum', $methods ), 'exists method getCheckSum' );
        $r = new ReflectionMethod('G', 'getCheckSum');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'files');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::parse_ini_string
    * @todo   Implement testparse_ini_string().
    */
    public function testparse_ini_string()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parse_ini_string', $methods ), 'exists method parse_ini_string' );
        $r = new ReflectionMethod('G', 'parse_ini_string');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'string');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::disableEnableINIvariable
    * @todo   Implement testdisableEnableINIvariable().
    */
    public function testdisableEnableINIvariable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('disableEnableINIvariable', $methods ), 'exists method disableEnableINIvariable' );
        $r = new ReflectionMethod('G', 'disableEnableINIvariable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'inifile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'variable');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::setINIvariable
    * @todo   Implement testsetINIvariable().
    */
    public function testsetINIvariable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setINIvariable', $methods ), 'exists method setINIvariable' );
        $r = new ReflectionMethod('G', 'setINIvariable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'inifile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'variable');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'value');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers G::write_php_ini
    * @todo   Implement testwrite_php_ini().
    */
    public function testwrite_php_ini()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('write_php_ini', $methods ), 'exists method write_php_ini' );
        $r = new ReflectionMethod('G', 'write_php_ini');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'array');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::verifyWriteAccess
    * @todo   Implement testverifyWriteAccess().
    */
    public function testverifyWriteAccess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyWriteAccess', $methods ), 'exists method verifyWriteAccess' );
        $r = new ReflectionMethod('G', 'verifyWriteAccess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'resources');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers G::renderTemplate
    * @todo   Implement testrenderTemplate().
    */
    public function testrenderTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renderTemplate', $methods ), 'exists method renderTemplate' );
        $r = new ReflectionMethod('G', 'renderTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'template');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'data');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    /**
    * @covers G::parseTemplate
    * @todo   Implement testparseTemplate().
    */
    public function testparseTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseTemplate', $methods ), 'exists method parseTemplate' );
        $r = new ReflectionMethod('G', 'parseTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'template');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'data');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    /**
    * @covers G::update_php_ini
    * @todo   Implement testupdate_php_ini().
    */
    public function testupdate_php_ini()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('update_php_ini', $methods ), 'exists method update_php_ini' );
        $r = new ReflectionMethod('G', 'update_php_ini');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'array');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers G::is_writable_r
    * @todo   Implement testis_writable_r().
    */
    public function testis_writable_r()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('is_writable_r', $methods ), 'exists method is_writable_r' );
        $r = new ReflectionMethod('G', 'is_writable_r');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'path');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'noWritableFiles');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

  }
