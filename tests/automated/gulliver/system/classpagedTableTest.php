<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.pagedTable.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:22.
*/

class classpagedTableTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var pagedTable
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new pagedTable();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('pagedTable');        $this->assertTrue( count($methods) == 9);
    }

    /**
    * @covers pagedTable::analizeSql
    * @todo   Implement testanalizeSql().
    */
    public function testanalizeSql()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('analizeSql', $methods ), 'exists method analizeSql' );
        $r = new ReflectionMethod('pagedTable', 'analizeSql');
        $params = $r->getParameters();
    }

    /**
    * @covers pagedTable::prepareQuery
    * @todo   Implement testprepareQuery().
    */
    public function testprepareQuery()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('prepareQuery', $methods ), 'exists method prepareQuery' );
        $r = new ReflectionMethod('pagedTable', 'prepareQuery');
        $params = $r->getParameters();
    }

    /**
    * @covers pagedTable::setupFromXmlform
    * @todo   Implement testsetupFromXmlform().
    */
    public function testsetupFromXmlform()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setupFromXmlform', $methods ), 'exists method setupFromXmlform' );
        $r = new ReflectionMethod('pagedTable', 'setupFromXmlform');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'xmlForm');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers pagedTable::count
    * @todo   Implement testcount().
    */
    public function testcount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('count', $methods ), 'exists method count' );
        $r = new ReflectionMethod('pagedTable', 'count');
        $params = $r->getParameters();
    }

    /**
    * @covers pagedTable::renderTitle
    * @todo   Implement testrenderTitle().
    */
    public function testrenderTitle()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renderTitle', $methods ), 'exists method renderTitle' );
        $r = new ReflectionMethod('pagedTable', 'renderTitle');
        $params = $r->getParameters();
    }

    /**
    * @covers pagedTable::renderField
    * @todo   Implement testrenderField().
    */
    public function testrenderField()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renderField', $methods ), 'exists method renderField' );
        $r = new ReflectionMethod('pagedTable', 'renderField');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'row');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'r');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'result');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers pagedTable::defaultStyle
    * @todo   Implement testdefaultStyle().
    */
    public function testdefaultStyle()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('defaultStyle', $methods ), 'exists method defaultStyle' );
        $r = new ReflectionMethod('pagedTable', 'defaultStyle');
        $params = $r->getParameters();
    }

    /**
    * @covers pagedTable::renderTable
    * @todo   Implement testrenderTable().
    */
    public function testrenderTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renderTable', $methods ), 'exists method renderTable' );
        $r = new ReflectionMethod('pagedTable', 'renderTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'block');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers pagedTable::printForm
    * @todo   Implement testprintForm().
    */
    public function testprintForm()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('printForm', $methods ), 'exists method printForm' );
        $r = new ReflectionMethod('pagedTable', 'printForm');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'data');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == Array());
    }

  }
