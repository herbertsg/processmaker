<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.templatePower.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:23.
*/

class classTemplatePowerParserTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var TemplatePowerParser
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $tpl_file='';
        $type='';
        $this->object = new TemplatePowerParser($tpl_file, $type);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('TemplatePowerParser');        $this->assertTrue( count($methods) == 8);
    }

    /**
    * @covers TemplatePowerParser::TemplatePowerParser
    * @todo   Implement testTemplatePowerParser().
    */
    public function testTemplatePowerParser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('TemplatePowerParser', $methods ), 'exists method TemplatePowerParser' );
        $r = new ReflectionMethod('TemplatePowerParser', 'TemplatePowerParser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tpl_file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'type');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers TemplatePowerParser::__errorAlert
    * @todo   Implement test__errorAlert().
    */
    public function test__errorAlert()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__errorAlert', $methods ), 'exists method __errorAlert' );
        $r = new ReflectionMethod('TemplatePowerParser', '__errorAlert');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'message');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers TemplatePowerParser::__prepare
    * @todo   Implement test__prepare().
    */
    public function test__prepare()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__prepare', $methods ), 'exists method __prepare' );
        $r = new ReflectionMethod('TemplatePowerParser', '__prepare');
        $params = $r->getParameters();
    }

    /**
    * @covers TemplatePowerParser::__cleanUp
    * @todo   Implement test__cleanUp().
    */
    public function test__cleanUp()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__cleanUp', $methods ), 'exists method __cleanUp' );
        $r = new ReflectionMethod('TemplatePowerParser', '__cleanUp');
        $params = $r->getParameters();
    }

    /**
    * @covers TemplatePowerParser::__prepareTemplate
    * @todo   Implement test__prepareTemplate().
    */
    public function test__prepareTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__prepareTemplate', $methods ), 'exists method __prepareTemplate' );
        $r = new ReflectionMethod('TemplatePowerParser', '__prepareTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tpl_file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'type');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers TemplatePowerParser::__parseTemplate
    * @todo   Implement test__parseTemplate().
    */
    public function test__parseTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__parseTemplate', $methods ), 'exists method __parseTemplate' );
        $r = new ReflectionMethod('TemplatePowerParser', '__parseTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tplvar');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'blockname');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'initdev');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers TemplatePowerParser::version
    * @todo   Implement testversion().
    */
    public function testversion()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('version', $methods ), 'exists method version' );
        $r = new ReflectionMethod('TemplatePowerParser', 'version');
        $params = $r->getParameters();
    }

    /**
    * @covers TemplatePowerParser::assignInclude
    * @todo   Implement testassignInclude().
    */
    public function testassignInclude()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignInclude', $methods ), 'exists method assignInclude' );
        $r = new ReflectionMethod('TemplatePowerParser', 'assignInclude');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'iblockname');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'value');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'type');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

  }
