<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:24.
*/

class classXmlForm_Field_XmlformTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var XmlForm_Field_Xmlform
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $attributes = array('type'=>'input');
        $fieldNode = new Xml_Node('testField', 'type', 'value', $attributes);
        $file = PATH_TRUNK . 'workflow/engine/xmlform/login/login';
        $this->object = new XmlForm_Field_Xmlform($fieldNode,'lang',$file,'owner');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('XmlForm_Field_Xmlform');        $this->assertTrue( count($methods) == 26);
    }

    /**
    * @covers XmlForm_Field_Xmlform::XmlForm_Field_Xmlform
    * @todo   Implement testXmlForm_Field_Xmlform().
    */
    public function testXmlForm_Field_Xmlform()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('XmlForm_Field_Xmlform', $methods ), 'exists method XmlForm_Field_Xmlform' );
        $r = new ReflectionMethod('XmlForm_Field_Xmlform', 'XmlForm_Field_Xmlform');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'xmlnode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'language');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'home');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers XmlForm_Field_Xmlform::parseFile
    * @todo   Implement testparseFile().
    */
    public function testparseFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseFile', $methods ), 'exists method parseFile' );
        $r = new ReflectionMethod('XmlForm_Field_Xmlform', 'parseFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'home');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'language');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers XmlForm_Field_Xmlform::render
    * @todo   Implement testrender().
    */
    public function testrender()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('render', $methods ), 'exists method render' );
        $r = new ReflectionMethod('XmlForm_Field_Xmlform', 'render');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'values');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

  }
