<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.helper.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:22.
*/

class classHelperTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Helper
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Helper();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Helper');        $this->assertTrue( count($methods) == 8);
    }

    /**
    * @covers Helper::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('Helper', '__construct');
        $params = $r->getParameters();
    } 

    /**
    * @covers Helper::addFile
    * @todo   Implement testaddFile().
    */
    public function testaddFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addFile', $methods ), 'exists method addFile' );
        $r = new ReflectionMethod('Helper', 'addFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Helper::addContent
    * @todo   Implement testaddContent().
    */
    public function testaddContent()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addContent', $methods ), 'exists method addContent' );
        $r = new ReflectionMethod('Helper', 'addContent');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'content');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Helper::setContentType
    * @todo   Implement testsetContentType().
    */
    public function testsetContentType()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setContentType', $methods ), 'exists method setContentType' );
        $r = new ReflectionMethod('Helper', 'setContentType');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'ctype');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Helper::init
    * @todo   Implement testinit().
    */
    public function testinit()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('init', $methods ), 'exists method init' );
        $r = new ReflectionMethod('Helper', 'init');
        $params = $r->getParameters();
    } 

    /**
    * @covers Helper::minify
    * @todo   Implement testminify().
    */
    public function testminify()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('minify', $methods ), 'exists method minify' );
        $r = new ReflectionMethod('Helper', 'minify');
        $params = $r->getParameters();
    } 

    /**
    * @covers Helper::flush
    * @todo   Implement testflush().
    */
    public function testflush()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('flush', $methods ), 'exists method flush' );
        $r = new ReflectionMethod('Helper', 'flush');
        $params = $r->getParameters();
    } 

    /**
    * @covers Helper::serve
    * @todo   Implement testserve().
    */
    public function testserve()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('serve', $methods ), 'exists method serve' );
        $r = new ReflectionMethod('Helper', 'serve');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'type');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

  } 
