<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.error.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:24.
*/

class classG_ErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var G_Error
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new G_Error();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('G_Error');        $this->assertTrue( count($methods) == 13);
    }

    /**
    * @covers G_Error::G_Error
    * @todo   Implement testG_Error().
    */
    public function testG_Error()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('G_Error', $methods ), 'exists method G_Error' );
        $r = new ReflectionMethod('G_Error', 'G_Error');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'code');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '-100');
        $this->assertTrue( $params[1]->getName() == 'mode');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
        $this->assertTrue( $params[2]->getName() == 'level');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '1024');
        $this->assertTrue( $params[3]->getName() == 'debuginfo');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    } 

    /**
    * @covers G_Error::errorMessage
    * @todo   Implement testerrorMessage().
    */
    public function testerrorMessage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('errorMessage', $methods ), 'exists method errorMessage' );
        $r = new ReflectionMethod('G_Error', 'errorMessage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'code');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

  } 
