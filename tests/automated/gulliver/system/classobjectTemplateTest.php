<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.objectTemplate.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:22.
*/

class classobjectTemplateTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var objectTemplate
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $templateFile = '';
        $this->object = new objectTemplate($templateFile);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('objectTemplate');
        $this->assertTrue( count($methods) == 60);
    }

    /**
    * @covers objectTemplate::objectTemplate
    * @todo   Implement testobjectTemplate().
    */
    public function testobjectTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('objectTemplate', $methods ), 'exists method objectTemplate' );
        $r = new ReflectionMethod('objectTemplate', 'objectTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'templateFile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers objectTemplate::printObject
    * @todo   Implement testprintObject().
    */
    public function testprintObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('printObject', $methods ), 'exists method printObject' );
        $r = new ReflectionMethod('objectTemplate', 'printObject');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'object');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

  }
