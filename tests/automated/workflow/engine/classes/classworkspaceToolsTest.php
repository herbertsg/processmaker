<?php

require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.wsTools.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:24.
*/

class classworkspaceToolsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var workspaceTools
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new workspaceTools('$workspaceName');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('workspaceTools');
        $this->assertTrue( count($methods) == 28 );
    }

    /**
    * @covers workspaceTools::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('workspaceTools', '__construct');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspaceName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::workspaceExists
    * @todo   Implement testworkspaceExists().
    */
    public function testworkspaceExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('workspaceExists', $methods ), 'exists method workspaceExists' );
        $r = new ReflectionMethod('workspaceTools', 'workspaceExists');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::upgrade
    * @todo   Implement testupgrade().
    */
    public function testupgrade()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgrade', $methods ), 'exists method upgrade' );
        $r = new ReflectionMethod('workspaceTools', 'upgrade');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'first');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers workspaceTools::getDBInfo
    * @todo   Implement testgetDBInfo().
    */
    public function testgetDBInfo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDBInfo', $methods ), 'exists method getDBInfo' );
        $r = new ReflectionMethod('workspaceTools', 'getDBInfo');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::resetDBInfo
    * @todo   Implement testresetDBInfo().
    */
    public function testresetDBInfo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('resetDBInfo', $methods ), 'exists method resetDBInfo' );
        $r = new ReflectionMethod('workspaceTools', 'resetDBInfo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'newHost');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'resetDBNames');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers workspaceTools::getDBCredentials
    * @todo   Implement testgetDBCredentials().
    */
    public function testgetDBCredentials()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDBCredentials', $methods ), 'exists method getDBCredentials' );
        $r = new ReflectionMethod('workspaceTools', 'getDBCredentials');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dbName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::initPropel
    * @todo   Implement testinitPropel().
    */
    public function testinitPropel()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('initPropel', $methods ), 'exists method initPropel' );
        $r = new ReflectionMethod('workspaceTools', 'initPropel');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'root');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers workspaceTools::upgradeTranslation
    * @todo   Implement testupgradeTranslation().
    */
    public function testupgradeTranslation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeTranslation', $methods ), 'exists method upgradeTranslation' );
        $r = new ReflectionMethod('workspaceTools', 'upgradeTranslation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'first');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '1');
    }

    /**
    * @covers workspaceTools::close
    * @todo   Implement testclose().
    */
    public function testclose()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('close', $methods ), 'exists method close' );
        $r = new ReflectionMethod('workspaceTools', 'close');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::getSchema
    * @todo   Implement testgetSchema().
    */
    public function testgetSchema()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSchema', $methods ), 'exists method getSchema' );
        $r = new ReflectionMethod('workspaceTools', 'getSchema');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::upgradeCacheView
    * @todo   Implement testupgradeCacheView().
    */
    public function testupgradeCacheView()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeCacheView', $methods ), 'exists method upgradeCacheView' );
        $r = new ReflectionMethod('workspaceTools', 'upgradeCacheView');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fill');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '1');
    }

    /**
    * @covers workspaceTools::upgradePluginsDatabase
    * @todo   Implement testupgradePluginsDatabase().
    */
    public function testupgradePluginsDatabase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradePluginsDatabase', $methods ), 'exists method upgradePluginsDatabase' );
        $r = new ReflectionMethod('workspaceTools', 'upgradePluginsDatabase');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::upgradeDatabase
    * @todo   Implement testupgradeDatabase().
    */
    public function testupgradeDatabase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeDatabase', $methods ), 'exists method upgradeDatabase' );
        $r = new ReflectionMethod('workspaceTools', 'upgradeDatabase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'checkOnly');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers workspaceTools::upgradeSchema
    * @todo   Implement testupgradeSchema().
    */
    public function testupgradeSchema()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeSchema', $methods ), 'exists method upgradeSchema' );
        $r = new ReflectionMethod('workspaceTools', 'upgradeSchema');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'schema');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'checkOnly');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers workspaceTools::upgradeData
    * @todo   Implement testupgradeData().
    */
    public function testupgradeData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeData', $methods ), 'exists method upgradeData' );
        $r = new ReflectionMethod('workspaceTools', 'upgradeData');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::updateThisRegistry
    * @todo   Implement testupdateThisRegistry().
    */
    public function testupdateThisRegistry()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateThisRegistry', $methods ), 'exists method updateThisRegistry' );
        $r = new ReflectionMethod('workspaceTools', 'updateThisRegistry');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'data');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::getMetadata
    * @todo   Implement testgetMetadata().
    */
    public function testgetMetadata()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getMetadata', $methods ), 'exists method getMetadata' );
        $r = new ReflectionMethod('workspaceTools', 'getMetadata');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::printSysInfo
    * @todo   Implement testprintSysInfo().
    */
    public function testprintSysInfo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('printSysInfo', $methods ), 'exists method printSysInfo' );
        $r = new ReflectionMethod('workspaceTools', 'printSysInfo');
        $params = $r->getParameters();
    }

    /**
    * @covers workspaceTools::printInfo
    * @todo   Implement testprintInfo().
    */
    public function testprintInfo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('printInfo', $methods ), 'exists method printInfo' );
        $r = new ReflectionMethod('workspaceTools', 'printInfo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers workspaceTools::printMetadata
    * @todo   Implement testprintMetadata().
    */
    public function testprintMetadata()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('printMetadata', $methods ), 'exists method printMetadata' );
        $r = new ReflectionMethod('workspaceTools', 'printMetadata');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'printSysInfo');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '1');
    }

    /**
    * @covers workspaceTools::exportDatabase
    * @todo   Implement testexportDatabase().
    */
    public function testexportDatabase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('exportDatabase', $methods ), 'exists method exportDatabase' );
        $r = new ReflectionMethod('workspaceTools', 'exportDatabase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'path');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::createBackup
    * @todo   Implement testcreateBackup().
    */
    public function testcreateBackup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createBackup', $methods ), 'exists method createBackup' );
        $r = new ReflectionMethod('workspaceTools', 'createBackup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'compress');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers workspaceTools::backup
    * @todo   Implement testbackup().
    */
    public function testbackup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('backup', $methods ), 'exists method backup' );
        $r = new ReflectionMethod('workspaceTools', 'backup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'backupFile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'compress');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers workspaceTools::restoreLegacy
    * @todo   Implement testrestoreLegacy().
    */
    public function testrestoreLegacy()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('restoreLegacy', $methods ), 'exists method restoreLegacy' );
        $r = new ReflectionMethod('workspaceTools', 'restoreLegacy');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'directory');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::getBackupInfo
    * @todo   Implement testgetBackupInfo().
    */
    public function testgetBackupInfo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getBackupInfo', $methods ), 'exists method getBackupInfo' );
        $r = new ReflectionMethod('workspaceTools', 'getBackupInfo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::dirPerms
    * @todo   Implement testdirPerms().
    */
    public function testdirPerms()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dirPerms', $methods ), 'exists method dirPerms' );
        $r = new ReflectionMethod('workspaceTools', 'dirPerms');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'owner');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'group');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'perms');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers workspaceTools::restore
    * @todo   Implement testrestore().
    */
    public function testrestore()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('restore', $methods ), 'exists method restore' );
        $r = new ReflectionMethod('workspaceTools', 'restore');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'srcWorkspace');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'dstWorkspace');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'overwrite');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '1');
    }
}

