<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.report.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
*/

class classReportTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Report
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Report();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Report');        $this->assertTrue( count($methods) == 14);
    }

    /**
    * @covers Report::generatedReport1
    * @todo   Implement testgeneratedReport1().
    */
    public function testgeneratedReport1()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport1', $methods ), 'exists method generatedReport1' );
        $r = new ReflectionMethod('Report', 'generatedReport1');
        $params = $r->getParameters();
    } 

    /**
    * @covers Report::generatedReport1_filter
    * @todo   Implement testgeneratedReport1_filter().
    */
    public function testgeneratedReport1_filter()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport1_filter', $methods ), 'exists method generatedReport1_filter' );
        $r = new ReflectionMethod('Report', 'generatedReport1_filter');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'from');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'to');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'startedby');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Report::descriptionReport1
    * @todo   Implement testdescriptionReport1().
    */
    public function testdescriptionReport1()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('descriptionReport1', $methods ), 'exists method descriptionReport1' );
        $r = new ReflectionMethod('Report', 'descriptionReport1');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'PRO_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Report::generatedReport2
    * @todo   Implement testgeneratedReport2().
    */
    public function testgeneratedReport2()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport2', $methods ), 'exists method generatedReport2' );
        $r = new ReflectionMethod('Report', 'generatedReport2');
        $params = $r->getParameters();
    } 

    /**
    * @covers Report::reports_Description_filter
    * @todo   Implement testreports_Description_filter().
    */
    public function testreports_Description_filter()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reports_Description_filter', $methods ), 'exists method reports_Description_filter' );
        $r = new ReflectionMethod('Report', 'reports_Description_filter');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'from');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'to');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'startedby');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'PRO_UID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    } 

    /**
    * @covers Report::generatedReport2_filter
    * @todo   Implement testgeneratedReport2_filter().
    */
    public function testgeneratedReport2_filter()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport2_filter', $methods ), 'exists method generatedReport2_filter' );
        $r = new ReflectionMethod('Report', 'generatedReport2_filter');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'from');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'to');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'startedby');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Report::generatedReport3
    * @todo   Implement testgeneratedReport3().
    */
    public function testgeneratedReport3()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport3', $methods ), 'exists method generatedReport3' );
        $r = new ReflectionMethod('Report', 'generatedReport3');
        $params = $r->getParameters();
    } 

    /**
    * @covers Report::generatedReport3_filter
    * @todo   Implement testgeneratedReport3_filter().
    */
    public function testgeneratedReport3_filter()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport3_filter', $methods ), 'exists method generatedReport3_filter' );
        $r = new ReflectionMethod('Report', 'generatedReport3_filter');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'process');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'task');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Report::generatedReport4
    * @todo   Implement testgeneratedReport4().
    */
    public function testgeneratedReport4()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport4', $methods ), 'exists method generatedReport4' );
        $r = new ReflectionMethod('Report', 'generatedReport4');
        $params = $r->getParameters();
    } 

    /**
    * @covers Report::generatedReport4_filter
    * @todo   Implement testgeneratedReport4_filter().
    */
    public function testgeneratedReport4_filter()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport4_filter', $methods ), 'exists method generatedReport4_filter' );
        $r = new ReflectionMethod('Report', 'generatedReport4_filter');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'process');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'task');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Report::generatedReport5
    * @todo   Implement testgeneratedReport5().
    */
    public function testgeneratedReport5()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport5', $methods ), 'exists method generatedReport5' );
        $r = new ReflectionMethod('Report', 'generatedReport5');
        $params = $r->getParameters();
    } 

    /**
    * @covers Report::generatedReport5_filter
    * @todo   Implement testgeneratedReport5_filter().
    */
    public function testgeneratedReport5_filter()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('generatedReport5_filter', $methods ), 'exists method generatedReport5_filter' );
        $r = new ReflectionMethod('Report', 'generatedReport5_filter');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'process');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'task');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Report::getAvailableReports
    * @todo   Implement testgetAvailableReports().
    */
    public function testgetAvailableReports()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableReports', $methods ), 'exists method getAvailableReports' );
        $r = new ReflectionMethod('Report', 'getAvailableReports');
        $params = $r->getParameters();
    } 

    /**
    * @covers Report::reportsPatch
    * @todo   Implement testreportsPatch().
    */
    public function testreportsPatch()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reportsPatch', $methods ), 'exists method reportsPatch' );
        $r = new ReflectionMethod('Report', 'reportsPatch');
        $params = $r->getParameters();
    } 

  } 
