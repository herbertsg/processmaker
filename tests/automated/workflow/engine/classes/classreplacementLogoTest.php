<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.replacementLogo.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
*/

class classreplacementLogoTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var replacementLogo
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new replacementLogo();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('replacementLogo');        $this->assertTrue( count($methods) == 3);
    }

    /**
    * @covers replacementLogo::replacementLogo
    * @todo   Implement testreplacementLogo().
    */
    public function testreplacementLogo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('replacementLogo', $methods ), 'exists method replacementLogo' );
        $r = new ReflectionMethod('replacementLogo', 'replacementLogo');
        $params = $r->getParameters();
    } 

    /**
    * @covers replacementLogo::upLoadFile
    * @todo   Implement testupLoadFile().
    */
    public function testupLoadFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upLoadFile', $methods ), 'exists method upLoadFile' );
        $r = new ReflectionMethod('replacementLogo', 'upLoadFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dirUpload');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'namefile');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'typefile');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'errorfile');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'tpnfile');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'formf');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
    } 

    /**
    * @covers replacementLogo::getNameLogo
    * @todo   Implement testgetNameLogo().
    */
    public function testgetNameLogo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getNameLogo', $methods ), 'exists method getNameLogo' );
        $r = new ReflectionMethod('replacementLogo', 'getNameLogo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'usrUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

  } 
