<?php

require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.dynaformEditor.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:31.
 */
class classdynaformEditorTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var dynaformEditor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new dynaformEditor('getvalue');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
     */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('dynaformEditor');
        $this->assertTrue(count($methods) == 10);
    }

    /**
     * @covers dynaformEditor::dynaformEditor
     * @todo   Implement testdynaformEditor().
     */
    public function testdynaformEditor()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('dynaformEditor', $methods), 'exists method dynaformEditor');
        $r = new ReflectionMethod('dynaformEditor', 'dynaformEditor');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'get');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers dynaformEditor::_createDefaultXmlForm
     * @todo   Implement test_createDefaultXmlForm().
     */
    public function test_createDefaultXmlForm()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_createDefaultXmlForm', $methods), 'exists method _createDefaultXmlForm');
        $r = new ReflectionMethod('dynaformEditor', '_createDefaultXmlForm');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'fileName');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers dynaformEditor::_render
     * @todo   Implement test_render().
     */
    public function test_render()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_render', $methods), 'exists method _render');
        $r = new ReflectionMethod('dynaformEditor', '_render');
        $params = $r->getParameters();
    }

    /**
     * @covers dynaformEditor::_getFilename
     * @todo   Implement test_getFilename().
     */
    public function test_getFilename()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_getFilename', $methods), 'exists method _getFilename');
        $r = new ReflectionMethod('dynaformEditor', '_getFilename');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'file');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers dynaformEditor::_setUseTemporalCopy
     * @todo   Implement test_setUseTemporalCopy().
     */
    public function test_setUseTemporalCopy()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_setUseTemporalCopy', $methods), 'exists method _setUseTemporalCopy');
        $r = new ReflectionMethod('dynaformEditor', '_setUseTemporalCopy');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'onOff');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers dynaformEditor::_setTmpData
     * @todo   Implement test_setTmpData().
     */
    public function test_setTmpData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_setTmpData', $methods), 'exists method _setTmpData');
        $r = new ReflectionMethod('dynaformEditor', '_setTmpData');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'data');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers dynaformEditor::_getTmpData
     * @todo   Implement test_getTmpData().
     */
    public function test_getTmpData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_getTmpData', $methods), 'exists method _getTmpData');
        $r = new ReflectionMethod('dynaformEditor', '_getTmpData');
        $params = $r->getParameters();
    }

    /**
     * @covers dynaformEditor::_copyFile
     * @todo   Implement test_copyFile().
     */
    public function test_copyFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('_copyFile', $methods), 'exists method _copyFile');
        $r = new ReflectionMethod('dynaformEditor', '_copyFile');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'from');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'to');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }
}

