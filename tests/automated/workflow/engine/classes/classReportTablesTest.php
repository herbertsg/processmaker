<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.reportTables.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:30.
*/

class classReportTablesTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ReportTables
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new ReportTables();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('ReportTables');
        $this->assertTrue( count($methods) == 11);
    }

    /**
    * @covers ReportTables::deleteAllReportVars
    * @todo   Implement testdeleteAllReportVars().
    */
    public function testdeleteAllReportVars()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteAllReportVars', $methods ), 'exists method deleteAllReportVars' );
        $r = new ReflectionMethod('ReportTables', 'deleteAllReportVars');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sRepTabUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers ReportTables::dropTable
    * @todo   Implement testdropTable().
    */
    public function testdropTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dropTable', $methods ), 'exists method dropTable' );
        $r = new ReflectionMethod('ReportTables', 'dropTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTableName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sConnection');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'report');
    }

    /**
    * @covers ReportTables::createTable
    * @todo   Implement testcreateTable().
    */
    public function testcreateTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTable', $methods ), 'exists method createTable' );
        $r = new ReflectionMethod('ReportTables', 'createTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTableName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sConnection');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'report');
        $this->assertTrue( $params[2]->getName() == 'sType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'NORMAL');
        $this->assertTrue( $params[3]->getName() == 'aFields');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == array());
        $this->assertTrue( $params[4]->getName() == 'bDefaultFields');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '1');
    }

    /**
    * @covers ReportTables::populateTable
    * @todo   Implement testpopulateTable().
    */
    public function testpopulateTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('populateTable', $methods ), 'exists method populateTable' );
        $r = new ReflectionMethod('ReportTables', 'populateTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTableName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sConnection');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'report');
        $this->assertTrue( $params[2]->getName() == 'sType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'NORMAL');
        $this->assertTrue( $params[3]->getName() == 'aFields');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == array());
        $this->assertTrue( $params[4]->getName() == 'sProcessUid');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
        $this->assertTrue( $params[5]->getName() == 'sGrid');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == true);
        $this->assertTrue( $params[5]->getDefaultValue() == '');
    }

    /**
    * @covers ReportTables::getTableVars
    * @todo   Implement testgetTableVars().
    */
    public function testgetTableVars()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTableVars', $methods ), 'exists method getTableVars' );
        $r = new ReflectionMethod('ReportTables', 'getTableVars');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sRepTabUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'bWhitType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers ReportTables::deleteReportTable
    * @todo   Implement testdeleteReportTable().
    */
    public function testdeleteReportTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteReportTable', $methods ), 'exists method deleteReportTable' );
        $r = new ReflectionMethod('ReportTables', 'deleteReportTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sRepTabUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers ReportTables::getSplitDate
    * @todo   Implement testgetSplitDate().
    */
    public function testgetSplitDate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSplitDate', $methods ), 'exists method getSplitDate' );
        $r = new ReflectionMethod('ReportTables', 'getSplitDate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'date');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'mask');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers ReportTables::getFormatDate
    * @todo   Implement testgetFormatDate().
    */
    public function testgetFormatDate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getFormatDate', $methods ), 'exists method getFormatDate' );
        $r = new ReflectionMethod('ReportTables', 'getFormatDate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sDate');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sMask');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers ReportTables::updateTables
    * @todo   Implement testupdateTables().
    */
    public function testupdateTables()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateTables', $methods ), 'exists method updateTables' );
        $r = new ReflectionMethod('ReportTables', 'updateTables');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sApplicationUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iApplicationNumber');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'aFields');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers ReportTables::tableExist
    * @todo   Implement testtableExist().
    */
    public function testtableExist()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('tableExist', $methods ), 'exists method tableExist' );
        $r = new ReflectionMethod('ReportTables', 'tableExist');
        $params = $r->getParameters();
    }

    /**
    * @covers ReportTables::chooseDB
    * @todo   Implement testchooseDB().
    */
    public function testchooseDB()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('chooseDB', $methods ), 'exists method chooseDB' );
        $r = new ReflectionMethod('ReportTables', 'chooseDB');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'TabConnectionk');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }
}

