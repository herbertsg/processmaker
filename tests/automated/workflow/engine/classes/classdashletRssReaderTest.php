<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.dashletRssReader.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:30.
*/

class classdashletRssReaderTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var dashletRssReader
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new dashletRssReader();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('dashletRssReader');        $this->assertTrue( count($methods) == 4);
    }

    /**
    * @covers dashletRssReader::getAdditionalFields
    * @todo   Implement testgetAdditionalFields().
    */
    public function testgetAdditionalFields()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAdditionalFields', $methods ), 'exists method getAdditionalFields' );
        $r = new ReflectionMethod('dashletRssReader', 'getAdditionalFields');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'className');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers dashletRssReader::getXTemplate
    * @todo   Implement testgetXTemplate().
    */
    public function testgetXTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getXTemplate', $methods ), 'exists method getXTemplate' );
        $r = new ReflectionMethod('dashletRssReader', 'getXTemplate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'className');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers dashletRssReader::setup
    * @todo   Implement testsetup().
    */
    public function testsetup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setup', $methods ), 'exists method setup' );
        $r = new ReflectionMethod('dashletRssReader', 'setup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'config');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers dashletRssReader::render
    * @todo   Implement testrender().
    */
    public function testrender()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('render', $methods ), 'exists method render' );
        $r = new ReflectionMethod('dashletRssReader', 'render');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'width');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '300');
    } 

  } 
