<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.tasks.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:25.
*/

class classTasksTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Tasks
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Tasks();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Tasks');        $this->assertTrue( count($methods) == 26);
    }

    /**
    * @covers Tasks::getGroupsOfTask
    * @todo   Implement testgetGroupsOfTask().
    */
    public function testgetGroupsOfTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getGroupsOfTask', $methods ), 'exists method getGroupsOfTask' );
        $r = new ReflectionMethod('Tasks', 'getGroupsOfTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getAllTasks
    * @todo   Implement testgetAllTasks().
    */
    public function testgetAllTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllTasks', $methods ), 'exists method getAllTasks' );
        $r = new ReflectionMethod('Tasks', 'getAllTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::createTaskRows
    * @todo   Implement testcreateTaskRows().
    */
    public function testcreateTaskRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTaskRows', $methods ), 'exists method createTaskRows' );
        $r = new ReflectionMethod('Tasks', 'createTaskRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::updateTaskRows
    * @todo   Implement testupdateTaskRows().
    */
    public function testupdateTaskRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateTaskRows', $methods ), 'exists method updateTaskRows' );
        $r = new ReflectionMethod('Tasks', 'updateTaskRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getAllRoutes
    * @todo   Implement testgetAllRoutes().
    */
    public function testgetAllRoutes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllRoutes', $methods ), 'exists method getAllRoutes' );
        $r = new ReflectionMethod('Tasks', 'getAllRoutes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::createRouteRows
    * @todo   Implement testcreateRouteRows().
    */
    public function testcreateRouteRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createRouteRows', $methods ), 'exists method createRouteRows' );
        $r = new ReflectionMethod('Tasks', 'createRouteRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aRoutes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::updateRouteRows
    * @todo   Implement testupdateRouteRows().
    */
    public function testupdateRouteRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateRouteRows', $methods ), 'exists method updateRouteRows' );
        $r = new ReflectionMethod('Tasks', 'updateRouteRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aRoutes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getUsersOfTask
    * @todo   Implement testgetUsersOfTask().
    */
    public function testgetUsersOfTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUsersOfTask', $methods ), 'exists method getUsersOfTask' );
        $r = new ReflectionMethod('Tasks', 'getUsersOfTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Tasks::deleteTask
    * @todo   Implement testdeleteTask().
    */
    public function testdeleteTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteTask', $methods ), 'exists method deleteTask' );
        $r = new ReflectionMethod('Tasks', 'deleteTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Tasks::deleteAllRoutesOfTask
    * @todo   Implement testdeleteAllRoutesOfTask().
    */
    public function testdeleteAllRoutesOfTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteAllRoutesOfTask', $methods ), 'exists method deleteAllRoutesOfTask' );
        $r = new ReflectionMethod('Tasks', 'deleteAllRoutesOfTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'bAll');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    } 

    /**
    * @covers Tasks::getAllGateways
    * @todo   Implement testgetAllGateways().
    */
    public function testgetAllGateways()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllGateways', $methods ), 'exists method getAllGateways' );
        $r = new ReflectionMethod('Tasks', 'getAllGateways');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::createGatewayRows
    * @todo   Implement testcreateGatewayRows().
    */
    public function testcreateGatewayRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createGatewayRows', $methods ), 'exists method createGatewayRows' );
        $r = new ReflectionMethod('Tasks', 'createGatewayRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aGateway');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::deleteAllGatewayOfTask
    * @todo   Implement testdeleteAllGatewayOfTask().
    */
    public function testdeleteAllGatewayOfTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteAllGatewayOfTask', $methods ), 'exists method deleteAllGatewayOfTask' );
        $r = new ReflectionMethod('Tasks', 'deleteAllGatewayOfTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'bAll');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    } 

    /**
    * @covers Tasks::assignUser
    * @todo   Implement testassignUser().
    */
    public function testassignUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignUser', $methods ), 'exists method assignUser' );
        $r = new ReflectionMethod('Tasks', 'assignUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sUserUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    } 

    /**
    * @covers Tasks::assignGroup
    * @todo   Implement testassignGroup().
    */
    public function testassignGroup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignGroup', $methods ), 'exists method assignGroup' );
        $r = new ReflectionMethod('Tasks', 'assignGroup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sGroupUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    } 

    /**
    * @covers Tasks::ofToAssignUserOfAllTasks
    * @todo   Implement testofToAssignUserOfAllTasks().
    */
    public function testofToAssignUserOfAllTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ofToAssignUserOfAllTasks', $methods ), 'exists method ofToAssignUserOfAllTasks' );
        $r = new ReflectionMethod('Tasks', 'ofToAssignUserOfAllTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUserUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Tasks::ofToAssignUser
    * @todo   Implement testofToAssignUser().
    */
    public function testofToAssignUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ofToAssignUser', $methods ), 'exists method ofToAssignUser' );
        $r = new ReflectionMethod('Tasks', 'ofToAssignUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sUserUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    } 

    /**
    * @covers Tasks::ofToAssignGroup
    * @todo   Implement testofToAssignGroup().
    */
    public function testofToAssignGroup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ofToAssignGroup', $methods ), 'exists method ofToAssignGroup' );
        $r = new ReflectionMethod('Tasks', 'ofToAssignGroup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sGroupUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    } 

    /**
    * @covers Tasks::getStepsOfTask
    * @todo   Implement testgetStepsOfTask().
    */
    public function testgetStepsOfTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStepsOfTask', $methods ), 'exists method getStepsOfTask' );
        $r = new ReflectionMethod('Tasks', 'getStepsOfTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::existsBuildingElements
    * @todo   Implement testexistsBuildingElements().
    */
    public function testexistsBuildingElements()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('existsBuildingElements', $methods ), 'exists method existsBuildingElements' );
        $r = new ReflectionMethod('Tasks', 'existsBuildingElements');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getStartingTaskForUser
    * @todo   Implement testgetStartingTaskForUser().
    */
    public function testgetStartingTaskForUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStartingTaskForUser', $methods ), 'exists method getStartingTaskForUser' );
        $r = new ReflectionMethod('Tasks', 'getStartingTaskForUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sUsrUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Tasks::assignUsertoTask
    * @todo   Implement testassignUsertoTask().
    */
    public function testassignUsertoTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignUsertoTask', $methods ), 'exists method assignUsertoTask' );
        $r = new ReflectionMethod('Tasks', 'assignUsertoTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::verifyUsertoTask
    * @todo   Implement testverifyUsertoTask().
    */
    public function testverifyUsertoTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyUsertoTask', $methods ), 'exists method verifyUsertoTask' );
        $r = new ReflectionMethod('Tasks', 'verifyUsertoTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUsrUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getTasksThatUserIsAssigned
    * @todo   Implement testgetTasksThatUserIsAssigned().
    */
    public function testgetTasksThatUserIsAssigned()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTasksThatUserIsAssigned', $methods ), 'exists method getTasksThatUserIsAssigned' );
        $r = new ReflectionMethod('Tasks', 'getTasksThatUserIsAssigned');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUserUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getRoute
    * @todo   Implement testgetRoute().
    */
    public function testgetRoute()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRoute', $methods ), 'exists method getRoute' );
        $r = new ReflectionMethod('Tasks', 'getRoute');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTaskUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Tasks::getRouteByType
    * @todo   Implement testgetRouteByType().
    */
    public function testgetRouteByType()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRouteByType', $methods ), 'exists method getRouteByType' );
        $r = new ReflectionMethod('Tasks', 'getRouteByType');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sRouteNextTaskUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sRouteType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

  } 
