<?php

require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.plugin.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
 */
class classPMPluginTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PMPlugin
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PMPlugin('sNamespace', 'sFilename');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
     */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('PMPlugin');
        $this->assertTrue(count($methods) == 24, count($methods));
    }

    /**
     * @covers PMPlugin::PMPlugin
     * @todo   Implement testPMPlugin().
     */
    public function testPMPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('PMPlugin', $methods), 'exists method PMPlugin');
        $r = new ReflectionMethod('PMPlugin', 'PMPlugin');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sNamespace');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sFilename');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == true);
        $this->assertTrue($params[1]->getDefaultValue() == '');
    }

    /**
     * @covers PMPlugin::registerMenu
     * @todo   Implement testregisterMenu().
     */
    public function testregisterMenu()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerMenu', $methods), 'exists method registerMenu');
        $r = new ReflectionMethod('PMPlugin', 'registerMenu');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'menuId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'menuFilename');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerDashlets
     * @todo   Implement testregisterDashlets().
     */
    public function testregisterDashlets()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerDashlets', $methods), 'exists method registerDashlets');
        $r = new ReflectionMethod('PMPlugin', 'registerDashlets');
        $params = $r->getParameters();
    }

    /**
     * @covers PMPlugin::registerReport
     * @todo   Implement testregisterReport().
     */
    public function testregisterReport()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerReport', $methods), 'exists method registerReport');
        $r = new ReflectionMethod('PMPlugin', 'registerReport');
        $params = $r->getParameters();
    }

    /**
     * @covers PMPlugin::registerPmFunction
     * @todo   Implement testregisterPmFunction().
     */
    public function testregisterPmFunction()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerPmFunction', $methods), 'exists method registerPmFunction');
        $r = new ReflectionMethod('PMPlugin', 'registerPmFunction');
        $params = $r->getParameters();
    }

    /**
     * @covers PMPlugin::setCompanyLogo
     * @todo   Implement testsetCompanyLogo().
     */
    public function testsetCompanyLogo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('setCompanyLogo', $methods), 'exists method setCompanyLogo');
        $r = new ReflectionMethod('PMPlugin', 'setCompanyLogo');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'filename');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::redirectLogin
     * @todo   Implement testredirectLogin().
     */
    public function testredirectLogin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('redirectLogin', $methods), 'exists method redirectLogin');
        $r = new ReflectionMethod('PMPlugin', 'redirectLogin');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'role');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'pathMethod');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerFolder
     * @todo   Implement testregisterFolder().
     */
    public function testregisterFolder()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerFolder', $methods), 'exists method registerFolder');
        $r = new ReflectionMethod('PMPlugin', 'registerFolder');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sFolderId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sFolderName');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerStep
     * @todo   Implement testregisterStep().
     */
    public function testregisterStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerStep', $methods), 'exists method registerStep');
        $r = new ReflectionMethod('PMPlugin', 'registerStep');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sStepId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sStepName');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
        $this->assertTrue($params[2]->getName() == 'sStepTitle');
        $this->assertTrue($params[2]->isArray() == false);
        $this->assertTrue($params[2]->isOptional() == false);
        $this->assertTrue($params[3]->getName() == 'sSetupStepPage');
        $this->assertTrue($params[3]->isArray() == false);
        $this->assertTrue($params[3]->isOptional() == true);
        $this->assertTrue($params[3]->getDefaultValue() == '');
    }

    /**
     * @covers PMPlugin::registerTrigger
     * @todo   Implement testregisterTrigger().
     */
    public function testregisterTrigger()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerTrigger', $methods), 'exists method registerTrigger');
        $r = new ReflectionMethod('PMPlugin', 'registerTrigger');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sTriggerId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sTriggerName');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::delete
     * @todo   Implement testdelete().
     */
    public function testdelete()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('delete', $methods), 'exists method delete');
        $r = new ReflectionMethod('PMPlugin', 'delete');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sFilename');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'bAbsolutePath');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == true);
        $this->assertTrue($params[1]->getDefaultValue() == '');
    }

    /**
     * @covers PMPlugin::copy
     * @todo   Implement testcopy().
     */
    public function testcopy()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('copy', $methods), 'exists method copy');
        $r = new ReflectionMethod('PMPlugin', 'copy');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sSouce');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sTarget');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
        $this->assertTrue($params[2]->getName() == 'bSourceAbsolutePath');
        $this->assertTrue($params[2]->isArray() == false);
        $this->assertTrue($params[2]->isOptional() == true);
        $this->assertTrue($params[2]->getDefaultValue() == '');
        $this->assertTrue($params[3]->getName() == 'bTargetAbsolutePath');
        $this->assertTrue($params[3]->isArray() == false);
        $this->assertTrue($params[3]->isOptional() == true);
        $this->assertTrue($params[3]->getDefaultValue() == '');
    }

    /**
     * @covers PMPlugin::rename
     * @todo   Implement testrename().
     */
    public function testrename()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('rename', $methods), 'exists method rename');
        $r = new ReflectionMethod('PMPlugin', 'rename');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sSouce');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sTarget');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
        $this->assertTrue($params[2]->getName() == 'bSourceAbsolutePath');
        $this->assertTrue($params[2]->isArray() == false);
        $this->assertTrue($params[2]->isOptional() == true);
        $this->assertTrue($params[2]->getDefaultValue() == '');
        $this->assertTrue($params[3]->getName() == 'bTargetAbsolutePath');
        $this->assertTrue($params[3]->isArray() == false);
        $this->assertTrue($params[3]->isOptional() == true);
        $this->assertTrue($params[3]->getDefaultValue() == '');
    }

    /**
     * @covers PMPlugin::registerBreakPageTemplate
     * @todo   Implement testregisterBreakPageTemplate().
     */
    public function testregisterBreakPageTemplate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerBreakPageTemplate', $methods), 'exists method registerBreakPageTemplate');
        $r = new ReflectionMethod('PMPlugin', 'registerBreakPageTemplate');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'pageId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'templateFilename');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerCss
     * @todo   Implement testregisterCss().
     */
    public function testregisterCss()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerCss', $methods), 'exists method registerCss');
        $r = new ReflectionMethod('PMPlugin', 'registerCss');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sCssFile');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerToolbarFile
     * @todo   Implement testregisterToolbarFile().
     */
    public function testregisterToolbarFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerToolbarFile', $methods), 'exists method registerToolbarFile');
        $r = new ReflectionMethod('PMPlugin', 'registerToolbarFile');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sToolbarId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'filename');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerCaseSchedulerPlugin
     * @todo   Implement testregisterCaseSchedulerPlugin().
     */
    public function testregisterCaseSchedulerPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerCaseSchedulerPlugin', $methods),
                          'exists method registerCaseSchedulerPlugin');
        $r = new ReflectionMethod('PMPlugin', 'registerCaseSchedulerPlugin');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sActionId');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sActionForm');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
        $this->assertTrue($params[2]->getName() == 'sActionSave');
        $this->assertTrue($params[2]->isArray() == false);
        $this->assertTrue($params[2]->isOptional() == false);
        $this->assertTrue($params[3]->getName() == 'sActionExecute');
        $this->assertTrue($params[3]->isArray() == false);
        $this->assertTrue($params[3]->isOptional() == false);
        $this->assertTrue($params[4]->getName() == 'sActionGetFields');
        $this->assertTrue($params[4]->isArray() == false);
        $this->assertTrue($params[4]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerTaskExtendedProperty
     * @todo   Implement testregisterTaskExtendedProperty().
     */
    public function testregisterTaskExtendedProperty()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerTaskExtendedProperty', $methods),
                          'exists method registerTaskExtendedProperty');
        $r = new ReflectionMethod('PMPlugin', 'registerTaskExtendedProperty');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sPage');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'sName');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
        $this->assertTrue($params[2]->getName() == 'sIcon');
        $this->assertTrue($params[2]->isArray() == false);
        $this->assertTrue($params[2]->isOptional() == true);
        $this->assertTrue($params[2]->getDefaultValue() == '');
    }

    /**
     * @covers PMPlugin::registerJavascript
     * @todo   Implement testregisterJavascript().
     */
    public function testregisterJavascript()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerJavascript', $methods), 'exists method registerJavascript');
        $r = new ReflectionMethod('PMPlugin', 'registerJavascript');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sCoreJsFile');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'pluginJsFile');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::unregisterJavascript
     * @todo   Implement testunregisterJavascript().
     */
    public function testunregisterJavascript()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('unregisterJavascript', $methods), 'exists method unregisterJavascript');
        $r = new ReflectionMethod('PMPlugin', 'unregisterJavascript');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sCoreJsFile');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'pluginJsFile');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == false);
    }

    /**
     * @covers PMPlugin::registerDashboard
     * @todo   Implement testregisterDashboard().
     */
    public function testregisterDashboard()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('registerDashboard', $methods), 'exists method registerDashboard');
        $r = new ReflectionMethod('PMPlugin', 'registerDashboard');
        $params = $r->getParameters();
    }

    /**
     * @covers PMPlugin::getExternalStepAction
     * @todo   Implement testgetExternalStepAction().
     */
    public function testgetExternalStepAction()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('getExternalStepAction', $methods), 'exists method getExternalStepAction');
        $r = new ReflectionMethod('PMPlugin', 'getExternalStepAction');
        $params = $r->getParameters();
    }
}

