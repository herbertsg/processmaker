<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.processes.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:24.
*/

class classProcessesTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Processes
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Processes();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Processes');        $this->assertTrue( count($methods) == 141);
    }

    /**
    * @covers Processes::changeStatus
    * @todo   Implement testchangeStatus().
    */
    public function testchangeStatus()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('changeStatus', $methods ), 'exists method changeStatus' );
        $r = new ReflectionMethod('Processes', 'changeStatus');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::changeDebugMode
    * @todo   Implement testchangeDebugMode().
    */
    public function testchangeDebugMode()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('changeDebugMode', $methods ), 'exists method changeDebugMode' );
        $r = new ReflectionMethod('Processes', 'changeDebugMode');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::changeProcessParent
    * @todo   Implement testchangeProcessParent().
    */
    public function testchangeProcessParent()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('changeProcessParent', $methods ), 'exists method changeProcessParent' );
        $r = new ReflectionMethod('Processes', 'changeProcessParent');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sParentUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::processExists
    * @todo   Implement testprocessExists().
    */
    public function testprocessExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('processExists', $methods ), 'exists method processExists' );
        $r = new ReflectionMethod('Processes', 'processExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::getUnusedProcessGUID
    * @todo   Implement testgetUnusedProcessGUID().
    */
    public function testgetUnusedProcessGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedProcessGUID', $methods ), 'exists method getUnusedProcessGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedProcessGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::taskExists
    * @todo   Implement testtaskExists().
    */
    public function testtaskExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('taskExists', $methods ), 'exists method taskExists' );
        $r = new ReflectionMethod('Processes', 'taskExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTasUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::getUnusedTaskGUID
    * @todo   Implement testgetUnusedTaskGUID().
    */
    public function testgetUnusedTaskGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedTaskGUID', $methods ), 'exists method getUnusedTaskGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedTaskGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::dynaformExists
    * @todo   Implement testdynaformExists().
    */
    public function testdynaformExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dynaformExists', $methods ), 'exists method dynaformExists' );
        $r = new ReflectionMethod('Processes', 'dynaformExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sDynUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::inputExists
    * @todo   Implement testinputExists().
    */
    public function testinputExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('inputExists', $methods ), 'exists method inputExists' );
        $r = new ReflectionMethod('Processes', 'inputExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::outputExists
    * @todo   Implement testoutputExists().
    */
    public function testoutputExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('outputExists', $methods ), 'exists method outputExists' );
        $r = new ReflectionMethod('Processes', 'outputExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::triggerExists
    * @todo   Implement testtriggerExists().
    */
    public function testtriggerExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('triggerExists', $methods ), 'exists method triggerExists' );
        $r = new ReflectionMethod('Processes', 'triggerExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::SubProcessExists
    * @todo   Implement testSubProcessExists().
    */
    public function testSubProcessExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('SubProcessExists', $methods ), 'exists method SubProcessExists' );
        $r = new ReflectionMethod('Processes', 'SubProcessExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::caseTrackerObjectExists
    * @todo   Implement testcaseTrackerObjectExists().
    */
    public function testcaseTrackerObjectExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseTrackerObjectExists', $methods ), 'exists method caseTrackerObjectExists' );
        $r = new ReflectionMethod('Processes', 'caseTrackerObjectExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::caseTrackerExists
    * @todo   Implement testcaseTrackerExists().
    */
    public function testcaseTrackerExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseTrackerExists', $methods ), 'exists method caseTrackerExists' );
        $r = new ReflectionMethod('Processes', 'caseTrackerExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::dbConnectionExists
    * @todo   Implement testdbConnectionExists().
    */
    public function testdbConnectionExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dbConnectionExists', $methods ), 'exists method dbConnectionExists' );
        $r = new ReflectionMethod('Processes', 'dbConnectionExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::objectPermissionExists
    * @todo   Implement testobjectPermissionExists().
    */
    public function testobjectPermissionExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('objectPermissionExists', $methods ), 'exists method objectPermissionExists' );
        $r = new ReflectionMethod('Processes', 'objectPermissionExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::routeExists
    * @todo   Implement testrouteExists().
    */
    public function testrouteExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('routeExists', $methods ), 'exists method routeExists' );
        $r = new ReflectionMethod('Processes', 'routeExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::stageExists
    * @todo   Implement teststageExists().
    */
    public function teststageExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('stageExists', $methods ), 'exists method stageExists' );
        $r = new ReflectionMethod('Processes', 'stageExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::slExists
    * @todo   Implement testslExists().
    */
    public function testslExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('slExists', $methods ), 'exists method slExists' );
        $r = new ReflectionMethod('Processes', 'slExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::reportTableExists
    * @todo   Implement testreportTableExists().
    */
    public function testreportTableExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reportTableExists', $methods ), 'exists method reportTableExists' );
        $r = new ReflectionMethod('Processes', 'reportTableExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::reportVarExists
    * @todo   Implement testreportVarExists().
    */
    public function testreportVarExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reportVarExists', $methods ), 'exists method reportVarExists' );
        $r = new ReflectionMethod('Processes', 'reportVarExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::fieldsConditionsExists
    * @todo   Implement testfieldsConditionsExists().
    */
    public function testfieldsConditionsExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('fieldsConditionsExists', $methods ), 'exists method fieldsConditionsExists' );
        $r = new ReflectionMethod('Processes', 'fieldsConditionsExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::eventExists
    * @todo   Implement testeventExists().
    */
    public function testeventExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('eventExists', $methods ), 'exists method eventExists' );
        $r = new ReflectionMethod('Processes', 'eventExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::caseSchedulerExists
    * @todo   Implement testcaseSchedulerExists().
    */
    public function testcaseSchedulerExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseSchedulerExists', $methods ), 'exists method caseSchedulerExists' );
        $r = new ReflectionMethod('Processes', 'caseSchedulerExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::getUnusedInputGUID
    * @todo   Implement testgetUnusedInputGUID().
    */
    public function testgetUnusedInputGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedInputGUID', $methods ), 'exists method getUnusedInputGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedInputGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedOutputGUID
    * @todo   Implement testgetUnusedOutputGUID().
    */
    public function testgetUnusedOutputGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedOutputGUID', $methods ), 'exists method getUnusedOutputGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedOutputGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedTriggerGUID
    * @todo   Implement testgetUnusedTriggerGUID().
    */
    public function testgetUnusedTriggerGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedTriggerGUID', $methods ), 'exists method getUnusedTriggerGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedTriggerGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedSubProcessGUID
    * @todo   Implement testgetUnusedSubProcessGUID().
    */
    public function testgetUnusedSubProcessGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedSubProcessGUID', $methods ), 'exists method getUnusedSubProcessGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedSubProcessGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedCaseTrackerObjectGUID
    * @todo   Implement testgetUnusedCaseTrackerObjectGUID().
    */
    public function testgetUnusedCaseTrackerObjectGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedCaseTrackerObjectGUID', $methods ), 'exists method getUnusedCaseTrackerObjectGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedCaseTrackerObjectGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedDBSourceGUID
    * @todo   Implement testgetUnusedDBSourceGUID().
    */
    public function testgetUnusedDBSourceGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedDBSourceGUID', $methods ), 'exists method getUnusedDBSourceGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedDBSourceGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedObjectPermissionGUID
    * @todo   Implement testgetUnusedObjectPermissionGUID().
    */
    public function testgetUnusedObjectPermissionGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedObjectPermissionGUID', $methods ), 'exists method getUnusedObjectPermissionGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedObjectPermissionGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedRouteGUID
    * @todo   Implement testgetUnusedRouteGUID().
    */
    public function testgetUnusedRouteGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedRouteGUID', $methods ), 'exists method getUnusedRouteGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedRouteGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedStageGUID
    * @todo   Implement testgetUnusedStageGUID().
    */
    public function testgetUnusedStageGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedStageGUID', $methods ), 'exists method getUnusedStageGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedStageGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedSLGUID
    * @todo   Implement testgetUnusedSLGUID().
    */
    public function testgetUnusedSLGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedSLGUID', $methods ), 'exists method getUnusedSLGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedSLGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedRTGUID
    * @todo   Implement testgetUnusedRTGUID().
    */
    public function testgetUnusedRTGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedRTGUID', $methods ), 'exists method getUnusedRTGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedRTGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedRTVGUID
    * @todo   Implement testgetUnusedRTVGUID().
    */
    public function testgetUnusedRTVGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedRTVGUID', $methods ), 'exists method getUnusedRTVGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedRTVGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::stepExists
    * @todo   Implement teststepExists().
    */
    public function teststepExists()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('stepExists', $methods ), 'exists method stepExists' );
        $r = new ReflectionMethod('Processes', 'stepExists');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::getUnusedStepGUID
    * @todo   Implement testgetUnusedStepGUID().
    */
    public function testgetUnusedStepGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedStepGUID', $methods ), 'exists method getUnusedStepGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedStepGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedDynaformGUID
    * @todo   Implement testgetUnusedDynaformGUID().
    */
    public function testgetUnusedDynaformGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedDynaformGUID', $methods ), 'exists method getUnusedDynaformGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedDynaformGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedFieldConditionGUID
    * @todo   Implement testgetUnusedFieldConditionGUID().
    */
    public function testgetUnusedFieldConditionGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedFieldConditionGUID', $methods ), 'exists method getUnusedFieldConditionGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedFieldConditionGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedEventGUID
    * @todo   Implement testgetUnusedEventGUID().
    */
    public function testgetUnusedEventGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedEventGUID', $methods ), 'exists method getUnusedEventGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedEventGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::getUnusedCaseSchedulerGUID
    * @todo   Implement testgetUnusedCaseSchedulerGUID().
    */
    public function testgetUnusedCaseSchedulerGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUnusedCaseSchedulerGUID', $methods ), 'exists method getUnusedCaseSchedulerGUID' );
        $r = new ReflectionMethod('Processes', 'getUnusedCaseSchedulerGUID');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::setProcessGUID
    * @todo   Implement testsetProcessGUID().
    */
    public function testsetProcessGUID()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setProcessGUID', $methods ), 'exists method setProcessGUID' );
        $r = new ReflectionMethod('Processes', 'setProcessGUID');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sNewProUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::setProcessParent
    * @todo   Implement testsetProcessParent().
    */
    public function testsetProcessParent()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setProcessParent', $methods ), 'exists method setProcessParent' );
        $r = new ReflectionMethod('Processes', 'setProcessParent');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sParentUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllTaskGuid
    * @todo   Implement testrenewAllTaskGuid().
    */
    public function testrenewAllTaskGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllTaskGuid', $methods ), 'exists method renewAllTaskGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllTaskGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllDynaformGuid
    * @todo   Implement testrenewAllDynaformGuid().
    */
    public function testrenewAllDynaformGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllDynaformGuid', $methods ), 'exists method renewAllDynaformGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllDynaformGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getProcessRow
    * @todo   Implement testgetProcessRow().
    */
    public function testgetProcessRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getProcessRow', $methods ), 'exists method getProcessRow' );
        $r = new ReflectionMethod('Processes', 'getProcessRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'getAllLang');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::createProcessRow
    * @todo   Implement testcreateProcessRow().
    */
    public function testcreateProcessRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcessRow', $methods ), 'exists method createProcessRow' );
        $r = new ReflectionMethod('Processes', 'createProcessRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'row');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::updateProcessRow
    * @todo   Implement testupdateProcessRow().
    */
    public function testupdateProcessRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateProcessRow', $methods ), 'exists method updateProcessRow' );
        $r = new ReflectionMethod('Processes', 'updateProcessRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'row');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getSubProcessRow
    * @todo   Implement testgetSubProcessRow().
    */
    public function testgetSubProcessRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSubProcessRow', $methods ), 'exists method getSubProcessRow' );
        $r = new ReflectionMethod('Processes', 'getSubProcessRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getCaseTrackerRow
    * @todo   Implement testgetCaseTrackerRow().
    */
    public function testgetCaseTrackerRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCaseTrackerRow', $methods ), 'exists method getCaseTrackerRow' );
        $r = new ReflectionMethod('Processes', 'getCaseTrackerRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getCaseTrackerObjectRow
    * @todo   Implement testgetCaseTrackerObjectRow().
    */
    public function testgetCaseTrackerObjectRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCaseTrackerObjectRow', $methods ), 'exists method getCaseTrackerObjectRow' );
        $r = new ReflectionMethod('Processes', 'getCaseTrackerObjectRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getStageRow
    * @todo   Implement testgetStageRow().
    */
    public function testgetStageRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStageRow', $methods ), 'exists method getStageRow' );
        $r = new ReflectionMethod('Processes', 'getStageRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getFieldCondition
    * @todo   Implement testgetFieldCondition().
    */
    public function testgetFieldCondition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getFieldCondition', $methods ), 'exists method getFieldCondition' );
        $r = new ReflectionMethod('Processes', 'getFieldCondition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getEventRow
    * @todo   Implement testgetEventRow().
    */
    public function testgetEventRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getEventRow', $methods ), 'exists method getEventRow' );
        $r = new ReflectionMethod('Processes', 'getEventRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getCaseSchedulerRow
    * @todo   Implement testgetCaseSchedulerRow().
    */
    public function testgetCaseSchedulerRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCaseSchedulerRow', $methods ), 'exists method getCaseSchedulerRow' );
        $r = new ReflectionMethod('Processes', 'getCaseSchedulerRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getProcessCategoryRow
    * @todo   Implement testgetProcessCategoryRow().
    */
    public function testgetProcessCategoryRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getProcessCategoryRow', $methods ), 'exists method getProcessCategoryRow' );
        $r = new ReflectionMethod('Processes', 'getProcessCategoryRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getAllLanes
    * @todo   Implement testgetAllLanes().
    */
    public function testgetAllLanes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllLanes', $methods ), 'exists method getAllLanes' );
        $r = new ReflectionMethod('Processes', 'getAllLanes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getTaskRows
    * @todo   Implement testgetTaskRows().
    */
    public function testgetTaskRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTaskRows', $methods ), 'exists method getTaskRows' );
        $r = new ReflectionMethod('Processes', 'getTaskRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createTaskRows
    * @todo   Implement testcreateTaskRows().
    */
    public function testcreateTaskRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTaskRows', $methods ), 'exists method createTaskRows' );
        $r = new ReflectionMethod('Processes', 'createTaskRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTasks');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::updateTaskRows
    * @todo   Implement testupdateTaskRows().
    */
    public function testupdateTaskRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateTaskRows', $methods ), 'exists method updateTaskRows' );
        $r = new ReflectionMethod('Processes', 'updateTaskRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTasks');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getRouteRows
    * @todo   Implement testgetRouteRows().
    */
    public function testgetRouteRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRouteRows', $methods ), 'exists method getRouteRows' );
        $r = new ReflectionMethod('Processes', 'getRouteRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createRouteRows
    * @todo   Implement testcreateRouteRows().
    */
    public function testcreateRouteRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createRouteRows', $methods ), 'exists method createRouteRows' );
        $r = new ReflectionMethod('Processes', 'createRouteRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aRoutes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::updateRouteRows
    * @todo   Implement testupdateRouteRows().
    */
    public function testupdateRouteRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateRouteRows', $methods ), 'exists method updateRouteRows' );
        $r = new ReflectionMethod('Processes', 'updateRouteRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aRoutes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getLaneRows
    * @todo   Implement testgetLaneRows().
    */
    public function testgetLaneRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getLaneRows', $methods ), 'exists method getLaneRows' );
        $r = new ReflectionMethod('Processes', 'getLaneRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getGatewayRows
    * @todo   Implement testgetGatewayRows().
    */
    public function testgetGatewayRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getGatewayRows', $methods ), 'exists method getGatewayRows' );
        $r = new ReflectionMethod('Processes', 'getGatewayRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createGatewayRows
    * @todo   Implement testcreateGatewayRows().
    */
    public function testcreateGatewayRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createGatewayRows', $methods ), 'exists method createGatewayRows' );
        $r = new ReflectionMethod('Processes', 'createGatewayRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aGateways');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createLaneRows
    * @todo   Implement testcreateLaneRows().
    */
    public function testcreateLaneRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createLaneRows', $methods ), 'exists method createLaneRows' );
        $r = new ReflectionMethod('Processes', 'createLaneRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aLanes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createSubProcessRows
    * @todo   Implement testcreateSubProcessRows().
    */
    public function testcreateSubProcessRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcessRows', $methods ), 'exists method createSubProcessRows' );
        $r = new ReflectionMethod('Processes', 'createSubProcessRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'SubProcess');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createCaseTrackerRows
    * @todo   Implement testcreateCaseTrackerRows().
    */
    public function testcreateCaseTrackerRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createCaseTrackerRows', $methods ), 'exists method createCaseTrackerRows' );
        $r = new ReflectionMethod('Processes', 'createCaseTrackerRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'CaseTracker');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createCaseTrackerObjectRows
    * @todo   Implement testcreateCaseTrackerObjectRows().
    */
    public function testcreateCaseTrackerObjectRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createCaseTrackerObjectRows', $methods ), 'exists method createCaseTrackerObjectRows' );
        $r = new ReflectionMethod('Processes', 'createCaseTrackerObjectRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'CaseTrackerObject');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createObjectPermissionsRows
    * @todo   Implement testcreateObjectPermissionsRows().
    */
    public function testcreateObjectPermissionsRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createObjectPermissionsRows', $methods ), 'exists method createObjectPermissionsRows' );
        $r = new ReflectionMethod('Processes', 'createObjectPermissionsRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'ObjectPermissions');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createStageRows
    * @todo   Implement testcreateStageRows().
    */
    public function testcreateStageRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createStageRows', $methods ), 'exists method createStageRows' );
        $r = new ReflectionMethod('Processes', 'createStageRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'Stage');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createFieldCondition
    * @todo   Implement testcreateFieldCondition().
    */
    public function testcreateFieldCondition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createFieldCondition', $methods ), 'exists method createFieldCondition' );
        $r = new ReflectionMethod('Processes', 'createFieldCondition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aFieldCondition');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aDynaform');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::createEventRows
    * @todo   Implement testcreateEventRows().
    */
    public function testcreateEventRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createEventRows', $methods ), 'exists method createEventRows' );
        $r = new ReflectionMethod('Processes', 'createEventRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'Event');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createCaseSchedulerRows
    * @todo   Implement testcreateCaseSchedulerRows().
    */
    public function testcreateCaseSchedulerRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createCaseSchedulerRows', $methods ), 'exists method createCaseSchedulerRows' );
        $r = new ReflectionMethod('Processes', 'createCaseSchedulerRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'CaseScheduler');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createProcessCategoryRow
    * @todo   Implement testcreateProcessCategoryRow().
    */
    public function testcreateProcessCategoryRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcessCategoryRow', $methods ), 'exists method createProcessCategoryRow' );
        $r = new ReflectionMethod('Processes', 'createProcessCategoryRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'row');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getInputRows
    * @todo   Implement testgetInputRows().
    */
    public function testgetInputRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getInputRows', $methods ), 'exists method getInputRows' );
        $r = new ReflectionMethod('Processes', 'getInputRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createInputRows
    * @todo   Implement testcreateInputRows().
    */
    public function testcreateInputRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createInputRows', $methods ), 'exists method createInputRows' );
        $r = new ReflectionMethod('Processes', 'createInputRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aInput');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllInputGuid
    * @todo   Implement testrenewAllInputGuid().
    */
    public function testrenewAllInputGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllInputGuid', $methods ), 'exists method renewAllInputGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllInputGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getOutputRows
    * @todo   Implement testgetOutputRows().
    */
    public function testgetOutputRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getOutputRows', $methods ), 'exists method getOutputRows' );
        $r = new ReflectionMethod('Processes', 'getOutputRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createOutputRows
    * @todo   Implement testcreateOutputRows().
    */
    public function testcreateOutputRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createOutputRows', $methods ), 'exists method createOutputRows' );
        $r = new ReflectionMethod('Processes', 'createOutputRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aOutput');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllOutputGuid
    * @todo   Implement testrenewAllOutputGuid().
    */
    public function testrenewAllOutputGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllOutputGuid', $methods ), 'exists method renewAllOutputGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllOutputGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllTriggerGuid
    * @todo   Implement testrenewAllTriggerGuid().
    */
    public function testrenewAllTriggerGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllTriggerGuid', $methods ), 'exists method renewAllTriggerGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllTriggerGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllSubProcessGuid
    * @todo   Implement testrenewAllSubProcessGuid().
    */
    public function testrenewAllSubProcessGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllSubProcessGuid', $methods ), 'exists method renewAllSubProcessGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllSubProcessGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllCaseTrackerObjectGuid
    * @todo   Implement testrenewAllCaseTrackerObjectGuid().
    */
    public function testrenewAllCaseTrackerObjectGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllCaseTrackerObjectGuid', $methods ), 'exists method renewAllCaseTrackerObjectGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllCaseTrackerObjectGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllDBSourceGuid
    * @todo   Implement testrenewAllDBSourceGuid().
    */
    public function testrenewAllDBSourceGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllDBSourceGuid', $methods ), 'exists method renewAllDBSourceGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllDBSourceGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllObjectPermissionGuid
    * @todo   Implement testrenewAllObjectPermissionGuid().
    */
    public function testrenewAllObjectPermissionGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllObjectPermissionGuid', $methods ), 'exists method renewAllObjectPermissionGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllObjectPermissionGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllRouteGuid
    * @todo   Implement testrenewAllRouteGuid().
    */
    public function testrenewAllRouteGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllRouteGuid', $methods ), 'exists method renewAllRouteGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllRouteGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllStageGuid
    * @todo   Implement testrenewAllStageGuid().
    */
    public function testrenewAllStageGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllStageGuid', $methods ), 'exists method renewAllStageGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllStageGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllSwimlanesElementsGuid
    * @todo   Implement testrenewAllSwimlanesElementsGuid().
    */
    public function testrenewAllSwimlanesElementsGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllSwimlanesElementsGuid', $methods ), 'exists method renewAllSwimlanesElementsGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllSwimlanesElementsGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllReportTableGuid
    * @todo   Implement testrenewAllReportTableGuid().
    */
    public function testrenewAllReportTableGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllReportTableGuid', $methods ), 'exists method renewAllReportTableGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllReportTableGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllReportVarGuid
    * @todo   Implement testrenewAllReportVarGuid().
    */
    public function testrenewAllReportVarGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllReportVarGuid', $methods ), 'exists method renewAllReportVarGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllReportVarGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllFieldCondition
    * @todo   Implement testrenewAllFieldCondition().
    */
    public function testrenewAllFieldCondition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllFieldCondition', $methods ), 'exists method renewAllFieldCondition' );
        $r = new ReflectionMethod('Processes', 'renewAllFieldCondition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllEvent
    * @todo   Implement testrenewAllEvent().
    */
    public function testrenewAllEvent()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllEvent', $methods ), 'exists method renewAllEvent' );
        $r = new ReflectionMethod('Processes', 'renewAllEvent');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllCaseScheduler
    * @todo   Implement testrenewAllCaseScheduler().
    */
    public function testrenewAllCaseScheduler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllCaseScheduler', $methods ), 'exists method renewAllCaseScheduler' );
        $r = new ReflectionMethod('Processes', 'renewAllCaseScheduler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAll
    * @todo   Implement testrenewAll().
    */
    public function testrenewAll()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAll', $methods ), 'exists method renewAll' );
        $r = new ReflectionMethod('Processes', 'renewAll');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getStepRows
    * @todo   Implement testgetStepRows().
    */
    public function testgetStepRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStepRows', $methods ), 'exists method getStepRows' );
        $r = new ReflectionMethod('Processes', 'getStepRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createStepRows
    * @todo   Implement testcreateStepRows().
    */
    public function testcreateStepRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createStepRows', $methods ), 'exists method createStepRows' );
        $r = new ReflectionMethod('Processes', 'createStepRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aStep');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createStepSupervisorRows
    * @todo   Implement testcreateStepSupervisorRows().
    */
    public function testcreateStepSupervisorRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createStepSupervisorRows', $methods ), 'exists method createStepSupervisorRows' );
        $r = new ReflectionMethod('Processes', 'createStepSupervisorRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aStepSupervisor');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renewAllStepGuid
    * @todo   Implement testrenewAllStepGuid().
    */
    public function testrenewAllStepGuid()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renewAllStepGuid', $methods ), 'exists method renewAllStepGuid' );
        $r = new ReflectionMethod('Processes', 'renewAllStepGuid');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getDynaformRows
    * @todo   Implement testgetDynaformRows().
    */
    public function testgetDynaformRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDynaformRows', $methods ), 'exists method getDynaformRows' );
        $r = new ReflectionMethod('Processes', 'getDynaformRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getObjectPermissionRows
    * @todo   Implement testgetObjectPermissionRows().
    */
    public function testgetObjectPermissionRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getObjectPermissionRows', $methods ), 'exists method getObjectPermissionRows' );
        $r = new ReflectionMethod('Processes', 'getObjectPermissionRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createDynaformRows
    * @todo   Implement testcreateDynaformRows().
    */
    public function testcreateDynaformRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createDynaformRows', $methods ), 'exists method createDynaformRows' );
        $r = new ReflectionMethod('Processes', 'createDynaformRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aDynaform');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createStepTriggerRows
    * @todo   Implement testcreateStepTriggerRows().
    */
    public function testcreateStepTriggerRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createStepTriggerRows', $methods ), 'exists method createStepTriggerRows' );
        $r = new ReflectionMethod('Processes', 'createStepTriggerRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aStepTrigger');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getStepTriggerRows
    * @todo   Implement testgetStepTriggerRows().
    */
    public function testgetStepTriggerRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStepTriggerRows', $methods ), 'exists method getStepTriggerRows' );
        $r = new ReflectionMethod('Processes', 'getStepTriggerRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getTriggerRows
    * @todo   Implement testgetTriggerRows().
    */
    public function testgetTriggerRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTriggerRows', $methods ), 'exists method getTriggerRows' );
        $r = new ReflectionMethod('Processes', 'getTriggerRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createTriggerRows
    * @todo   Implement testcreateTriggerRows().
    */
    public function testcreateTriggerRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTriggerRows', $methods ), 'exists method createTriggerRows' );
        $r = new ReflectionMethod('Processes', 'createTriggerRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTrigger');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getGroupwfRows
    * @todo   Implement testgetGroupwfRows().
    */
    public function testgetGroupwfRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getGroupwfRows', $methods ), 'exists method getGroupwfRows' );
        $r = new ReflectionMethod('Processes', 'getGroupwfRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aGroups');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getDBConnectionsRows
    * @todo   Implement testgetDBConnectionsRows().
    */
    public function testgetDBConnectionsRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDBConnectionsRows', $methods ), 'exists method getDBConnectionsRows' );
        $r = new ReflectionMethod('Processes', 'getDBConnectionsRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getStepSupervisorRows
    * @todo   Implement testgetStepSupervisorRows().
    */
    public function testgetStepSupervisorRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStepSupervisorRows', $methods ), 'exists method getStepSupervisorRows' );
        $r = new ReflectionMethod('Processes', 'getStepSupervisorRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getReportTablesRows
    * @todo   Implement testgetReportTablesRows().
    */
    public function testgetReportTablesRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getReportTablesRows', $methods ), 'exists method getReportTablesRows' );
        $r = new ReflectionMethod('Processes', 'getReportTablesRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getReportTablesVarsRows
    * @todo   Implement testgetReportTablesVarsRows().
    */
    public function testgetReportTablesVarsRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getReportTablesVarsRows', $methods ), 'exists method getReportTablesVarsRows' );
        $r = new ReflectionMethod('Processes', 'getReportTablesVarsRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getTaskUserRows
    * @todo   Implement testgetTaskUserRows().
    */
    public function testgetTaskUserRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTaskUserRows', $methods ), 'exists method getTaskUserRows' );
        $r = new ReflectionMethod('Processes', 'getTaskUserRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createTaskUserRows
    * @todo   Implement testcreateTaskUserRows().
    */
    public function testcreateTaskUserRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTaskUserRows', $methods ), 'exists method createTaskUserRows' );
        $r = new ReflectionMethod('Processes', 'createTaskUserRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aTaskUser');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createGroupRow
    * @todo   Implement testcreateGroupRow().
    */
    public function testcreateGroupRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createGroupRow', $methods ), 'exists method createGroupRow' );
        $r = new ReflectionMethod('Processes', 'createGroupRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aGroupwf');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createDBConnectionsRows
    * @todo   Implement testcreateDBConnectionsRows().
    */
    public function testcreateDBConnectionsRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createDBConnectionsRows', $methods ), 'exists method createDBConnectionsRows' );
        $r = new ReflectionMethod('Processes', 'createDBConnectionsRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aConnections');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createReportTables
    * @todo   Implement testcreateReportTables().
    */
    public function testcreateReportTables()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createReportTables', $methods ), 'exists method createReportTables' );
        $r = new ReflectionMethod('Processes', 'createReportTables');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aReportTables');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aReportTablesVars');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::updateReportTables
    * @todo   Implement testupdateReportTables().
    */
    public function testupdateReportTables()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateReportTables', $methods ), 'exists method updateReportTables' );
        $r = new ReflectionMethod('Processes', 'updateReportTables');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aReportTables');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aReportTablesVars');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::createReportTablesVars
    * @todo   Implement testcreateReportTablesVars().
    */
    public function testcreateReportTablesVars()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createReportTablesVars', $methods ), 'exists method createReportTablesVars' );
        $r = new ReflectionMethod('Processes', 'createReportTablesVars');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aReportTablesVars');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::cleanupReportTablesReferences
    * @todo   Implement testcleanupReportTablesReferences().
    */
    public function testcleanupReportTablesReferences()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('cleanupReportTablesReferences', $methods ), 'exists method cleanupReportTablesReferences' );
        $r = new ReflectionMethod('Processes', 'cleanupReportTablesReferences');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aReportTables');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::serializeProcess
    * @todo   Implement testserializeProcess().
    */
    public function testserializeProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('serializeProcess', $methods ), 'exists method serializeProcess' );
        $r = new ReflectionMethod('Processes', 'serializeProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Processes::saveSerializedProcess
    * @todo   Implement testsaveSerializedProcess().
    */
    public function testsaveSerializedProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveSerializedProcess', $methods ), 'exists method saveSerializedProcess' );
        $r = new ReflectionMethod('Processes', 'saveSerializedProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getProcessData
    * @todo   Implement testgetProcessData().
    */
    public function testgetProcessData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getProcessData', $methods ), 'exists method getProcessData' );
        $r = new ReflectionMethod('Processes', 'getProcessData');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pmFilename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::checkExistingGroups
    * @todo   Implement testcheckExistingGroups().
    */
    public function testcheckExistingGroups()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('checkExistingGroups', $methods ), 'exists method checkExistingGroups' );
        $r = new ReflectionMethod('Processes', 'checkExistingGroups');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sGroupList');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::renameExistingGroups
    * @todo   Implement testrenameExistingGroups().
    */
    public function testrenameExistingGroups()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('renameExistingGroups', $methods ), 'exists method renameExistingGroups' );
        $r = new ReflectionMethod('Processes', 'renameExistingGroups');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sGroupList');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::mergeExistingGroups
    * @todo   Implement testmergeExistingGroups().
    */
    public function testmergeExistingGroups()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('mergeExistingGroups', $methods ), 'exists method mergeExistingGroups' );
        $r = new ReflectionMethod('Processes', 'mergeExistingGroups');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sGroupList');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::mergeExistingUsers
    * @todo   Implement testmergeExistingUsers().
    */
    public function testmergeExistingUsers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('mergeExistingUsers', $methods ), 'exists method mergeExistingUsers' );
        $r = new ReflectionMethod('Processes', 'mergeExistingUsers');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sBaseGroupList');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sGroupList');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTaskUserList');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Processes::disablePreviousProcesses
    * @todo   Implement testdisablePreviousProcesses().
    */
    public function testdisablePreviousProcesses()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('disablePreviousProcesses', $methods ), 'exists method disablePreviousProcesses' );
        $r = new ReflectionMethod('Processes', 'disablePreviousProcesses');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createFiles
    * @todo   Implement testcreateFiles().
    */
    public function testcreateFiles()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createFiles', $methods ), 'exists method createFiles' );
        $r = new ReflectionMethod('Processes', 'createFiles');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pmFilename');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::removeProcessRows
    * @todo   Implement testremoveProcessRows().
    */
    public function testremoveProcessRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeProcessRows', $methods ), 'exists method removeProcessRows' );
        $r = new ReflectionMethod('Processes', 'removeProcessRows');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::createProcessFromData
    * @todo   Implement testcreateProcessFromData().
    */
    public function testcreateProcessFromData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcessFromData', $methods ), 'exists method createProcessFromData' );
        $r = new ReflectionMethod('Processes', 'createProcessFromData');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pmFilename');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::updateProcessFromData
    * @todo   Implement testupdateProcessFromData().
    */
    public function testupdateProcessFromData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateProcessFromData', $methods ), 'exists method updateProcessFromData' );
        $r = new ReflectionMethod('Processes', 'updateProcessFromData');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pmFilename');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::getStartingTaskForUser
    * @todo   Implement testgetStartingTaskForUser().
    */
    public function testgetStartingTaskForUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStartingTaskForUser', $methods ), 'exists method getStartingTaskForUser' );
        $r = new ReflectionMethod('Processes', 'getStartingTaskForUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sUsrUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::ws_open
    * @todo   Implement testws_open().
    */
    public function testws_open()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ws_open', $methods ), 'exists method ws_open' );
        $r = new ReflectionMethod('Processes', 'ws_open');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'user');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pass');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Processes::ws_open_public
    * @todo   Implement testws_open_public().
    */
    public function testws_open_public()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ws_open_public', $methods ), 'exists method ws_open_public' );
        $r = new ReflectionMethod('Processes', 'ws_open_public');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::ws_processList
    * @todo   Implement testws_processList().
    */
    public function testws_processList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ws_processList', $methods ), 'exists method ws_processList' );
        $r = new ReflectionMethod('Processes', 'ws_processList');
        $params = $r->getParameters();
    } 

    /**
    * @covers Processes::downloadFile
    * @todo   Implement testdownloadFile().
    */
    public function testdownloadFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('downloadFile', $methods ), 'exists method downloadFile' );
        $r = new ReflectionMethod('Processes', 'downloadFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'file');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'local_path');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'newfilename');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Processes::ws_processGetData
    * @todo   Implement testws_processGetData().
    */
    public function testws_processGetData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ws_processGetData', $methods ), 'exists method ws_processGetData' );
        $r = new ReflectionMethod('Processes', 'ws_processGetData');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'proId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::parseItemArray
    * @todo   Implement testparseItemArray().
    */
    public function testparseItemArray()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('parseItemArray', $methods ), 'exists method parseItemArray' );
        $r = new ReflectionMethod('Processes', 'parseItemArray');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Processes::getProcessFiles
    * @todo   Implement testgetProcessFiles().
    */
    public function testgetProcessFiles()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getProcessFiles', $methods ), 'exists method getProcessFiles' );
        $r = new ReflectionMethod('Processes', 'getProcessFiles');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'proUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'type');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

  } 
