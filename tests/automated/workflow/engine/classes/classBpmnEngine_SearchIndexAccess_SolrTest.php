<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.solr.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:31.
*/

class classBpmnEngine_SearchIndexAccess_SolrTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var BpmnEngine_SearchIndexAccess_Solr
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new BpmnEngine_SearchIndexAccess_Solr();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('BpmnEngine_SearchIndexAccess_Solr');        $this->assertTrue( count($methods) == 12);
    }

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', '__construct');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'solrIsEnabled');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'solrHost');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::isEnabled
    * @todo   Implement testisEnabled().
    */
    public function testisEnabled()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('isEnabled', $methods ), 'exists method isEnabled' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'isEnabled');
        $params = $r->getParameters();
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::getNumberDocuments
    * @todo   Implement testgetNumberDocuments().
    */
    public function testgetNumberDocuments()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getNumberDocuments', $methods ), 'exists method getNumberDocuments' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'getNumberDocuments');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::executeQuery
    * @todo   Implement testexecuteQuery().
    */
    public function testexecuteQuery()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('executeQuery', $methods ), 'exists method executeQuery' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'executeQuery');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'solrRequestData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::updateDocument
    * @todo   Implement testupdateDocument().
    */
    public function testupdateDocument()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateDocument', $methods ), 'exists method updateDocument' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'updateDocument');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'solrUpdateDocument');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::commitChanges
    * @todo   Implement testcommitChanges().
    */
    public function testcommitChanges()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('commitChanges', $methods ), 'exists method commitChanges' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'commitChanges');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::rollbackChanges
    * @todo   Implement testrollbackChanges().
    */
    public function testrollbackChanges()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('rollbackChanges', $methods ), 'exists method rollbackChanges' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'rollbackChanges');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::optimizeChanges
    * @todo   Implement testoptimizeChanges().
    */
    public function testoptimizeChanges()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('optimizeChanges', $methods ), 'exists method optimizeChanges' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'optimizeChanges');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::getListIndexedStoredFields
    * @todo   Implement testgetListIndexedStoredFields().
    */
    public function testgetListIndexedStoredFields()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getListIndexedStoredFields', $methods ), 'exists method getListIndexedStoredFields' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'getListIndexedStoredFields');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::deleteAllDocuments
    * @todo   Implement testdeleteAllDocuments().
    */
    public function testdeleteAllDocuments()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteAllDocuments', $methods ), 'exists method deleteAllDocuments' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'deleteAllDocuments');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::deleteDocument
    * @todo   Implement testdeleteDocument().
    */
    public function testdeleteDocument()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteDocument', $methods ), 'exists method deleteDocument' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'deleteDocument');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'workspace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idQuery');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers BpmnEngine_SearchIndexAccess_Solr::getFacetsList
    * @todo   Implement testgetFacetsList().
    */
    public function testgetFacetsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getFacetsList', $methods ), 'exists method getFacetsList' );
        $r = new ReflectionMethod('BpmnEngine_SearchIndexAccess_Solr', 'getFacetsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'facetRequest');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

  } 
