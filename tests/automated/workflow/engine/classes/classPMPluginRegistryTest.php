<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.pluginRegistry.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
*/

class classPMPluginRegistryTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var PMPluginRegistry
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new PMPluginRegistry();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('PMPluginRegistry');
        $this->assertTrue( count($methods) == 60, count($methods));
    }

    /**
    * @covers PMPluginRegistry::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('PMPluginRegistry', '__construct');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getSingleton
    * @todo   Implement testgetSingleton().
    */
    public function testgetSingleton()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSingleton', $methods ), 'exists method getSingleton' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getSingleton');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::serializeInstance
    * @todo   Implement testserializeInstance().
    */
    public function testserializeInstance()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('serializeInstance', $methods ), 'exists method serializeInstance' );
        $r = new ReflectionMethod('PMPluginRegistry', 'serializeInstance');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::unSerializeInstance
    * @todo   Implement testunSerializeInstance().
    */
    public function testunSerializeInstance()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('unSerializeInstance', $methods ), 'exists method unSerializeInstance' );
        $r = new ReflectionMethod('PMPluginRegistry', 'unSerializeInstance');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'serialized');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::save
    * @todo   Implement testsave().
    */
    public function testsave()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('save', $methods ), 'exists method save' );
        $r = new ReflectionMethod('PMPluginRegistry', 'save');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::registerPlugin
    * @todo   Implement testregisterPlugin().
    */
    public function testregisterPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerPlugin', $methods ), 'exists method registerPlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerPlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sFilename');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers PMPluginRegistry::getPluginDetails
    * @todo   Implement testgetPluginDetails().
    */
    public function testgetPluginDetails()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getPluginDetails', $methods ), 'exists method getPluginDetails' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getPluginDetails');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sFilename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::enablePlugin
    * @todo   Implement testenablePlugin().
    */
    public function testenablePlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('enablePlugin', $methods ), 'exists method enablePlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'enablePlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::disablePlugin
    * @todo   Implement testdisablePlugin().
    */
    public function testdisablePlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('disablePlugin', $methods ), 'exists method disablePlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'disablePlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'eventPlugin');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers PMPluginRegistry::getStatusPlugin
    * @todo   Implement testgetStatusPlugin().
    */
    public function testgetStatusPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStatusPlugin', $methods ), 'exists method getStatusPlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getStatusPlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::installPluginArchive
    * @todo   Implement testinstallPluginArchive().
    */
    public function testinstallPluginArchive()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('installPluginArchive', $methods ), 'exists method installPluginArchive' );
        $r = new ReflectionMethod('PMPluginRegistry', 'installPluginArchive');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'filename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pluginName');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::uninstallPlugin
    * @todo   Implement testuninstallPlugin().
    */
    public function testuninstallPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('uninstallPlugin', $methods ), 'exists method uninstallPlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'uninstallPlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::uninstallPluginWorkspaces
    * @todo   Implement testuninstallPluginWorkspaces().
    */
    public function testuninstallPluginWorkspaces()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('uninstallPluginWorkspaces', $methods ), 'exists method uninstallPluginWorkspaces' );
        $r = new ReflectionMethod('PMPluginRegistry', 'uninstallPluginWorkspaces');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'arrayPlugin');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::installPlugin
    * @todo   Implement testinstallPlugin().
    */
    public function testinstallPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('installPlugin', $methods ), 'exists method installPlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'installPlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerMenu
    * @todo   Implement testregisterMenu().
    */
    public function testregisterMenu()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerMenu', $methods ), 'exists method registerMenu' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerMenu');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sMenuId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sFilename');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerDashlets
    * @todo   Implement testregisterDashlets().
    */
    public function testregisterDashlets()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerDashlets', $methods ), 'exists method registerDashlets' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerDashlets');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'namespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerCss
    * @todo   Implement testregisterCss().
    */
    public function testregisterCss()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerCss', $methods ), 'exists method registerCss' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerCss');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sCssFile');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getRegisteredCss
    * @todo   Implement testgetRegisteredCss().
    */
    public function testgetRegisteredCss()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRegisteredCss', $methods ), 'exists method getRegisteredCss' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getRegisteredCss');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::registerJavascript
    * @todo   Implement testregisterJavascript().
    */
    public function testregisterJavascript()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerJavascript', $methods ), 'exists method registerJavascript' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerJavascript');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sCoreJsFile');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'pluginJsFile');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getRegisteredJavascript
    * @todo   Implement testgetRegisteredJavascript().
    */
    public function testgetRegisteredJavascript()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRegisteredJavascript', $methods ), 'exists method getRegisteredJavascript' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getRegisteredJavascript');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getRegisteredJavascriptBy
    * @todo   Implement testgetRegisteredJavascriptBy().
    */
    public function testgetRegisteredJavascriptBy()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRegisteredJavascriptBy', $methods ), 'exists method getRegisteredJavascriptBy' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getRegisteredJavascriptBy');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCoreJsFile');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sNamespace');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers PMPluginRegistry::unregisterJavascripts
    * @todo   Implement testunregisterJavascripts().
    */
    public function testunregisterJavascripts()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('unregisterJavascripts', $methods ), 'exists method unregisterJavascripts' );
        $r = new ReflectionMethod('PMPluginRegistry', 'unregisterJavascripts');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sCoreJsFile');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers PMPluginRegistry::registerReport
    * @todo   Implement testregisterReport().
    */
    public function testregisterReport()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerReport', $methods ), 'exists method registerReport' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerReport');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerPmFunction
    * @todo   Implement testregisterPmFunction().
    */
    public function testregisterPmFunction()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerPmFunction', $methods ), 'exists method registerPmFunction' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerPmFunction');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerRedirectLogin
    * @todo   Implement testregisterRedirectLogin().
    */
    public function testregisterRedirectLogin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerRedirectLogin', $methods ), 'exists method registerRedirectLogin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerRedirectLogin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sRole');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sPathMethod');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerFolder
    * @todo   Implement testregisterFolder().
    */
    public function testregisterFolder()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerFolder', $methods ), 'exists method registerFolder' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerFolder');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sFolderId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sFolderName');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerStep
    * @todo   Implement testregisterStep().
    */
    public function testregisterStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerStep', $methods ), 'exists method registerStep' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sStepId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sStepName');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sStepTitle');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'setupStepPage');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
    }

    /**
    * @covers PMPluginRegistry::isRegisteredFolder
    * @todo   Implement testisRegisteredFolder().
    */
    public function testisRegisteredFolder()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('isRegisteredFolder', $methods ), 'exists method isRegisteredFolder' );
        $r = new ReflectionMethod('PMPluginRegistry', 'isRegisteredFolder');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sFolderName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getMenus
    * @todo   Implement testgetMenus().
    */
    public function testgetMenus()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getMenus', $methods ), 'exists method getMenus' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getMenus');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'menuId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getDashlets
    * @todo   Implement testgetDashlets().
    */
    public function testgetDashlets()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDashlets', $methods ), 'exists method getDashlets' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getDashlets');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getReports
    * @todo   Implement testgetReports().
    */
    public function testgetReports()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getReports', $methods ), 'exists method getReports' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getReports');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getPmFunctions
    * @todo   Implement testgetPmFunctions().
    */
    public function testgetPmFunctions()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getPmFunctions', $methods ), 'exists method getPmFunctions' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getPmFunctions');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getSteps
    * @todo   Implement testgetSteps().
    */
    public function testgetSteps()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSteps', $methods ), 'exists method getSteps' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getSteps');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getRedirectLogins
    * @todo   Implement testgetRedirectLogins().
    */
    public function testgetRedirectLogins()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getRedirectLogins', $methods ), 'exists method getRedirectLogins' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getRedirectLogins');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::executeTriggers
    * @todo   Implement testexecuteTriggers().
    */
    public function testexecuteTriggers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('executeTriggers', $methods ), 'exists method executeTriggers' );
        $r = new ReflectionMethod('PMPluginRegistry', 'executeTriggers');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'triggerId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'oData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::existsTrigger
    * @todo   Implement testexistsTrigger().
    */
    public function testexistsTrigger()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('existsTrigger', $methods ), 'exists method existsTrigger' );
        $r = new ReflectionMethod('PMPluginRegistry', 'existsTrigger');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'triggerId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getTriggerInfo
    * @todo   Implement testgetTriggerInfo().
    */
    public function testgetTriggerInfo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTriggerInfo', $methods ), 'exists method getTriggerInfo' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getTriggerInfo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'triggerId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerTrigger
    * @todo   Implement testregisterTrigger().
    */
    public function testregisterTrigger()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerTrigger', $methods ), 'exists method registerTrigger' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerTrigger');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTriggerId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTriggerName');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getPlugin
    * @todo   Implement testgetPlugin().
    */
    public function testgetPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getPlugin', $methods ), 'exists method getPlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getPlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::setCompanyLogo
    * @todo   Implement testsetCompanyLogo().
    */
    public function testsetCompanyLogo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setCompanyLogo', $methods ), 'exists method setCompanyLogo' );
        $r = new ReflectionMethod('PMPluginRegistry', 'setCompanyLogo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'filename');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getCompanyLogo
    * @todo   Implement testgetCompanyLogo().
    */
    public function testgetCompanyLogo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCompanyLogo', $methods ), 'exists method getCompanyLogo' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getCompanyLogo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'default');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::setupPlugins
    * @todo   Implement testsetupPlugins().
    */
    public function testsetupPlugins()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setupPlugins', $methods ), 'exists method setupPlugins' );
        $r = new ReflectionMethod('PMPluginRegistry', 'setupPlugins');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::executeMethod
    * @todo   Implement testexecuteMethod().
    */
    public function testexecuteMethod()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('executeMethod', $methods ), 'exists method executeMethod' );
        $r = new ReflectionMethod('PMPluginRegistry', 'executeMethod');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'methodName');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'oData');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getFieldsForPageSetup
    * @todo   Implement testgetFieldsForPageSetup().
    */
    public function testgetFieldsForPageSetup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getFieldsForPageSetup', $methods ), 'exists method getFieldsForPageSetup' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getFieldsForPageSetup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::updateFieldsForPageSetup
    * @todo   Implement testupdateFieldsForPageSetup().
    */
    public function testupdateFieldsForPageSetup()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateFieldsForPageSetup', $methods ), 'exists method updateFieldsForPageSetup' );
        $r = new ReflectionMethod('PMPluginRegistry', 'updateFieldsForPageSetup');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'oData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::eevalidate
    * @todo   Implement testeevalidate().
    */
    public function testeevalidate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('eevalidate', $methods ), 'exists method eevalidate' );
        $r = new ReflectionMethod('PMPluginRegistry', 'eevalidate');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::registerToolbarFile
    * @todo   Implement testregisterToolbarFile().
    */
    public function testregisterToolbarFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerToolbarFile', $methods ), 'exists method registerToolbarFile' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerToolbarFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sToolbarId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sFilename');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getToolbarOptions
    * @todo   Implement testgetToolbarOptions().
    */
    public function testgetToolbarOptions()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getToolbarOptions', $methods ), 'exists method getToolbarOptions' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getToolbarOptions');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sToolbarId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerCaseSchedulerPlugin
    * @todo   Implement testregisterCaseSchedulerPlugin().
    */
    public function testregisterCaseSchedulerPlugin()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerCaseSchedulerPlugin', $methods ), 'exists method registerCaseSchedulerPlugin' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerCaseSchedulerPlugin');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sActionId');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sActionForm');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sActionSave');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'sActionExecute');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'sActionGetFields');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getCaseSchedulerPlugins
    * @todo   Implement testgetCaseSchedulerPlugins().
    */
    public function testgetCaseSchedulerPlugins()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCaseSchedulerPlugins', $methods ), 'exists method getCaseSchedulerPlugins' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getCaseSchedulerPlugins');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::registerTaskExtendedProperty
    * @todo   Implement testregisterTaskExtendedProperty().
    */
    public function testregisterTaskExtendedProperty()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerTaskExtendedProperty', $methods ), 'exists method registerTaskExtendedProperty' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerTaskExtendedProperty');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sPage');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sName');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sIcon');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::registerDashboardPage
    * @todo   Implement testregisterDashboardPage().
    */
    public function testregisterDashboardPage()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerDashboardPage', $methods ), 'exists method registerDashboardPage' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerDashboardPage');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNamespace');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sPage');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sName');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sIcon');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers PMPluginRegistry::getDashboardPages
    * @todo   Implement testgetDashboardPages().
    */
    public function testgetDashboardPages()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDashboardPages', $methods ), 'exists method getDashboardPages' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getDashboardPages');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getTaskExtendedProperties
    * @todo   Implement testgetTaskExtendedProperties().
    */
    public function testgetTaskExtendedProperties()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTaskExtendedProperties', $methods ), 'exists method getTaskExtendedProperties' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getTaskExtendedProperties');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::registerDashboard
    * @todo   Implement testregisterDashboard().
    */
    public function testregisterDashboard()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerDashboard', $methods ), 'exists method registerDashboard' );
        $r = new ReflectionMethod('PMPluginRegistry', 'registerDashboard');
        $params = $r->getParameters();
    }

    /**
    * @covers PMPluginRegistry::getAttributes
    * @todo   Implement testgetAttributes().
    */
    public function testgetAttributes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAttributes', $methods ), 'exists method getAttributes' );
        $r = new ReflectionMethod('PMPluginRegistry', 'getAttributes');
        $params = $r->getParameters();
    }

  }
