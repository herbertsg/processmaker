<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.xpdl.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:31.
*/

class classXpdlTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Xpdl
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Xpdl();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Xpdl');        $this->assertTrue( count($methods) == 185);
    }

    /**
    * @covers Xpdl::createProcessFromDataXpdl
    * @todo   Implement testcreateProcessFromDataXpdl().
    */
    public function testcreateProcessFromDataXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcessFromDataXpdl', $methods ), 'exists method createProcessFromDataXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createProcessFromDataXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::updateProcessFromDataXpdl
    * @todo   Implement testupdateProcessFromDataXpdl().
    */
    public function testupdateProcessFromDataXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateProcessFromDataXpdl', $methods ), 'exists method updateProcessFromDataXpdl' );
        $r = new ReflectionMethod('Xpdl', 'updateProcessFromDataXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createProcessFromDataPmxml
    * @todo   Implement testcreateProcessFromDataPmxml().
    */
    public function testcreateProcessFromDataPmxml()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcessFromDataPmxml', $methods ), 'exists method createProcessFromDataPmxml' );
        $r = new ReflectionMethod('Xpdl', 'createProcessFromDataPmxml');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createSubProcessFromDataXpdl
    * @todo   Implement testcreateSubProcessFromDataXpdl().
    */
    public function testcreateSubProcessFromDataXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcessFromDataXpdl', $methods ), 'exists method createSubProcessFromDataXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createSubProcessFromDataXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::verifyTasks
    * @todo   Implement testverifyTasks().
    */
    public function testverifyTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyTasks', $methods ), 'exists method verifyTasks' );
        $r = new ReflectionMethod('Xpdl', 'verifyTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'fieldsTasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createRouteRowsXpdl
    * @todo   Implement testcreateRouteRowsXpdl().
    */
    public function testcreateRouteRowsXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createRouteRowsXpdl', $methods ), 'exists method createRouteRowsXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createRouteRowsXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'routes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'fieldsTasks');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createSubProcessRowsXpdl
    * @todo   Implement testcreateSubProcessRowsXpdl().
    */
    public function testcreateSubProcessRowsXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcessRowsXpdl', $methods ), 'exists method createSubProcessRowsXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createSubProcessRowsXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'SubProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'tasks');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::findIdTask
    * @todo   Implement testfindIdTask().
    */
    public function testfindIdTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('findIdTask', $methods ), 'exists method findIdTask' );
        $r = new ReflectionMethod('Xpdl', 'findIdTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'idTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'routes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::xmdlProcess
    * @todo   Implement testxmdlProcess().
    */
    public function testxmdlProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('xmdlProcess', $methods ), 'exists method xmdlProcess' );
        $r = new ReflectionMethod('Xpdl', 'xmdlProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Xpdl::createPool
    * @todo   Implement testcreatePool().
    */
    public function testcreatePool()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createPool', $methods ), 'exists method createPool' );
        $r = new ReflectionMethod('Xpdl', 'createPool');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'process');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'coordinateMaximumX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'coordinateMaximumY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createArtifacts
    * @todo   Implement testcreateArtifacts().
    */
    public function testcreateArtifacts()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createArtifacts', $methods ), 'exists method createArtifacts' );
        $r = new ReflectionMethod('Xpdl', 'createArtifacts');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'lanes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'id');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createSubProcessesXpdl
    * @todo   Implement testcreateSubProcessesXpdl().
    */
    public function testcreateSubProcessesXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcessesXpdl', $methods ), 'exists method createSubProcessesXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createSubProcessesXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'subProcess');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createActivitiesXpdl
    * @todo   Implement testcreateActivitiesXpdl().
    */
    public function testcreateActivitiesXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createActivitiesXpdl', $methods ), 'exists method createActivitiesXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createActivitiesXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tasks');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'events');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'scheduler');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createTransitionsXpdl
    * @todo   Implement testcreateTransitionsXpdl().
    */
    public function testcreateTransitionsXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTransitionsXpdl', $methods ), 'exists method createTransitionsXpdl' );
        $r = new ReflectionMethod('Xpdl', 'createTransitionsXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'routes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'taskHidden');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::getProcessDataXpdl
    * @todo   Implement testgetProcessDataXpdl().
    */
    public function testgetProcessDataXpdl()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getProcessDataXpdl', $methods ), 'exists method getProcessDataXpdl' );
        $r = new ReflectionMethod('Xpdl', 'getProcessDataXpdl');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'pmFilename');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::sortArray
    * @todo   Implement testsortArray().
    */
    public function testsortArray()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('sortArray', $methods ), 'exists method sortArray' );
        $r = new ReflectionMethod('Xpdl', 'sortArray');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::verifyRoutes
    * @todo   Implement testverifyRoutes().
    */
    public function testverifyRoutes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyRoutes', $methods ), 'exists method verifyRoutes' );
        $r = new ReflectionMethod('Xpdl', 'verifyRoutes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'routeTransitions');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'endArray');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'taskHidden');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createProcess
    * @todo   Implement testcreateProcess().
    */
    public function testcreateProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcess', $methods ), 'exists method createProcess' );
        $r = new ReflectionMethod('Xpdl', 'createProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createSubProcesses
    * @todo   Implement testcreateSubProcesses().
    */
    public function testcreateSubProcesses()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcesses', $methods ), 'exists method createSubProcesses' );
        $r = new ReflectionMethod('Xpdl', 'createSubProcesses');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'contentNode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'arrayLanes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createTask
    * @todo   Implement testcreateTask().
    */
    public function testcreateTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTask', $methods ), 'exists method createTask' );
        $r = new ReflectionMethod('Xpdl', 'createTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createDataTask
    * @todo   Implement testcreateDataTask().
    */
    public function testcreateDataTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createDataTask', $methods ), 'exists method createDataTask' );
        $r = new ReflectionMethod('Xpdl', 'createDataTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createRoute
    * @todo   Implement testcreateRoute().
    */
    public function testcreateRoute()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createRoute', $methods ), 'exists method createRoute' );
        $r = new ReflectionMethod('Xpdl', 'createRoute');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createSubProcess
    * @todo   Implement testcreateSubProcess().
    */
    public function testcreateSubProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcess', $methods ), 'exists method createSubProcess' );
        $r = new ReflectionMethod('Xpdl', 'createSubProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createGateways
    * @todo   Implement testcreateGateways().
    */
    public function testcreateGateways()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createGateways', $methods ), 'exists method createGateways' );
        $r = new ReflectionMethod('Xpdl', 'createGateways');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'routeTransitions');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'endArray');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'dataRoutes');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'numberRoutes');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'idProcess');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'taskHidden');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createLanesPM
    * @todo   Implement testcreateLanesPM().
    */
    public function testcreateLanesPM()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createLanesPM', $methods ), 'exists method createLanesPM' );
        $r = new ReflectionMethod('Xpdl', 'createLanesPM');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createLanes
    * @todo   Implement testcreateLanes().
    */
    public function testcreateLanes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createLanes', $methods ), 'exists method createLanes' );
        $r = new ReflectionMethod('Xpdl', 'createLanes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'lanes');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createLanesNewPM
    * @todo   Implement testcreateLanesNewPM().
    */
    public function testcreateLanesNewPM()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createLanesNewPM', $methods ), 'exists method createLanesNewPM' );
        $r = new ReflectionMethod('Xpdl', 'createLanesNewPM');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createActivities
    * @todo   Implement testcreateActivities().
    */
    public function testcreateActivities()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createActivities', $methods ), 'exists method createActivities' );
        $r = new ReflectionMethod('Xpdl', 'createActivities');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'contentNode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'activitySet');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createEventMessages
    * @todo   Implement testcreateEventMessages().
    */
    public function testcreateEventMessages()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createEventMessages', $methods ), 'exists method createEventMessages' );
        $r = new ReflectionMethod('Xpdl', 'createEventMessages');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createScheduler
    * @todo   Implement testcreateScheduler().
    */
    public function testcreateScheduler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createScheduler', $methods ), 'exists method createScheduler' );
        $r = new ReflectionMethod('Xpdl', 'createScheduler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::calculateTimeScheduler
    * @todo   Implement testcalculateTimeScheduler().
    */
    public function testcalculateTimeScheduler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('calculateTimeScheduler', $methods ), 'exists method calculateTimeScheduler' );
        $r = new ReflectionMethod('Xpdl', 'calculateTimeScheduler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'time');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createArrayScheduler
    * @todo   Implement testcreateArrayScheduler().
    */
    public function testcreateArrayScheduler()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createArrayScheduler', $methods ), 'exists method createArrayScheduler' );
        $r = new ReflectionMethod('Xpdl', 'createArrayScheduler');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'fields');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createTransitions
    * @todo   Implement testcreateTransitions().
    */
    public function testcreateTransitions()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTransitions', $methods ), 'exists method createTransitions' );
        $r = new ReflectionMethod('Xpdl', 'createTransitions');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'contentNode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'dataTasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'arrayRoutes');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'endArray');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'startArray');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'idProcess');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
        $this->assertTrue( $params[6]->getName() == 'schedulerArray');
        $this->assertTrue( $params[6]->isArray() == false);
        $this->assertTrue( $params[6]->isOptional () == false);
        $this->assertTrue( $params[7]->getName() == 'messages');
        $this->assertTrue( $params[7]->isArray() == false);
        $this->assertTrue( $params[7]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createActivity
    * @todo   Implement testcreateActivity().
    */
    public function testcreateActivity()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createActivity', $methods ), 'exists method createActivity' );
        $r = new ReflectionMethod('Xpdl', 'createActivity');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'contentNode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createExtended
    * @todo   Implement testcreateExtended().
    */
    public function testcreateExtended()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createExtended', $methods ), 'exists method createExtended' );
        $r = new ReflectionMethod('Xpdl', 'createExtended');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'contentNode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::findCoordinates
    * @todo   Implement testfindCoordinates().
    */
    public function testfindCoordinates()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('findCoordinates', $methods ), 'exists method findCoordinates' );
        $r = new ReflectionMethod('Xpdl', 'findCoordinates');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'contentNode');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::findCoordinatesTransition
    * @todo   Implement testfindCoordinatesTransition().
    */
    public function testfindCoordinatesTransition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('findCoordinatesTransition', $methods ), 'exists method findCoordinatesTransition' );
        $r = new ReflectionMethod('Xpdl', 'findCoordinatesTransition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'idRoute');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aRoutes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createArrayRoutes
    * @todo   Implement testcreateArrayRoutes().
    */
    public function testcreateArrayRoutes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createArrayRoutes', $methods ), 'exists method createArrayRoutes' );
        $r = new ReflectionMethod('Xpdl', 'createArrayRoutes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dataTasks');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'arrayRoutes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'aEvents');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'aGateways');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'aEnd');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'idProcess');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::convertArrayEnd
    * @todo   Implement testconvertArrayEnd().
    */
    public function testconvertArrayEnd()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('convertArrayEnd', $methods ), 'exists method convertArrayEnd' );
        $r = new ReflectionMethod('Xpdl', 'convertArrayEnd');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aEvents');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'idProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createTransitionsPM
    * @todo   Implement testcreateTransitionsPM().
    */
    public function testcreateTransitionsPM()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createTransitionsPM', $methods ), 'exists method createTransitionsPM' );
        $r = new ReflectionMethod('Xpdl', 'createTransitionsPM');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tasks');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'routes');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'events');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'countEvents');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'arrayRoutes');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'countRoutes');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::super_unique
    * @todo   Implement testsuper_unique().
    */
    public function testsuper_unique()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('super_unique', $methods ), 'exists method super_unique' );
        $r = new ReflectionMethod('Xpdl', 'super_unique');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createProcessPM
    * @todo   Implement testcreateProcessPM().
    */
    public function testcreateProcessPM()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcessPM', $methods ), 'exists method createProcessPM' );
        $r = new ReflectionMethod('Xpdl', 'createProcessPM');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::createSubProcessesPM
    * @todo   Implement testcreateSubProcessesPM().
    */
    public function testcreateSubProcessesPM()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createSubProcessesPM', $methods ), 'exists method createSubProcessesPM' );
        $r = new ReflectionMethod('Xpdl', 'createSubProcessesPM');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Xpdl::saveWebEntry
    * @todo   Implement testsaveWebEntry().
    */
    public function testsaveWebEntry()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveWebEntry', $methods ), 'exists method saveWebEntry' );
        $r = new ReflectionMethod('Xpdl', 'saveWebEntry');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'array');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

  } 
