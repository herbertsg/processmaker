<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.processMap.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:27.
*/

class classprocessMapTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var processMap
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new processMap();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('processMap');
        $this->assertTrue( count($methods) == 150, count($methods));
    }

    /**
    * @covers processMap::load
    * @todo   Implement testload().
    */
    public function testload()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('load', $methods ), 'exists method load' );
        $r = new ReflectionMethod('processMap', 'load');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'bView');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'iDelegation');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '0');
        $this->assertTrue( $params[4]->getName() == 'sTask');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
        $this->assertTrue( $params[5]->getName() == 'bCT');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == true);
        $this->assertTrue( $params[5]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::createProcess
    * @todo   Implement testcreateProcess().
    */
    public function testcreateProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('createProcess', $methods ), 'exists method createProcess' );
        $r = new ReflectionMethod('processMap', 'createProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::updateProcess
    * @todo   Implement testupdateProcess().
    */
    public function testupdateProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateProcess', $methods ), 'exists method updateProcess' );
        $r = new ReflectionMethod('processMap', 'updateProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::editProcess
    * @todo   Implement testeditProcess().
    */
    public function testeditProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('editProcess', $methods ), 'exists method editProcess' );
        $r = new ReflectionMethod('processMap', 'editProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::deleteProcess
    * @todo   Implement testdeleteProcess().
    */
    public function testdeleteProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteProcess', $methods ), 'exists method deleteProcess' );
        $r = new ReflectionMethod('processMap', 'deleteProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::saveTitlePosition
    * @todo   Implement testsaveTitlePosition().
    */
    public function testsaveTitlePosition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveTitlePosition', $methods ), 'exists method saveTitlePosition' );
        $r = new ReflectionMethod('processMap', 'saveTitlePosition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

    /**
    * @covers processMap::steps
    * @todo   Implement teststeps().
    */
    public function teststeps()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('steps', $methods ), 'exists method steps' );
        $r = new ReflectionMethod('processMap', 'steps');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getStepsCriteria
    * @todo   Implement testgetStepsCriteria().
    */
    public function testgetStepsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStepsCriteria', $methods ), 'exists method getStepsCriteria' );
        $r = new ReflectionMethod('processMap', 'getStepsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getStepTriggersCriteria
    * @todo   Implement testgetStepTriggersCriteria().
    */
    public function testgetStepTriggersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStepTriggersCriteria', $methods ), 'exists method getStepTriggersCriteria' );
        $r = new ReflectionMethod('processMap', 'getStepTriggersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sStepUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAvailableBBCriteria
    * @todo   Implement testgetAvailableBBCriteria().
    */
    public function testgetAvailableBBCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableBBCriteria', $methods ), 'exists method getAvailableBBCriteria' );
        $r = new ReflectionMethod('processMap', 'getAvailableBBCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::users
    * @todo   Implement testusers().
    */
    public function testusers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('users', $methods ), 'exists method users' );
        $r = new ReflectionMethod('processMap', 'users');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::users_adhoc
    * @todo   Implement testusers_adhoc().
    */
    public function testusers_adhoc()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('users_adhoc', $methods ), 'exists method users_adhoc' );
        $r = new ReflectionMethod('processMap', 'users_adhoc');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getTaskUsersCriteria
    * @todo   Implement testgetTaskUsersCriteria().
    */
    public function testgetTaskUsersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTaskUsersCriteria', $methods ), 'exists method getTaskUsersCriteria' );
        $r = new ReflectionMethod('processMap', 'getTaskUsersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers processMap::getAvailableUsersCriteria
    * @todo   Implement testgetAvailableUsersCriteria().
    */
    public function testgetAvailableUsersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableUsersCriteria', $methods ), 'exists method getAvailableUsersCriteria' );
        $r = new ReflectionMethod('processMap', 'getAvailableUsersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers processMap::stepsConditions
    * @todo   Implement teststepsConditions().
    */
    public function teststepsConditions()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('stepsConditions', $methods ), 'exists method stepsConditions' );
        $r = new ReflectionMethod('processMap', 'stepsConditions');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::stepsTriggers
    * @todo   Implement teststepsTriggers().
    */
    public function teststepsTriggers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('stepsTriggers', $methods ), 'exists method stepsTriggers' );
        $r = new ReflectionMethod('processMap', 'stepsTriggers');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::addTask
    * @todo   Implement testaddTask().
    */
    public function testaddTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addTask', $methods ), 'exists method addTask' );
        $r = new ReflectionMethod('processMap', 'addTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
        $this->assertTrue( $params[3]->getName() == 'iWidth');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '165');
        $this->assertTrue( $params[4]->getName() == 'iHeight');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '40');
    }

    /**
    * @covers processMap::editTaskProperties
    * @todo   Implement testeditTaskProperties().
    */
    public function testeditTaskProperties()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('editTaskProperties', $methods ), 'exists method editTaskProperties' );
        $r = new ReflectionMethod('processMap', 'editTaskProperties');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iForm');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
        $this->assertTrue( $params[2]->getName() == 'iIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

    /**
    * @covers processMap::saveTaskPosition
    * @todo   Implement testsaveTaskPosition().
    */
    public function testsaveTaskPosition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveTaskPosition', $methods ), 'exists method saveTaskPosition' );
        $r = new ReflectionMethod('processMap', 'saveTaskPosition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

    /**
    * @covers processMap::deleteTask
    * @todo   Implement testdeleteTask().
    */
    public function testdeleteTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteTask', $methods ), 'exists method deleteTask' );
        $r = new ReflectionMethod('processMap', 'deleteTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::deleteGateway
    * @todo   Implement testdeleteGateway().
    */
    public function testdeleteGateway()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteGateway', $methods ), 'exists method deleteGateway' );
        $r = new ReflectionMethod('processMap', 'deleteGateway');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sGatewayUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::addGateway
    * @todo   Implement testaddGateway().
    */
    public function testaddGateway()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addGateway', $methods ), 'exists method addGateway' );
        $r = new ReflectionMethod('processMap', 'addGateway');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::addGuide
    * @todo   Implement testaddGuide().
    */
    public function testaddGuide()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addGuide', $methods ), 'exists method addGuide' );
        $r = new ReflectionMethod('processMap', 'addGuide');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iPosition');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'sDirection');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'vertical');
    }

    /**
    * @covers processMap::saveGuidePosition
    * @todo   Implement testsaveGuidePosition().
    */
    public function testsaveGuidePosition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveGuidePosition', $methods ), 'exists method saveGuidePosition' );
        $r = new ReflectionMethod('processMap', 'saveGuidePosition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSEUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iPosition');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'sDirection');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'vertical');
    }

    /**
    * @covers processMap::deleteGuide
    * @todo   Implement testdeleteGuide().
    */
    public function testdeleteGuide()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteGuide', $methods ), 'exists method deleteGuide' );
        $r = new ReflectionMethod('processMap', 'deleteGuide');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSEUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::deleteGuides
    * @todo   Implement testdeleteGuides().
    */
    public function testdeleteGuides()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteGuides', $methods ), 'exists method deleteGuides' );
        $r = new ReflectionMethod('processMap', 'deleteGuides');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::addText
    * @todo   Implement testaddText().
    */
    public function testaddText()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addText', $methods ), 'exists method addText' );
        $r = new ReflectionMethod('processMap', 'addText');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sLabel');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iX');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
        $this->assertTrue( $params[3]->getName() == 'iY');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '0');
        $this->assertTrue( $params[4]->getName() == 'sNext_uid');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::updateText
    * @todo   Implement testupdateText().
    */
    public function testupdateText()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateText', $methods ), 'exists method updateText' );
        $r = new ReflectionMethod('processMap', 'updateText');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSEUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sLabel');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sNext_uid');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::saveTextPosition
    * @todo   Implement testsaveTextPosition().
    */
    public function testsaveTextPosition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveTextPosition', $methods ), 'exists method saveTextPosition' );
        $r = new ReflectionMethod('processMap', 'saveTextPosition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSEUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

    /**
    * @covers processMap::deleteText
    * @todo   Implement testdeleteText().
    */
    public function testdeleteText()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteText', $methods ), 'exists method deleteText' );
        $r = new ReflectionMethod('processMap', 'deleteText');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSEUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::saveGatewayPosition
    * @todo   Implement testsaveGatewayPosition().
    */
    public function testsaveGatewayPosition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveGatewayPosition', $methods ), 'exists method saveGatewayPosition' );
        $r = new ReflectionMethod('processMap', 'saveGatewayPosition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sGatewayUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

    /**
    * @covers processMap::dynaformsList
    * @todo   Implement testdynaformsList().
    */
    public function testdynaformsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dynaformsList', $methods ), 'exists method dynaformsList' );
        $r = new ReflectionMethod('processMap', 'dynaformsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getDynaformsCriteria
    * @todo   Implement testgetDynaformsCriteria().
    */
    public function testgetDynaformsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDynaformsCriteria', $methods ), 'exists method getDynaformsCriteria' );
        $r = new ReflectionMethod('processMap', 'getDynaformsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getDynaformsList
    * @todo   Implement testgetDynaformsList().
    */
    public function testgetDynaformsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDynaformsList', $methods ), 'exists method getDynaformsList' );
        $r = new ReflectionMethod('processMap', 'getDynaformsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::outputdocsList
    * @todo   Implement testoutputdocsList().
    */
    public function testoutputdocsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('outputdocsList', $methods ), 'exists method outputdocsList' );
        $r = new ReflectionMethod('processMap', 'outputdocsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getOutputDocumentsCriteria
    * @todo   Implement testgetOutputDocumentsCriteria().
    */
    public function testgetOutputDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getOutputDocumentsCriteria', $methods ), 'exists method getOutputDocumentsCriteria' );
        $r = new ReflectionMethod('processMap', 'getOutputDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::inputdocsList
    * @todo   Implement testinputdocsList().
    */
    public function testinputdocsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('inputdocsList', $methods ), 'exists method inputdocsList' );
        $r = new ReflectionMethod('processMap', 'inputdocsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getInputDocumentsCriteria
    * @todo   Implement testgetInputDocumentsCriteria().
    */
    public function testgetInputDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getInputDocumentsCriteria', $methods ), 'exists method getInputDocumentsCriteria' );
        $r = new ReflectionMethod('processMap', 'getInputDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::triggersList
    * @todo   Implement testtriggersList().
    */
    public function testtriggersList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('triggersList', $methods ), 'exists method triggersList' );
        $r = new ReflectionMethod('processMap', 'triggersList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getTriggersCriteria
    * @todo   Implement testgetTriggersCriteria().
    */
    public function testgetTriggersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTriggersCriteria', $methods ), 'exists method getTriggersCriteria' );
        $r = new ReflectionMethod('processMap', 'getTriggersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getTriggers
    * @todo   Implement testgetTriggers().
    */
    public function testgetTriggers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTriggers', $methods ), 'exists method getTriggers' );
        $r = new ReflectionMethod('processMap', 'getTriggers');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::caseSchedulerList
    * @todo   Implement testcaseSchedulerList().
    */
    public function testcaseSchedulerList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseSchedulerList', $methods ), 'exists method caseSchedulerList' );
        $r = new ReflectionMethod('processMap', 'caseSchedulerList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::logCaseSchedulerList
    * @todo   Implement testlogCaseSchedulerList().
    */
    public function testlogCaseSchedulerList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('logCaseSchedulerList', $methods ), 'exists method logCaseSchedulerList' );
        $r = new ReflectionMethod('processMap', 'logCaseSchedulerList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::messagesList
    * @todo   Implement testmessagesList().
    */
    public function testmessagesList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('messagesList', $methods ), 'exists method messagesList' );
        $r = new ReflectionMethod('processMap', 'messagesList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::reportTablesList
    * @todo   Implement testreportTablesList().
    */
    public function testreportTablesList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reportTablesList', $methods ), 'exists method reportTablesList' );
        $r = new ReflectionMethod('processMap', 'reportTablesList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getReportTablesCriteria
    * @todo   Implement testgetReportTablesCriteria().
    */
    public function testgetReportTablesCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getReportTablesCriteria', $methods ), 'exists method getReportTablesCriteria' );
        $r = new ReflectionMethod('processMap', 'getReportTablesCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::currentPattern
    * @todo   Implement testcurrentPattern().
    */
    public function testcurrentPattern()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('currentPattern', $methods ), 'exists method currentPattern' );
        $r = new ReflectionMethod('processMap', 'currentPattern');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::newPattern
    * @todo   Implement testnewPattern().
    */
    public function testnewPattern()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('newPattern', $methods ), 'exists method newPattern' );
        $r = new ReflectionMethod('processMap', 'newPattern');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sNextTask');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers processMap::getNumberOfRoutes
    * @todo   Implement testgetNumberOfRoutes().
    */
    public function testgetNumberOfRoutes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getNumberOfRoutes', $methods ), 'exists method getNumberOfRoutes' );
        $r = new ReflectionMethod('processMap', 'getNumberOfRoutes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sNextTask');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::saveNewPattern
    * @todo   Implement testsaveNewPattern().
    */
    public function testsaveNewPattern()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveNewPattern', $methods ), 'exists method saveNewPattern' );
        $r = new ReflectionMethod('processMap', 'saveNewPattern');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sNextTask');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
        $this->assertTrue( $params[4]->getName() == 'sDelete');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::saveNewGateway
    * @todo   Implement testsaveNewGateway().
    */
    public function testsaveNewGateway()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveNewGateway', $methods ), 'exists method saveNewGateway' );
        $r = new ReflectionMethod('processMap', 'saveNewGateway');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sNextTask');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::deleteDerivation
    * @todo   Implement testdeleteDerivation().
    */
    public function testdeleteDerivation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteDerivation', $methods ), 'exists method deleteDerivation' );
        $r = new ReflectionMethod('processMap', 'deleteDerivation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getConditionProcessList
    * @todo   Implement testgetConditionProcessList().
    */
    public function testgetConditionProcessList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getConditionProcessList', $methods ), 'exists method getConditionProcessList' );
        $r = new ReflectionMethod('processMap', 'getConditionProcessList');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::supervisorDynaforms
    * @todo   Implement testsupervisorDynaforms().
    */
    public function testsupervisorDynaforms()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('supervisorDynaforms', $methods ), 'exists method supervisorDynaforms' );
        $r = new ReflectionMethod('processMap', 'supervisorDynaforms');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::supervisorInputs
    * @todo   Implement testsupervisorInputs().
    */
    public function testsupervisorInputs()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('supervisorInputs', $methods ), 'exists method supervisorInputs' );
        $r = new ReflectionMethod('processMap', 'supervisorInputs');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::webEntry
    * @todo   Implement testwebEntry().
    */
    public function testwebEntry()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('webEntry', $methods ), 'exists method webEntry' );
        $r = new ReflectionMethod('processMap', 'webEntry');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::webEntry_new
    * @todo   Implement testwebEntry_new().
    */
    public function testwebEntry_new()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('webEntry_new', $methods ), 'exists method webEntry_new' );
        $r = new ReflectionMethod('processMap', 'webEntry_new');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getSupervisorDynaformsCriteria
    * @todo   Implement testgetSupervisorDynaformsCriteria().
    */
    public function testgetSupervisorDynaformsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSupervisorDynaformsCriteria', $methods ), 'exists method getSupervisorDynaformsCriteria' );
        $r = new ReflectionMethod('processMap', 'getSupervisorDynaformsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getSupervisorInputsCriteria
    * @todo   Implement testgetSupervisorInputsCriteria().
    */
    public function testgetSupervisorInputsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSupervisorInputsCriteria', $methods ), 'exists method getSupervisorInputsCriteria' );
        $r = new ReflectionMethod('processMap', 'getSupervisorInputsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::availableSupervisorDynaforms
    * @todo   Implement testavailableSupervisorDynaforms().
    */
    public function testavailableSupervisorDynaforms()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('availableSupervisorDynaforms', $methods ), 'exists method availableSupervisorDynaforms' );
        $r = new ReflectionMethod('processMap', 'availableSupervisorDynaforms');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::availableSupervisorInputs
    * @todo   Implement testavailableSupervisorInputs().
    */
    public function testavailableSupervisorInputs()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('availableSupervisorInputs', $methods ), 'exists method availableSupervisorInputs' );
        $r = new ReflectionMethod('processMap', 'availableSupervisorInputs');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAvailableSupervisorDynaformsCriteria
    * @todo   Implement testgetAvailableSupervisorDynaformsCriteria().
    */
    public function testgetAvailableSupervisorDynaformsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableSupervisorDynaformsCriteria', $methods ), 'exists method getAvailableSupervisorDynaformsCriteria' );
        $r = new ReflectionMethod('processMap', 'getAvailableSupervisorDynaformsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAvailableSupervisorInputsCriteria
    * @todo   Implement testgetAvailableSupervisorInputsCriteria().
    */
    public function testgetAvailableSupervisorInputsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableSupervisorInputsCriteria', $methods ), 'exists method getAvailableSupervisorInputsCriteria' );
        $r = new ReflectionMethod('processMap', 'getAvailableSupervisorInputsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::assignSupervisorStep
    * @todo   Implement testassignSupervisorStep().
    */
    public function testassignSupervisorStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignSupervisorStep', $methods ), 'exists method assignSupervisorStep' );
        $r = new ReflectionMethod('processMap', 'assignSupervisorStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sObjType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sObjUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::removeSupervisorStep
    * @todo   Implement testremoveSupervisorStep().
    */
    public function testremoveSupervisorStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeSupervisorStep', $methods ), 'exists method removeSupervisorStep' );
        $r = new ReflectionMethod('processMap', 'removeSupervisorStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sStepUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sProcessUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sObjType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sObjUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'iPosition');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
    }

    /**
    * @covers processMap::listProcessesUser
    * @todo   Implement testlistProcessesUser().
    */
    public function testlistProcessesUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('listProcessesUser', $methods ), 'exists method listProcessesUser' );
        $r = new ReflectionMethod('processMap', 'listProcessesUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::listNoProcessesUser
    * @todo   Implement testlistNoProcessesUser().
    */
    public function testlistNoProcessesUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('listNoProcessesUser', $methods ), 'exists method listNoProcessesUser' );
        $r = new ReflectionMethod('processMap', 'listNoProcessesUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::assignProcessUser
    * @todo   Implement testassignProcessUser().
    */
    public function testassignProcessUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignProcessUser', $methods ), 'exists method assignProcessUser' );
        $r = new ReflectionMethod('processMap', 'assignProcessUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sUsrUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::removeProcessUser
    * @todo   Implement testremoveProcessUser().
    */
    public function testremoveProcessUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeProcessUser', $methods ), 'exists method removeProcessUser' );
        $r = new ReflectionMethod('processMap', 'removeProcessUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sPUUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getObjectsPermissionsCriteria
    * @todo   Implement testgetObjectsPermissionsCriteria().
    */
    public function testgetObjectsPermissionsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getObjectsPermissionsCriteria', $methods ), 'exists method getObjectsPermissionsCriteria' );
        $r = new ReflectionMethod('processMap', 'getObjectsPermissionsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAllObjectPermissionCount
    * @todo   Implement testgetAllObjectPermissionCount().
    */
    public function testgetAllObjectPermissionCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllObjectPermissionCount', $methods ), 'exists method getAllObjectPermissionCount' );
        $r = new ReflectionMethod('processMap', 'getAllObjectPermissionCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtObjectsPermissions
    * @todo   Implement testgetExtObjectsPermissions().
    */
    public function testgetExtObjectsPermissions()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtObjectsPermissions', $methods ), 'exists method getExtObjectsPermissions' );
        $r = new ReflectionMethod('processMap', 'getExtObjectsPermissions');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::objectsPermissionsList
    * @todo   Implement testobjectsPermissionsList().
    */
    public function testobjectsPermissionsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('objectsPermissionsList', $methods ), 'exists method objectsPermissionsList' );
        $r = new ReflectionMethod('processMap', 'objectsPermissionsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::newObjectPermission
    * @todo   Implement testnewObjectPermission().
    */
    public function testnewObjectPermission()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('newObjectPermission', $methods ), 'exists method newObjectPermission' );
        $r = new ReflectionMethod('processMap', 'newObjectPermission');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::editObjectPermission
    * @todo   Implement testeditObjectPermission().
    */
    public function testeditObjectPermission()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('editObjectPermission', $methods ), 'exists method editObjectPermission' );
        $r = new ReflectionMethod('processMap', 'editObjectPermission');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sOP_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sProcessUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::caseTracker
    * @todo   Implement testcaseTracker().
    */
    public function testcaseTracker()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseTracker', $methods ), 'exists method caseTracker' );
        $r = new ReflectionMethod('processMap', 'caseTracker');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::caseTrackerObjects
    * @todo   Implement testcaseTrackerObjects().
    */
    public function testcaseTrackerObjects()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseTrackerObjects', $methods ), 'exists method caseTrackerObjects' );
        $r = new ReflectionMethod('processMap', 'caseTrackerObjects');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getCaseTrackerObjectsCriteria
    * @todo   Implement testgetCaseTrackerObjectsCriteria().
    */
    public function testgetCaseTrackerObjectsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCaseTrackerObjectsCriteria', $methods ), 'exists method getCaseTrackerObjectsCriteria' );
        $r = new ReflectionMethod('processMap', 'getCaseTrackerObjectsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::availableCaseTrackerObjects
    * @todo   Implement testavailableCaseTrackerObjects().
    */
    public function testavailableCaseTrackerObjects()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('availableCaseTrackerObjects', $methods ), 'exists method availableCaseTrackerObjects' );
        $r = new ReflectionMethod('processMap', 'availableCaseTrackerObjects');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAvailableCaseTrackerObjectsCriteria
    * @todo   Implement testgetAvailableCaseTrackerObjectsCriteria().
    */
    public function testgetAvailableCaseTrackerObjectsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableCaseTrackerObjectsCriteria', $methods ), 'exists method getAvailableCaseTrackerObjectsCriteria' );
        $r = new ReflectionMethod('processMap', 'getAvailableCaseTrackerObjectsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::assignCaseTrackerObject
    * @todo   Implement testassignCaseTrackerObject().
    */
    public function testassignCaseTrackerObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('assignCaseTrackerObject', $methods ), 'exists method assignCaseTrackerObject' );
        $r = new ReflectionMethod('processMap', 'assignCaseTrackerObject');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sObjType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sObjUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::removeCaseTrackerObject
    * @todo   Implement testremoveCaseTrackerObject().
    */
    public function testremoveCaseTrackerObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeCaseTrackerObject', $methods ), 'exists method removeCaseTrackerObject' );
        $r = new ReflectionMethod('processMap', 'removeCaseTrackerObject');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCTOUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sProcessUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iPosition');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::upCaseTrackerObject
    * @todo   Implement testupCaseTrackerObject().
    */
    public function testupCaseTrackerObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upCaseTrackerObject', $methods ), 'exists method upCaseTrackerObject' );
        $r = new ReflectionMethod('processMap', 'upCaseTrackerObject');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCTOUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sProcessUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iPosition');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::downCaseTrackerObject
    * @todo   Implement testdownCaseTrackerObject().
    */
    public function testdownCaseTrackerObject()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('downCaseTrackerObject', $methods ), 'exists method downCaseTrackerObject' );
        $r = new ReflectionMethod('processMap', 'downCaseTrackerObject');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCTOUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sProcessUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iPosition');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::processFilesManager
    * @todo   Implement testprocessFilesManager().
    */
    public function testprocessFilesManager()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('processFilesManager', $methods ), 'exists method processFilesManager' );
        $r = new ReflectionMethod('processMap', 'processFilesManager');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::exploreDirectory
    * @todo   Implement testexploreDirectory().
    */
    public function testexploreDirectory()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('exploreDirectory', $methods ), 'exists method exploreDirectory' );
        $r = new ReflectionMethod('processMap', 'exploreDirectory');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sMainDirectory');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sCurrentDirectory');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::deleteFile
    * @todo   Implement testdeleteFile().
    */
    public function testdeleteFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteFile', $methods ), 'exists method deleteFile' );
        $r = new ReflectionMethod('processMap', 'deleteFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sMainDirectory');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sCurrentDirectory');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sFile');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers processMap::deleteDirectory
    * @todo   Implement testdeleteDirectory().
    */
    public function testdeleteDirectory()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteDirectory', $methods ), 'exists method deleteDirectory' );
        $r = new ReflectionMethod('processMap', 'deleteDirectory');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sMainDirectory');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sCurrentDirectory');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sDirToDelete');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers processMap::downloadFile
    * @todo   Implement testdownloadFile().
    */
    public function testdownloadFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('downloadFile', $methods ), 'exists method downloadFile' );
        $r = new ReflectionMethod('processMap', 'downloadFile');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sMainDirectory');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sCurrentDirectory');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sFile');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers processMap::addSubProcess
    * @todo   Implement testaddSubProcess().
    */
    public function testaddSubProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('addSubProcess', $methods ), 'exists method addSubProcess' );
        $r = new ReflectionMethod('processMap', 'addSubProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
    }

    /**
    * @covers processMap::deleteSubProcess
    * @todo   Implement testdeleteSubProcess().
    */
    public function testdeleteSubProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('deleteSubProcess', $methods ), 'exists method deleteSubProcess' );
        $r = new ReflectionMethod('processMap', 'deleteSubProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::subProcess_Properties
    * @todo   Implement testsubProcess_Properties().
    */
    public function testsubProcess_Properties()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('subProcess_Properties', $methods ), 'exists method subProcess_Properties' );
        $r = new ReflectionMethod('processMap', 'subProcess_Properties');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::subProcess_TaskIni
    * @todo   Implement testsubProcess_TaskIni().
    */
    public function testsubProcess_TaskIni()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('subProcess_TaskIni', $methods ), 'exists method subProcess_TaskIni' );
        $r = new ReflectionMethod('processMap', 'subProcess_TaskIni');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::eventsList
    * @todo   Implement testeventsList().
    */
    public function testeventsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('eventsList', $methods ), 'exists method eventsList' );
        $r = new ReflectionMethod('processMap', 'eventsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'type');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::getEventsCriteria
    * @todo   Implement testgetEventsCriteria().
    */
    public function testgetEventsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getEventsCriteria', $methods ), 'exists method getEventsCriteria' );
        $r = new ReflectionMethod('processMap', 'getEventsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'EVN_ACTION');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::editProcessNew
    * @todo   Implement testeditProcessNew().
    */
    public function testeditProcessNew()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('editProcessNew', $methods ), 'exists method editProcessNew' );
        $r = new ReflectionMethod('processMap', 'editProcessNew');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::loadProcessCategory
    * @todo   Implement testloadProcessCategory().
    */
    public function testloadProcessCategory()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadProcessCategory', $methods ), 'exists method loadProcessCategory' );
        $r = new ReflectionMethod('processMap', 'loadProcessCategory');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::saveTaskCordinates
    * @todo   Implement testsaveTaskCordinates().
    */
    public function testsaveTaskCordinates()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveTaskCordinates', $methods ), 'exists method saveTaskCordinates' );
        $r = new ReflectionMethod('processMap', 'saveTaskCordinates');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '110');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '60');
    }

    /**
    * @covers processMap::saveAnnotationCordinates
    * @todo   Implement testsaveAnnotationCordinates().
    */
    public function testsaveAnnotationCordinates()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveAnnotationCordinates', $methods ), 'exists method saveAnnotationCordinates' );
        $r = new ReflectionMethod('processMap', 'saveAnnotationCordinates');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSwimLaneUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '110');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '60');
    }

    /**
    * @covers processMap::saveEventPosition
    * @todo   Implement testsaveEventPosition().
    */
    public function testsaveEventPosition()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveEventPosition', $methods ), 'exists method saveEventPosition' );
        $r = new ReflectionMethod('processMap', 'saveEventPosition');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sEventUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iX');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '110');
        $this->assertTrue( $params[2]->getName() == 'iY');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '60');
    }

    /**
    * @covers processMap::getAllProcesses
    * @todo   Implement testgetAllProcesses().
    */
    public function testgetAllProcesses()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllProcesses', $methods ), 'exists method getAllProcesses' );
        $r = new ReflectionMethod('processMap', 'getAllProcesses');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getDynaformList
    * @todo   Implement testgetDynaformList().
    */
    public function testgetDynaformList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDynaformList', $methods ), 'exists method getDynaformList' );
        $r = new ReflectionMethod('processMap', 'getDynaformList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::listNewWebEntry
    * @todo   Implement testlistNewWebEntry().
    */
    public function testlistNewWebEntry()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('listNewWebEntry', $methods ), 'exists method listNewWebEntry' );
        $r = new ReflectionMethod('processMap', 'listNewWebEntry');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sEventUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::usersExtList
    * @todo   Implement testusersExtList().
    */
    public function testusersExtList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('usersExtList', $methods ), 'exists method usersExtList' );
        $r = new ReflectionMethod('processMap', 'usersExtList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sTaskUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::caseNewSchedulerList
    * @todo   Implement testcaseNewSchedulerList().
    */
    public function testcaseNewSchedulerList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseNewSchedulerList', $methods ), 'exists method caseNewSchedulerList' );
        $r = new ReflectionMethod('processMap', 'caseNewSchedulerList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSchUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAllTaskUserCount
    * @todo   Implement testgetAllTaskUserCount().
    */
    public function testgetAllTaskUserCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllTaskUserCount', $methods ), 'exists method getAllTaskUserCount' );
        $r = new ReflectionMethod('processMap', 'getAllTaskUserCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtTaskUsersCriteria
    * @todo   Implement testgetExtTaskUsersCriteria().
    */
    public function testgetExtTaskUsersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtTaskUsersCriteria', $methods ), 'exists method getExtTaskUsersCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtTaskUsersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTaskUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'iType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '1');
    }

    /**
    * @covers processMap::getAvailableExtUsersCriteria
    * @todo   Implement testgetAvailableExtUsersCriteria().
    */
    public function testgetAvailableExtUsersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableExtUsersCriteria', $methods ), 'exists method getAvailableExtUsersCriteria' );
        $r = new ReflectionMethod('processMap', 'getAvailableExtUsersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '1');
    }

    /**
    * @covers processMap::getExtAdditionalTablesList
    * @todo   Implement testgetExtAdditionalTablesList().
    */
    public function testgetExtAdditionalTablesList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtAdditionalTablesList', $methods ), 'exists method getExtAdditionalTablesList' );
        $r = new ReflectionMethod('processMap', 'getExtAdditionalTablesList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTab_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getExtAvailableBBCriteria
    * @todo   Implement testgetExtAvailableBBCriteria().
    */
    public function testgetExtAvailableBBCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtAvailableBBCriteria', $methods ), 'exists method getExtAvailableBBCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtAvailableBBCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllStepCount
    * @todo   Implement testgetAllStepCount().
    */
    public function testgetAllStepCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllStepCount', $methods ), 'exists method getAllStepCount' );
        $r = new ReflectionMethod('processMap', 'getAllStepCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtStepsCriteria
    * @todo   Implement testgetExtStepsCriteria().
    */
    public function testgetExtStepsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtStepsCriteria', $methods ), 'exists method getExtStepsCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtStepsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTaskUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllStepTriggerCount
    * @todo   Implement testgetAllStepTriggerCount().
    */
    public function testgetAllStepTriggerCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllStepTriggerCount', $methods ), 'exists method getAllStepTriggerCount' );
        $r = new ReflectionMethod('processMap', 'getAllStepTriggerCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtStepTriggersCriteria
    * @todo   Implement testgetExtStepTriggersCriteria().
    */
    public function testgetExtStepTriggersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtStepTriggersCriteria', $methods ), 'exists method getExtStepTriggersCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtStepTriggersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sStepUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sTaskUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
        $this->assertTrue( $params[4]->getName() == 'sType');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getExtAvailableStepTriggersCriteria
    * @todo   Implement testgetExtAvailableStepTriggersCriteria().
    */
    public function testgetExtAvailableStepTriggersCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtAvailableStepTriggersCriteria', $methods ), 'exists method getExtAvailableStepTriggersCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtAvailableStepTriggersCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sStepUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sTaskUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllDynaformCount
    * @todo   Implement testgetAllDynaformCount().
    */
    public function testgetAllDynaformCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllDynaformCount', $methods ), 'exists method getAllDynaformCount' );
        $r = new ReflectionMethod('processMap', 'getAllDynaformCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtDynaformsList
    * @todo   Implement testgetExtDynaformsList().
    */
    public function testgetExtDynaformsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtDynaformsList', $methods ), 'exists method getExtDynaformsList' );
        $r = new ReflectionMethod('processMap', 'getExtDynaformsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllInputDocumentCount
    * @todo   Implement testgetAllInputDocumentCount().
    */
    public function testgetAllInputDocumentCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllInputDocumentCount', $methods ), 'exists method getAllInputDocumentCount' );
        $r = new ReflectionMethod('processMap', 'getAllInputDocumentCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtInputDocumentsCriteria
    * @todo   Implement testgetExtInputDocumentsCriteria().
    */
    public function testgetExtInputDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtInputDocumentsCriteria', $methods ), 'exists method getExtInputDocumentsCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtInputDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllOutputDocumentCount
    * @todo   Implement testgetAllOutputDocumentCount().
    */
    public function testgetAllOutputDocumentCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllOutputDocumentCount', $methods ), 'exists method getAllOutputDocumentCount' );
        $r = new ReflectionMethod('processMap', 'getAllOutputDocumentCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtOutputDocumentsCriteria
    * @todo   Implement testgetExtOutputDocumentsCriteria().
    */
    public function testgetExtOutputDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtOutputDocumentsCriteria', $methods ), 'exists method getExtOutputDocumentsCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtOutputDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::subProcessExtProperties
    * @todo   Implement testsubProcessExtProperties().
    */
    public function testsubProcessExtProperties()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('subProcessExtProperties', $methods ), 'exists method subProcessExtProperties' );
        $r = new ReflectionMethod('processMap', 'subProcessExtProperties');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sTaskUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'sIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllProcessSupervisorsCount
    * @todo   Implement testgetAllProcessSupervisorsCount().
    */
    public function testgetAllProcessSupervisorsCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllProcessSupervisorsCount', $methods ), 'exists method getAllProcessSupervisorsCount' );
        $r = new ReflectionMethod('processMap', 'getAllProcessSupervisorsCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::listExtProcessesSupervisors
    * @todo   Implement testlistExtProcessesSupervisors().
    */
    public function testlistExtProcessesSupervisors()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('listExtProcessesSupervisors', $methods ), 'exists method listExtProcessesSupervisors' );
        $r = new ReflectionMethod('processMap', 'listExtProcessesSupervisors');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::listExtNoProcessesUser
    * @todo   Implement testlistExtNoProcessesUser().
    */
    public function testlistExtNoProcessesUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('listExtNoProcessesUser', $methods ), 'exists method listExtNoProcessesUser' );
        $r = new ReflectionMethod('processMap', 'listExtNoProcessesUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAllSupervisorDynaformsCount
    * @todo   Implement testgetAllSupervisorDynaformsCount().
    */
    public function testgetAllSupervisorDynaformsCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllSupervisorDynaformsCount', $methods ), 'exists method getAllSupervisorDynaformsCount' );
        $r = new ReflectionMethod('processMap', 'getAllSupervisorDynaformsCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtSupervisorDynaformsList
    * @todo   Implement testgetExtSupervisorDynaformsList().
    */
    public function testgetExtSupervisorDynaformsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtSupervisorDynaformsList', $methods ), 'exists method getExtSupervisorDynaformsList' );
        $r = new ReflectionMethod('processMap', 'getExtSupervisorDynaformsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getExtAvailableSupervisorDynaformsList
    * @todo   Implement testgetExtAvailableSupervisorDynaformsList().
    */
    public function testgetExtAvailableSupervisorDynaformsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtAvailableSupervisorDynaformsList', $methods ), 'exists method getExtAvailableSupervisorDynaformsList' );
        $r = new ReflectionMethod('processMap', 'getExtAvailableSupervisorDynaformsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllSupervisorInputsCount
    * @todo   Implement testgetAllSupervisorInputsCount().
    */
    public function testgetAllSupervisorInputsCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllSupervisorInputsCount', $methods ), 'exists method getAllSupervisorInputsCount' );
        $r = new ReflectionMethod('processMap', 'getAllSupervisorInputsCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtSupervisorInputsList
    * @todo   Implement testgetExtSupervisorInputsList().
    */
    public function testgetExtSupervisorInputsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtSupervisorInputsList', $methods ), 'exists method getExtSupervisorInputsList' );
        $r = new ReflectionMethod('processMap', 'getExtSupervisorInputsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getExtAvailableSupervisorInputsList
    * @todo   Implement testgetExtAvailableSupervisorInputsList().
    */
    public function testgetExtAvailableSupervisorInputsList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtAvailableSupervisorInputsList', $methods ), 'exists method getExtAvailableSupervisorInputsList' );
        $r = new ReflectionMethod('processMap', 'getExtAvailableSupervisorInputsList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllDbSourceCount
    * @todo   Implement testgetAllDbSourceCount().
    */
    public function testgetAllDbSourceCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllDbSourceCount', $methods ), 'exists method getAllDbSourceCount' );
        $r = new ReflectionMethod('processMap', 'getAllDbSourceCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtCriteriaDBSList
    * @todo   Implement testgetExtCriteriaDBSList().
    */
    public function testgetExtCriteriaDBSList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtCriteriaDBSList', $methods ), 'exists method getExtCriteriaDBSList' );
        $r = new ReflectionMethod('processMap', 'getExtCriteriaDBSList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::newExtObjectPermission
    * @todo   Implement testnewExtObjectPermission().
    */
    public function testnewExtObjectPermission()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('newExtObjectPermission', $methods ), 'exists method newExtObjectPermission' );
        $r = new ReflectionMethod('processMap', 'newExtObjectPermission');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sAction');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::ExtcaseTracker
    * @todo   Implement testExtcaseTracker().
    */
    public function testExtcaseTracker()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ExtcaseTracker', $methods ), 'exists method ExtcaseTracker' );
        $r = new ReflectionMethod('processMap', 'ExtcaseTracker');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAllCaseTrackerObjectCount
    * @todo   Implement testgetAllCaseTrackerObjectCount().
    */
    public function testgetAllCaseTrackerObjectCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllCaseTrackerObjectCount', $methods ), 'exists method getAllCaseTrackerObjectCount' );
        $r = new ReflectionMethod('processMap', 'getAllCaseTrackerObjectCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtCaseTrackerObjectsCriteria
    * @todo   Implement testgetExtCaseTrackerObjectsCriteria().
    */
    public function testgetExtCaseTrackerObjectsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtCaseTrackerObjectsCriteria', $methods ), 'exists method getExtCaseTrackerObjectsCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtCaseTrackerObjectsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers processMap::getAvailableExtCaseTrackerObjects
    * @todo   Implement testgetAvailableExtCaseTrackerObjects().
    */
    public function testgetAvailableExtCaseTrackerObjects()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAvailableExtCaseTrackerObjects', $methods ), 'exists method getAvailableExtCaseTrackerObjects' );
        $r = new ReflectionMethod('processMap', 'getAvailableExtCaseTrackerObjects');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllReportTableCount
    * @todo   Implement testgetAllReportTableCount().
    */
    public function testgetAllReportTableCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllReportTableCount', $methods ), 'exists method getAllReportTableCount' );
        $r = new ReflectionMethod('processMap', 'getAllReportTableCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtReportTables
    * @todo   Implement testgetExtReportTables().
    */
    public function testgetExtReportTables()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtReportTables', $methods ), 'exists method getExtReportTables' );
        $r = new ReflectionMethod('processMap', 'getExtReportTables');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getExtAvailableUsersList
    * @todo   Implement testgetExtAvailableUsersList().
    */
    public function testgetExtAvailableUsersList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtAvailableUsersList', $methods ), 'exists method getExtAvailableUsersList' );
        $r = new ReflectionMethod('processMap', 'getExtAvailableUsersList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTaskUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'iType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '2');
    }

    /**
    * @covers processMap::getExtTaskUsersAdHocCriteria
    * @todo   Implement testgetExtTaskUsersAdHocCriteria().
    */
    public function testgetExtTaskUsersAdHocCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtTaskUsersAdHocCriteria', $methods ), 'exists method getExtTaskUsersAdHocCriteria' );
        $r = new ReflectionMethod('processMap', 'getExtTaskUsersAdHocCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTaskUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'iType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '1');
    }

    /**
    * @covers processMap::editExtObjectPermission
    * @todo   Implement testeditExtObjectPermission().
    */
    public function testeditExtObjectPermission()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('editExtObjectPermission', $methods ), 'exists method editExtObjectPermission' );
        $r = new ReflectionMethod('processMap', 'editExtObjectPermission');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sOP_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers processMap::getExtusersadhoc
    * @todo   Implement testgetExtusersadhoc().
    */
    public function testgetExtusersadhoc()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtusersadhoc', $methods ), 'exists method getExtusersadhoc' );
        $r = new ReflectionMethod('processMap', 'getExtusersadhoc');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
        $this->assertTrue( $params[3]->getName() == 'sTaskUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::saveExtddEvents
    * @todo   Implement testsaveExtddEvents().
    */
    public function testsaveExtddEvents()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveExtddEvents', $methods ), 'exists method saveExtddEvents' );
        $r = new ReflectionMethod('processMap', 'saveExtddEvents');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::saveExtEvents
    * @todo   Implement testsaveExtEvents().
    */
    public function testsaveExtEvents()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveExtEvents', $methods ), 'exists method saveExtEvents' );
        $r = new ReflectionMethod('processMap', 'saveExtEvents');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'oData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers processMap::getAllTriggersCount
    * @todo   Implement testgetAllTriggersCount().
    */
    public function testgetAllTriggersCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllTriggersCount', $methods ), 'exists method getAllTriggersCount' );
        $r = new ReflectionMethod('processMap', 'getAllTriggersCount');
        $params = $r->getParameters();
    }

    /**
    * @covers processMap::getExtTriggersList
    * @todo   Implement testgetExtTriggersList().
    */
    public function testgetExtTriggersList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getExtTriggersList', $methods ), 'exists method getExtTriggersList' );
        $r = new ReflectionMethod('processMap', 'getExtTriggersList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'start');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'limit');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sProcessUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers processMap::getAllInputDocsByTask
    * @todo   Implement testgetAllInputDocsByTask().
    */
    public function testgetAllInputDocsByTask()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllInputDocsByTask', $methods ), 'exists method getAllInputDocsByTask' );
        $r = new ReflectionMethod('processMap', 'getAllInputDocsByTask');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sPRO_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

  }
