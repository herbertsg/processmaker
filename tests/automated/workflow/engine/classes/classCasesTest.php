<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.case.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:26.
*/

class classCasesTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Cases
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Cases('appUid');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Cases');
        $this->assertTrue( count($methods) == 96);
    }

    /**
    * @covers Cases::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('Cases', '__construct');
        $params = $r->getParameters();
    }

    /**
    * @covers Cases::canStartCase
    * @todo   Implement testcanStartCase().
    */
    public function testcanStartCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('canStartCase', $methods ), 'exists method canStartCase' );
        $r = new ReflectionMethod('Cases', 'canStartCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUIDUser');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getStartCases
    * @todo   Implement testgetStartCases().
    */
    public function testgetStartCases()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStartCases', $methods ), 'exists method getStartCases' );
        $r = new ReflectionMethod('Cases', 'getStartCases');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUIDUser');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getStartCasesPerType
    * @todo   Implement testgetStartCasesPerType().
    */
    public function testgetStartCasesPerType()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getStartCasesPerType', $methods ), 'exists method getStartCasesPerType' );
        $r = new ReflectionMethod('Cases', 'getStartCasesPerType');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUIDUser');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[1]->getName() == 'typeView');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
    }

    /**
    * @covers Cases::getSelfServiceTasks
    * @todo   Implement testgetSelfServiceTasks().
    */
    public function testgetSelfServiceTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSelfServiceTasks', $methods ), 'exists method getSelfServiceTasks' );
        $r = new ReflectionMethod('Cases', 'getSelfServiceTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUIDUser');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::isSelfService
    * @todo   Implement testisSelfService().
    */
    public function testisSelfService()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('isSelfService', $methods ), 'exists method isSelfService' );
        $r = new ReflectionMethod('Cases', 'isSelfService');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'USR_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'TAS_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::loadCase
    * @todo   Implement testloadCase().
    */
    public function testloadCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadCase', $methods ), 'exists method loadCase' );
        $r = new ReflectionMethod('Cases', 'loadCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '0');
    }

    /**
    * @covers Cases::loadCaseByNumber
    * @todo   Implement testloadCaseByNumber().
    */
    public function testloadCaseByNumber()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadCaseByNumber', $methods ), 'exists method loadCaseByNumber' );
        $r = new ReflectionMethod('Cases', 'loadCaseByNumber');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCaseNumber');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::refreshCaseLabel
    * @todo   Implement testrefreshCaseLabel().
    */
    public function testrefreshCaseLabel()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('refreshCaseLabel', $methods ), 'exists method refreshCaseLabel' );
        $r = new ReflectionMethod('Cases', 'refreshCaseLabel');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aAppData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sLabel');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::refreshCaseTitleAndDescription
    * @todo   Implement testrefreshCaseTitleAndDescription().
    */
    public function testrefreshCaseTitleAndDescription()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('refreshCaseTitleAndDescription', $methods ),
            'exists method refreshCaseTitleAndDescription' );
        $r = new ReflectionMethod('Cases', 'refreshCaseTitleAndDescription');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aAppData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::newRefreshCaseTitleAndDescription
    * @todo   Implement testnewRefreshCaseTitleAndDescription().
    */
    public function testnewRefreshCaseTitleAndDescription()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('newRefreshCaseTitleAndDescription', $methods ),
            'exists method newRefreshCaseTitleAndDescription' );
        $r = new ReflectionMethod('Cases', 'newRefreshCaseTitleAndDescription');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'fields');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'aAppData');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::refreshCaseTitle
    * @todo   Implement testrefreshCaseTitle().
    */
    public function testrefreshCaseTitle()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('refreshCaseTitle', $methods ), 'exists method refreshCaseTitle' );
        $r = new ReflectionMethod('Cases', 'refreshCaseTitle');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aAppData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::refreshCaseDescription
    * @todo   Implement testrefreshCaseDescription().
    */
    public function testrefreshCaseDescription()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('refreshCaseDescription', $methods ), 'exists method refreshCaseDescription' );
        $r = new ReflectionMethod('Cases', 'refreshCaseDescription');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aAppData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::refreshCaseStatusCode
    * @todo   Implement testrefreshCaseStatusCode().
    */
    public function testrefreshCaseStatusCode()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('refreshCaseStatusCode', $methods ), 'exists method refreshCaseStatusCode' );
        $r = new ReflectionMethod('Cases', 'refreshCaseStatusCode');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aAppData');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::arrayRecursiveDiff
    * @todo   Implement testarrayRecursiveDiff().
    */
    public function testarrayRecursiveDiff()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('arrayRecursiveDiff', $methods ), 'exists method arrayRecursiveDiff' );
        $r = new ReflectionMethod('Cases', 'arrayRecursiveDiff');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aArray1');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aArray2');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::updateCase
    * @todo   Implement testupdateCase().
    */
    public function testupdateCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateCase', $methods ), 'exists method updateCase' );
        $r = new ReflectionMethod('Cases', 'updateCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'Fields');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    /**
    * @covers Cases::removeCase
    * @todo   Implement testremoveCase().
    */
    public function testremoveCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeCase', $methods ), 'exists method removeCase' );
        $r = new ReflectionMethod('Cases', 'removeCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::setDelInitDate
    * @todo   Implement testsetDelInitDate().
    */
    public function testsetDelInitDate()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setDelInitDate', $methods ), 'exists method setDelInitDate' );
        $r = new ReflectionMethod('Cases', 'setDelInitDate');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::setCatchUser
    * @todo   Implement testsetCatchUser().
    */
    public function testsetCatchUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setCatchUser', $methods ), 'exists method setCatchUser' );
        $r = new ReflectionMethod('Cases', 'setCatchUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'usrId');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::GetOpenThreads
    * @todo   Implement testGetOpenThreads().
    */
    public function testGetOpenThreads()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('GetOpenThreads', $methods ), 'exists method GetOpenThreads' );
        $r = new ReflectionMethod('Cases', 'GetOpenThreads');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getSiblingThreads
    * @todo   Implement testgetSiblingThreads().
    */
    public function testgetSiblingThreads()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSiblingThreads', $methods ), 'exists method getSiblingThreads' );
        $r = new ReflectionMethod('Cases', 'getSiblingThreads');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::getOpenSiblingThreads
    * @todo   Implement testgetOpenSiblingThreads().
    */
    public function testgetOpenSiblingThreads()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getOpenSiblingThreads', $methods ), 'exists method getOpenSiblingThreads' );
        $r = new ReflectionMethod('Cases', 'getOpenSiblingThreads');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sNextTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sAppUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iDelIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sCurrentTask');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers Cases::searchOpenPreviousTasks
    * @todo   Implement testsearchOpenPreviousTasks().
    */
    public function testsearchOpenPreviousTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('searchOpenPreviousTasks', $methods ), 'exists method searchOpenPreviousTasks' );
        $r = new ReflectionMethod('Cases', 'searchOpenPreviousTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'taskUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sAppUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'aPreviousTasks');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == array());
    }

    /**
    * @covers Cases::getReviewedTasks
    * @todo   Implement testgetReviewedTasks().
    */
    public function testgetReviewedTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getReviewedTasks', $methods ), 'exists method getReviewedTasks' );
        $r = new ReflectionMethod('Cases', 'getReviewedTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'taskUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sAppUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::CountTotalPreviousTasks
    * @todo   Implement testCountTotalPreviousTasks().
    */
    public function testCountTotalPreviousTasks()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('CountTotalPreviousTasks', $methods ), 'exists method CountTotalPreviousTasks' );
        $r = new ReflectionMethod('Cases', 'CountTotalPreviousTasks');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTasUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getOpenNullDelegations
    * @todo   Implement testgetOpenNullDelegations().
    */
    public function testgetOpenNullDelegations()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getOpenNullDelegations', $methods ), 'exists method getOpenNullDelegations' );
        $r = new ReflectionMethod('Cases', 'getOpenNullDelegations');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTasUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::isRouteOpen
    * @todo   Implement testisRouteOpen().
    */
    public function testisRouteOpen()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('isRouteOpen', $methods ), 'exists method isRouteOpen' );
        $r = new ReflectionMethod('Cases', 'isRouteOpen');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTasUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::newAppDelegation
    * @todo   Implement testnewAppDelegation().
    */
    public function testnewAppDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('newAppDelegation', $methods ), 'exists method newAppDelegation' );
        $r = new ReflectionMethod('Cases', 'newAppDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sAppUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTasUid');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sUsrUid');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'sPrevious');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'iPriority');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
        $this->assertTrue( $params[6]->getName() == 'sDelType');
        $this->assertTrue( $params[6]->isArray() == false);
        $this->assertTrue( $params[6]->isOptional () == false);
        $this->assertTrue( $params[7]->getName() == 'iAppThreadIndex');
        $this->assertTrue( $params[7]->isArray() == false);
        $this->assertTrue( $params[7]->isOptional () == true);
        $this->assertTrue( $params[7]->getDefaultValue() == '1');
        $this->assertTrue( $params[8]->getName() == 'nextDel');
        $this->assertTrue( $params[8]->isArray() == false);
        $this->assertTrue( $params[8]->isOptional () == true);
        $this->assertTrue( $params[8]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::updateAppDelegation
    * @todo   Implement testupdateAppDelegation().
    */
    public function testupdateAppDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateAppDelegation', $methods ), 'exists method updateAppDelegation' );
        $r = new ReflectionMethod('Cases', 'updateAppDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iAppThreadIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::GetAllDelegations
    * @todo   Implement testGetAllDelegations().
    */
    public function testGetAllDelegations()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('GetAllDelegations', $methods ), 'exists method GetAllDelegations' );
        $r = new ReflectionMethod('Cases', 'GetAllDelegations');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::GetAllThreads
    * @todo   Implement testGetAllThreads().
    */
    public function testGetAllThreads()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('GetAllThreads', $methods ), 'exists method GetAllThreads' );
        $r = new ReflectionMethod('Cases', 'GetAllThreads');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::updateAppThread
    * @todo   Implement testupdateAppThread().
    */
    public function testupdateAppThread()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('updateAppThread', $methods ), 'exists method updateAppThread' );
        $r = new ReflectionMethod('Cases', 'updateAppThread');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iAppThreadIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iNewDelIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::closeAppThread
    * @todo   Implement testcloseAppThread().
    */
    public function testcloseAppThread()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('closeAppThread', $methods ), 'exists method closeAppThread' );
        $r = new ReflectionMethod('Cases', 'closeAppThread');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iAppThreadIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::closeAllThreads
    * @todo   Implement testcloseAllThreads().
    */
    public function testcloseAllThreads()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('closeAllThreads', $methods ), 'exists method closeAllThreads' );
        $r = new ReflectionMethod('Cases', 'closeAllThreads');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::newAppThread
    * @todo   Implement testnewAppThread().
    */
    public function testnewAppThread()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('newAppThread', $methods ), 'exists method newAppThread' );
        $r = new ReflectionMethod('Cases', 'newAppThread');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iNewDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'iAppParent');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::closeAllDelegations
    * @todo   Implement testcloseAllDelegations().
    */
    public function testcloseAllDelegations()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('closeAllDelegations', $methods ), 'exists method closeAllDelegations' );
        $r = new ReflectionMethod('Cases', 'closeAllDelegations');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::CloseCurrentDelegation
    * @todo   Implement testCloseCurrentDelegation().
    */
    public function testCloseCurrentDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('CloseCurrentDelegation', $methods ), 'exists method CloseCurrentDelegation' );
        $r = new ReflectionMethod('Cases', 'CloseCurrentDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::ReactivateCurrentDelegation
    * @todo   Implement testReactivateCurrentDelegation().
    */
    public function testReactivateCurrentDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ReactivateCurrentDelegation', $methods ),
            'exists method ReactivateCurrentDelegation' );
        $r = new ReflectionMethod('Cases', 'ReactivateCurrentDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelegation');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::startCase
    * @todo   Implement teststartCase().
    */
    public function teststartCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('startCase', $methods ), 'exists method startCase' );
        $r = new ReflectionMethod('Cases', 'startCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTasUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sUsrUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'isSubprocess');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getNextStep
    * @todo   Implement testgetNextStep().
    */
    public function testgetNextStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getNextStep', $methods ), 'exists method getNextStep' );
        $r = new ReflectionMethod('Cases', 'getNextStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sAppUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iDelIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
        $this->assertTrue( $params[3]->getName() == 'iPosition');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '0');
    }

    /**
    * @covers Cases::getPreviousStep
    * @todo   Implement testgetPreviousStep().
    */
    public function testgetPreviousStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getPreviousStep', $methods ), 'exists method getPreviousStep' );
        $r = new ReflectionMethod('Cases', 'getPreviousStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sAppUid');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'iDelIndex');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '0');
        $this->assertTrue( $params[3]->getName() == 'iPosition');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '0');
    }

    /**
    * @covers Cases::getNextSupervisorStep
    * @todo   Implement testgetNextSupervisorStep().
    */
    public function testgetNextSupervisorStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getNextSupervisorStep', $methods ), 'exists method getNextSupervisorStep' );
        $r = new ReflectionMethod('Cases', 'getNextSupervisorStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iPosition');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'DYNAFORM');
    }

    /**
    * @covers Cases::getPreviousSupervisorStep
    * @todo   Implement testgetPreviousSupervisorStep().
    */
    public function testgetPreviousSupervisorStep()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getPreviousSupervisorStep', $methods ),
            'exists method getPreviousSupervisorStep' );
        $r = new ReflectionMethod('Cases', 'getPreviousSupervisorStep');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iPosition');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sType');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == 'DYNAFORM');
    }

    /**
    * @covers Cases::getTransferHistoryCriteria
    * @todo   Implement testgetTransferHistoryCriteria().
    */
    public function testgetTransferHistoryCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTransferHistoryCriteria', $methods ),
            'exists method getTransferHistoryCriteria' );
        $r = new ReflectionMethod('Cases', 'getTransferHistoryCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::prepareCriteriaForToDo
    * @todo   Implement testprepareCriteriaForToDo().
    */
    public function testprepareCriteriaForToDo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('prepareCriteriaForToDo', $methods ), 'exists method prepareCriteriaForToDo' );
        $r = new ReflectionMethod('Cases', 'prepareCriteriaForToDo');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sUIDUserLogged');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getConditionCasesList
    * @todo   Implement testgetConditionCasesList().
    */
    public function testgetConditionCasesList()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getConditionCasesList', $methods ), 'exists method getConditionCasesList' );
        $r = new ReflectionMethod('Cases', 'getConditionCasesList');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTypeList');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == 'all');
        $this->assertTrue( $params[1]->getName() == 'sUIDUserLogged');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'ClearSession');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '1');
        $this->assertTrue( $params[3]->getName() == 'aAdditionalFilter');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::loadCaseInCurrentDelegation
    * @todo   Implement testloadCaseInCurrentDelegation().
    */
    public function testloadCaseInCurrentDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadCaseInCurrentDelegation', $methods ),
            'exists method loadCaseInCurrentDelegation' );
        $r = new ReflectionMethod('Cases', 'loadCaseInCurrentDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'APP_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::loadCaseByDelegation
    * @todo   Implement testloadCaseByDelegation().
    */
    public function testloadCaseByDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadCaseByDelegation', $methods ), 'exists method loadCaseByDelegation' );
        $r = new ReflectionMethod('Cases', 'loadCaseByDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'appUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'delIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::ThrowUnpauseDaemon
    * @todo   Implement testThrowUnpauseDaemon().
    */
    public function testThrowUnpauseDaemon()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('ThrowUnpauseDaemon', $methods ), 'exists method ThrowUnpauseDaemon' );
        $r = new ReflectionMethod('Cases', 'ThrowUnpauseDaemon');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'today');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::UnpauseRoutedCasesWithPauseFlagEnabled
    * @todo   Implement testUnpauseRoutedCasesWithPauseFlagEnabled().
    */
    public function testUnpauseRoutedCasesWithPauseFlagEnabled()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('UnpauseRoutedCasesWithPauseFlagEnabled', $methods ),
            'exists method UnpauseRoutedCasesWithPauseFlagEnabled' );
        $r = new ReflectionMethod('Cases', 'UnpauseRoutedCasesWithPauseFlagEnabled');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'usrLogged');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getApplicationUIDByNumber
    * @todo   Implement testgetApplicationUIDByNumber().
    */
    public function testgetApplicationUIDByNumber()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getApplicationUIDByNumber', $methods ),
            'exists method getApplicationUIDByNumber' );
        $r = new ReflectionMethod('Cases', 'getApplicationUIDByNumber');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'iApplicationNumber');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getCurrentDelegation
    * @todo   Implement testgetCurrentDelegation().
    */
    public function testgetCurrentDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCurrentDelegation', $methods ), 'exists method getCurrentDelegation' );
        $r = new ReflectionMethod('Cases', 'getCurrentDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
        $this->assertTrue( $params[1]->getName() == 'sUserUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::loadTriggers
    * @todo   Implement testloadTriggers().
    */
    public function testloadTriggers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadTriggers', $methods ), 'exists method loadTriggers' );
        $r = new ReflectionMethod('Cases', 'loadTriggers');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTasUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sStepType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sStepUidObj');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sTriggerType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers Cases::executeTriggers
    * @todo   Implement testexecuteTriggers().
    */
    public function testexecuteTriggers()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('executeTriggers', $methods ), 'exists method executeTriggers' );
        $r = new ReflectionMethod('Cases', 'executeTriggers');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sTasUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sStepType');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sStepUidObj');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sTriggerType');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'aFields');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == array());
    }

    /**
    * @covers Cases::getTriggerNames
    * @todo   Implement testgetTriggerNames().
    */
    public function testgetTriggerNames()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getTriggerNames', $methods ), 'exists method getTriggerNames' );
        $r = new ReflectionMethod('Cases', 'getTriggerNames');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'triggers');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getInputDocumentsCriteria
    * @todo   Implement testgetInputDocumentsCriteria().
    */
    public function testgetInputDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getInputDocumentsCriteria', $methods ),
            'exists method getInputDocumentsCriteria' );
        $r = new ReflectionMethod('Cases', 'getInputDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelegation');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sDocumentUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sAppDocuUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getInputDocumentsCriteriaToRevise
    * @todo   Implement testgetInputDocumentsCriteriaToRevise().
    */
    public function testgetInputDocumentsCriteriaToRevise()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getInputDocumentsCriteriaToRevise', $methods ),
            'exists method getInputDocumentsCriteriaToRevise' );
        $r = new ReflectionMethod('Cases', 'getInputDocumentsCriteriaToRevise');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getOutputDocumentsCriteriaToRevise
    * @todo   Implement testgetOutputDocumentsCriteriaToRevise().
    */
    public function testgetOutputDocumentsCriteriaToRevise()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getOutputDocumentsCriteriaToRevise', $methods ),
            'exists method getOutputDocumentsCriteriaToRevise' );
        $r = new ReflectionMethod('Cases', 'getOutputDocumentsCriteriaToRevise');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getCriteriaProcessCases
    * @todo   Implement testgetCriteriaProcessCases().
    */
    public function testgetCriteriaProcessCases()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCriteriaProcessCases', $methods ), 'exists method getCriteriaProcessCases' );
        $r = new ReflectionMethod('Cases', 'getCriteriaProcessCases');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'status');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'PRO_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::pauseCase
    * @todo   Implement testpauseCase().
    */
    public function testpauseCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('pauseCase', $methods ), 'exists method pauseCase' );
        $r = new ReflectionMethod('Cases', 'pauseCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelegation');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sUserUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sUnpauseDate');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::unpauseCase
    * @todo   Implement testunpauseCase().
    */
    public function testunpauseCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('unpauseCase', $methods ), 'exists method unpauseCase' );
        $r = new ReflectionMethod('Cases', 'unpauseCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelegation');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sUserUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::cancelCase
    * @todo   Implement testcancelCase().
    */
    public function testcancelCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('cancelCase', $methods ), 'exists method cancelCase' );
        $r = new ReflectionMethod('Cases', 'cancelCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'user_logged');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::reactivateCase
    * @todo   Implement testreactivateCase().
    */
    public function testreactivateCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reactivateCase', $methods ), 'exists method reactivateCase' );
        $r = new ReflectionMethod('Cases', 'reactivateCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'user_logged');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::reassignCase
    * @todo   Implement testreassignCase().
    */
    public function testreassignCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('reassignCase', $methods ), 'exists method reassignCase' );
        $r = new ReflectionMethod('Cases', 'reassignCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iDelegation');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sUserUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'newUserUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'sType');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == 'REASSIGN');
    }

    /**
    * @covers Cases::getAllDynaformsStepsToRevise
    * @todo   Implement testgetAllDynaformsStepsToRevise().
    */
    public function testgetAllDynaformsStepsToRevise()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllDynaformsStepsToRevise', $methods ),
            'exists method getAllDynaformsStepsToRevise' );
        $r = new ReflectionMethod('Cases', 'getAllDynaformsStepsToRevise');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'APP_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getAllInputsStepsToRevise
    * @todo   Implement testgetAllInputsStepsToRevise().
    */
    public function testgetAllInputsStepsToRevise()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllInputsStepsToRevise', $methods ),
            'exists method getAllInputsStepsToRevise' );
        $r = new ReflectionMethod('Cases', 'getAllInputsStepsToRevise');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'APP_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getAllUploadedDocumentsCriteria
    * @todo   Implement testgetAllUploadedDocumentsCriteria().
    */
    public function testgetAllUploadedDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllUploadedDocumentsCriteria', $methods ),
            'exists method getAllUploadedDocumentsCriteria' );
        $r = new ReflectionMethod('Cases', 'getAllUploadedDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTasKUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sUserUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers Cases::getAllGeneratedDocumentsCriteria
    * @todo   Implement testgetAllGeneratedDocumentsCriteria().
    */
    public function testgetAllGeneratedDocumentsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllGeneratedDocumentsCriteria', $methods ),
            'exists method getAllGeneratedDocumentsCriteria' );
        $r = new ReflectionMethod('Cases', 'getAllGeneratedDocumentsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTasKUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sUserUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers Cases::getallDynaformsCriteria
    * @todo   Implement testgetallDynaformsCriteria().
    */
    public function testgetallDynaformsCriteria()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getallDynaformsCriteria', $methods ), 'exists method getallDynaformsCriteria' );
        $r = new ReflectionMethod('Cases', 'getallDynaformsCriteria');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTasKUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sUserUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
    }

    /**
    * @covers Cases::sendNotifications
    * @todo   Implement testsendNotifications().
    */
    public function testsendNotifications()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('sendNotifications', $methods ), 'exists method sendNotifications' );
        $r = new ReflectionMethod('Cases', 'sendNotifications');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCurrentTask');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'aTasks');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'aFields');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'iDelegation');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'sFrom');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == true);
        $this->assertTrue( $params[5]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getAllObjects
    * @todo   Implement testgetAllObjects().
    */
    public function testgetAllObjects()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllObjects', $methods ), 'exists method getAllObjects' );
        $r = new ReflectionMethod('Cases', 'getAllObjects');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'PRO_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'APP_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'TAS_UID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[3]->getName() == 'USR_UID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
    }

    /**
    * @covers Cases::getAllObjectsFrom
    * @todo   Implement testgetAllObjectsFrom().
    */
    public function testgetAllObjectsFrom()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllObjectsFrom', $methods ), 'exists method getAllObjectsFrom' );
        $r = new ReflectionMethod('Cases', 'getAllObjectsFrom');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'PRO_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'APP_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'TAS_UID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[3]->getName() == 'USR_UID');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[4]->getName() == 'ACTION');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::verifyCaseTracker
    * @todo   Implement testverifyCaseTracker().
    */
    public function testverifyCaseTracker()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyCaseTracker', $methods ), 'exists method verifyCaseTracker' );
        $r = new ReflectionMethod('Cases', 'verifyCaseTracker');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'case');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'pin');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::caseTrackerPermissions
    * @todo   Implement testcaseTrackerPermissions().
    */
    public function testcaseTrackerPermissions()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('caseTrackerPermissions', $methods ), 'exists method caseTrackerPermissions' );
        $r = new ReflectionMethod('Cases', 'caseTrackerPermissions');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'PRO_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::verifyTable
    * @todo   Implement testverifyTable().
    */
    public function testverifyTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifyTable', $methods ), 'exists method verifyTable' );
        $r = new ReflectionMethod('Cases', 'verifyTable');
        $params = $r->getParameters();
    }

    /**
    * @covers Cases::getAllUploadedDocumentsCriteriaTracker
    * @todo   Implement testgetAllUploadedDocumentsCriteriaTracker().
    */
    public function testgetAllUploadedDocumentsCriteriaTracker()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllUploadedDocumentsCriteriaTracker', $methods ),
            'exists method getAllUploadedDocumentsCriteriaTracker' );
        $r = new ReflectionMethod('Cases', 'getAllUploadedDocumentsCriteriaTracker');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sDocUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::getAllGeneratedDocumentsCriteriaTracker
    * @todo   Implement testgetAllGeneratedDocumentsCriteriaTracker().
    */
    public function testgetAllGeneratedDocumentsCriteriaTracker()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllGeneratedDocumentsCriteriaTracker', $methods ),
            'exists method getAllGeneratedDocumentsCriteriaTracker' );
        $r = new ReflectionMethod('Cases', 'getAllGeneratedDocumentsCriteriaTracker');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcessUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sDocUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
    }

    /**
    * @covers Cases::getHistoryMessagesTracker
    * @todo   Implement testgetHistoryMessagesTracker().
    */
    public function testgetHistoryMessagesTracker()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getHistoryMessagesTracker', $methods ),
            'exists method getHistoryMessagesTracker' );
        $r = new ReflectionMethod('Cases', 'getHistoryMessagesTracker');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getHistoryMessagesTrackerExt
    * @todo   Implement testgetHistoryMessagesTrackerExt().
    */
    public function testgetHistoryMessagesTrackerExt()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getHistoryMessagesTrackerExt', $methods ),
            'exists method getHistoryMessagesTrackerExt' );
        $r = new ReflectionMethod('Cases', 'getHistoryMessagesTrackerExt');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getHistoryMessagesTrackerView
    * @todo   Implement testgetHistoryMessagesTrackerView().
    */
    public function testgetHistoryMessagesTrackerView()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getHistoryMessagesTrackerView', $methods ),
            'exists method getHistoryMessagesTrackerView' );
        $r = new ReflectionMethod('Cases', 'getHistoryMessagesTrackerView');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'Msg_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::getAllObjectsFromProcess
    * @todo   Implement testgetAllObjectsFromProcess().
    */
    public function testgetAllObjectsFromProcess()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllObjectsFromProcess', $methods ),
            'exists method getAllObjectsFromProcess' );
        $r = new ReflectionMethod('Cases', 'getAllObjectsFromProcess');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'PRO_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'OBJ_TYPE');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '%');
    }

    /**
    * @covers Cases::executeTriggersAfterExternal
    * @todo   Implement testexecuteTriggersAfterExternal().
    */
    public function testexecuteTriggersAfterExternal()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('executeTriggersAfterExternal', $methods ),
            'exists method executeTriggersAfterExternal' );
        $r = new ReflectionMethod('Cases', 'executeTriggersAfterExternal');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sProcess');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sTask');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sApplication');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'iIndex');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'iStepPosition');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'aNewData');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == true);
        $this->assertTrue( $params[5]->getDefaultValue() == array());
    }

    /**
    * @covers Cases::thisIsTheCurrentUser
    * @todo   Implement testthisIsTheCurrentUser().
    */
    public function testthisIsTheCurrentUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('thisIsTheCurrentUser', $methods ), 'exists method thisIsTheCurrentUser' );
        $r = new ReflectionMethod('Cases', 'thisIsTheCurrentUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'iIndex');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sUserUID');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sAction');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '');
        $this->assertTrue( $params[4]->getName() == 'sURL');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == true);
        $this->assertTrue( $params[4]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getCriteriaUsersCases
    * @todo   Implement testgetCriteriaUsersCases().
    */
    public function testgetCriteriaUsersCases()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCriteriaUsersCases', $methods ), 'exists method getCriteriaUsersCases' );
        $r = new ReflectionMethod('Cases', 'getCriteriaUsersCases');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'status');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'USR_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::getAdvancedSearch
    * @todo   Implement testgetAdvancedSearch().
    */
    public function testgetAdvancedSearch()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAdvancedSearch', $methods ), 'exists method getAdvancedSearch' );
        $r = new ReflectionMethod('Cases', 'getAdvancedSearch');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sCase');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sProcess');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->assertTrue( $params[2]->getName() == 'sTask');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == false);
        $this->assertTrue( $params[3]->getName() == 'sCurrentUser');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == false);
        $this->assertTrue( $params[4]->getName() == 'sSentby');
        $this->assertTrue( $params[4]->isArray() == false);
        $this->assertTrue( $params[4]->isOptional () == false);
        $this->assertTrue( $params[5]->getName() == 'sLastModFrom');
        $this->assertTrue( $params[5]->isArray() == false);
        $this->assertTrue( $params[5]->isOptional () == false);
        $this->assertTrue( $params[6]->getName() == 'sLastModTo');
        $this->assertTrue( $params[6]->isArray() == false);
        $this->assertTrue( $params[6]->isOptional () == false);
        $this->assertTrue( $params[7]->getName() == 'sStatus');
        $this->assertTrue( $params[7]->isArray() == false);
        $this->assertTrue( $params[7]->isOptional () == false);
        $this->assertTrue( $params[8]->getName() == 'permisse');
        $this->assertTrue( $params[8]->isArray() == false);
        $this->assertTrue( $params[8]->isOptional () == false);
        $this->assertTrue( $params[9]->getName() == 'userlogged');
        $this->assertTrue( $params[9]->isArray() == false);
        $this->assertTrue( $params[9]->isOptional () == false);
        $this->assertTrue( $params[10]->getName() == 'aSupervisor');
        $this->assertTrue( $params[10]->isArray() == false);
        $this->assertTrue( $params[10]->isOptional () == false);
    }

    /**
    * @covers Cases::getConditionCasesCount
    * @todo   Implement testgetConditionCasesCount().
    */
    public function testgetConditionCasesCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getConditionCasesCount', $methods ), 'exists method getConditionCasesCount' );
        $r = new ReflectionMethod('Cases', 'getConditionCasesCount');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'type');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sumary');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::getAllConditionCasesCount
    * @todo   Implement testgetAllConditionCasesCount().
    */
    public function testgetAllConditionCasesCount()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getAllConditionCasesCount', $methods ),
            'exists method getAllConditionCasesCount' );
        $r = new ReflectionMethod('Cases', 'getAllConditionCasesCount');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'types');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sumary');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::userParticipatedInCase
    * @todo   Implement testuserParticipatedInCase().
    */
    public function testuserParticipatedInCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('userParticipatedInCase', $methods ), 'exists method userParticipatedInCase' );
        $r = new ReflectionMethod('Cases', 'userParticipatedInCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'sUIDUserLogged');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::getCurrentDelegationCase
    * @todo   Implement testgetCurrentDelegationCase().
    */
    public function testgetCurrentDelegationCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCurrentDelegationCase', $methods ), 'exists method getCurrentDelegationCase' );
        $r = new ReflectionMethod('Cases', 'getCurrentDelegationCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sApplicationUID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers Cases::clearCaseSessionData
    * @todo   Implement testclearCaseSessionData().
    */
    public function testclearCaseSessionData()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('clearCaseSessionData', $methods ), 'exists method clearCaseSessionData' );
        $r = new ReflectionMethod('Cases', 'clearCaseSessionData');
        $params = $r->getParameters();
    }

    /**
    * @covers Cases::jumpToCase
    * @todo   Implement testjumpToCase().
    */
    public function testjumpToCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('jumpToCase', $methods ), 'exists method jumpToCase' );
        $r = new ReflectionMethod('Cases', 'jumpToCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'APP_NUMBER');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::discriminateCases
    * @todo   Implement testdiscriminateCases().
    */
    public function testdiscriminateCases()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('discriminateCases', $methods ), 'exists method discriminateCases' );
        $r = new ReflectionMethod('Cases', 'discriminateCases');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::GetAllOpenDelegation
    * @todo   Implement testGetAllOpenDelegation().
    */
    public function testGetAllOpenDelegation()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('GetAllOpenDelegation', $methods ), 'exists method GetAllOpenDelegation' );
        $r = new ReflectionMethod('Cases', 'GetAllOpenDelegation');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'aData');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getUsersToReassign
    * @todo   Implement testgetUsersToReassign().
    */
    public function testgetUsersToReassign()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUsersToReassign', $methods ), 'exists method getUsersToReassign' );
        $r = new ReflectionMethod('Cases', 'getUsersToReassign');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'TAS_UID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'USR_UID');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers Cases::getUsersParticipatedInCase
    * @todo   Implement testgetUsersParticipatedInCase().
    */
    public function testgetUsersParticipatedInCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getUsersParticipatedInCase', $methods ),
            'exists method getUsersParticipatedInCase' );
        $r = new ReflectionMethod('Cases', 'getUsersParticipatedInCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sAppUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers Cases::getCaseNotes
    * @todo   Implement testgetCaseNotes().
    */
    public function testgetCaseNotes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getCaseNotes', $methods ), 'exists method getCaseNotes' );
        $r = new ReflectionMethod('Cases', 'getCaseNotes');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'applicationID');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'type');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == 'array');
        $this->assertTrue( $params[2]->getName() == 'userUid');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == '');
    }
}

