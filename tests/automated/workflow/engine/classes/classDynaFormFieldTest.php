<?php

require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.dynaFormField.php';
require_once PATH_TRUNK . 'gulliver/system/class.error.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:30.
 */
class classDynaFormFieldTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var DynaFormField
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DynaFormField();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
     */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('DynaFormField');
        $this->assertTrue(count($methods) == 12);
    }

    /**
     * @covers DynaFormField::SetTo
     * @todo   Implement testSetTo().
     */
    public function testSetTo()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('SetTo', $methods), 'exists method SetTo');
        $r = new ReflectionMethod('DynaFormField', 'SetTo');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'objConnection');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers DynaFormField::Load
     * @todo   Implement testLoad().
     */
    public function testLoad()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('Load', $methods), 'exists method Load');
        $r = new ReflectionMethod('DynaFormField', 'Load');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'sUID');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers DynaFormField::Delete
     * @todo   Implement testDelete().
     */
    public function testDelete()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('Delete', $methods), 'exists method Delete');
        $r = new ReflectionMethod('DynaFormField', 'Delete');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'uid');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
    }

    /**
     * @covers DynaFormField::Save
     * @todo   Implement testSave().
     */
    public function testSave()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('Save', $methods), 'exists method Save');
        $r = new ReflectionMethod('DynaFormField', 'Save');
        $params = $r->getParameters();
        $this->assertTrue($params[0]->getName() == 'Fields');
        $this->assertTrue($params[0]->isArray() == false);
        $this->assertTrue($params[0]->isOptional() == false);
        $this->assertTrue($params[1]->getName() == 'labels');
        $this->assertTrue($params[1]->isArray() == false);
        $this->assertTrue($params[1]->isOptional() == true);
        $this->assertTrue($params[1]->getDefaultValue() == array());
        $this->assertTrue($params[2]->getName() == 'options');
        $this->assertTrue($params[2]->isArray() == false);
        $this->assertTrue($params[2]->isOptional() == true);
        $this->assertTrue($params[2]->getDefaultValue() == array());
    }

    /**
     * @covers DynaFormField::isNew
     * @todo   Implement testisNew().
     */
    public function testisNew()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue(in_array('isNew', $methods), 'exists method isNew');
        $r = new ReflectionMethod('DynaFormField', 'isNew');
        $params = $r->getParameters();
    }
}
 