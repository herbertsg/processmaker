<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.xmlDb.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
*/

class classXMLResultTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var XMLResult
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new XMLResult();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $class = new ReflectionClass('XMLResult');
        $methods = $class->getMethods(ReflectionMethod::IS_PUBLIC);
        $this->assertTrue( count($methods) == 3);
    }

    /**
    * @covers XMLResult::XMLResult
    * @todo   Implement testXMLResult().
    */
    public function testXMLResult()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('XMLResult', $methods ), 'exists method XMLResult' );
        $r = new ReflectionMethod('XMLResult', 'XMLResult');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'result');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == Array());
    }

    /**
    * @covers XMLResult::numRows
    * @todo   Implement testnumRows().
    */
    public function testnumRows()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('numRows', $methods ), 'exists method numRows' );
        $r = new ReflectionMethod('XMLResult', 'numRows');
        $params = $r->getParameters();
    }

    /**
    * @covers XMLResult::fetchRow
    * @todo   Implement testfetchRow().
    */
    public function testfetchRow()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('fetchRow', $methods ), 'exists method fetchRow' );
        $r = new ReflectionMethod('XMLResult', 'fetchRow');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'const');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

  }
