<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.sessions.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
*/

class classSessionsTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Sessions
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new Sessions();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('Sessions');        $this->assertTrue( count($methods) == 6);
    }

    /**
    * @covers Sessions::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('Sessions', '__construct');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSessionId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Sessions::getSessionUser
    * @todo   Implement testgetSessionUser().
    */
    public function testgetSessionUser()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getSessionUser', $methods ), 'exists method getSessionUser' );
        $r = new ReflectionMethod('Sessions', 'getSessionUser');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSessionId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Sessions::verifySession
    * @todo   Implement testverifySession().
    */
    public function testverifySession()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('verifySession', $methods ), 'exists method verifySession' );
        $r = new ReflectionMethod('Sessions', 'verifySession');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'sSessionId');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    } 

    /**
    * @covers Sessions::registerGlobal
    * @todo   Implement testregisterGlobal().
    */
    public function testregisterGlobal()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('registerGlobal', $methods ), 'exists method registerGlobal' );
        $r = new ReflectionMethod('Sessions', 'registerGlobal');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'name');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'value');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    } 

    /**
    * @covers Sessions::getGlobal
    * @todo   Implement testgetGlobal().
    */
    public function testgetGlobal()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getGlobal', $methods ), 'exists method getGlobal' );
        $r = new ReflectionMethod('Sessions', 'getGlobal');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'name');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    } 

    /**
    * @covers Sessions::getGlobals
    * @todo   Implement testgetGlobals().
    */
    public function testgetGlobals()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getGlobals', $methods ), 'exists method getGlobals' );
        $r = new ReflectionMethod('Sessions', 'getGlobals');
        $params = $r->getParameters();
    } 

  } 
