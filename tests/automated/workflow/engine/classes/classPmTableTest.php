<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'workflow/engine/classes/class.pmTable.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 22:32:32.
*/

class classPmTableTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var PmTable
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new PmTable();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $methods = get_class_methods('PmTable');
        $this->assertTrue( count($methods) == 26);
    }

    /**
    * @covers PmTable::__construct
    * @todo   Implement test__construct().
    */
    public function test__construct()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('__construct', $methods ), 'exists method __construct' );
        $r = new ReflectionMethod('PmTable', '__construct');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tableName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers PmTable::setColumns
    * @todo   Implement testsetColumns().
    */
    public function testsetColumns()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setColumns', $methods ), 'exists method setColumns' );
        $r = new ReflectionMethod('PmTable', 'setColumns');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'columns');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PmTable::setDataSource
    * @todo   Implement testsetDataSource().
    */
    public function testsetDataSource()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setDataSource', $methods ), 'exists method setDataSource' );
        $r = new ReflectionMethod('PmTable', 'setDataSource');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dbsUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PmTable::resolveDbSource
    * @todo   Implement testresolveDbSource().
    */
    public function testresolveDbSource()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('resolveDbSource', $methods ), 'exists method resolveDbSource' );
        $r = new ReflectionMethod('PmTable', 'resolveDbSource');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dbsUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PmTable::getDataSource
    * @todo   Implement testgetDataSource().
    */
    public function testgetDataSource()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDataSource', $methods ), 'exists method getDataSource' );
        $r = new ReflectionMethod('PmTable', 'getDataSource');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::getDbConfig
    * @todo   Implement testgetDbConfig().
    */
    public function testgetDbConfig()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getDbConfig', $methods ), 'exists method getDbConfig' );
        $r = new ReflectionMethod('PmTable', 'getDbConfig');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::setAlterTable
    * @todo   Implement testsetAlterTable().
    */
    public function testsetAlterTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('setAlterTable', $methods ), 'exists method setAlterTable' );
        $r = new ReflectionMethod('PmTable', 'setAlterTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'value');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PmTable::build
    * @todo   Implement testbuild().
    */
    public function testbuild()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('build', $methods ), 'exists method build' );
        $r = new ReflectionMethod('PmTable', 'build');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::buildModelFor
    * @todo   Implement testbuildModelFor().
    */
    public function testbuildModelFor()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('buildModelFor', $methods ), 'exists method buildModelFor' );
        $r = new ReflectionMethod('PmTable', 'buildModelFor');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dbsUid');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tablesList');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
    }

    /**
    * @covers PmTable::prepare
    * @todo   Implement testprepare().
    */
    public function testprepare()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('prepare', $methods ), 'exists method prepare' );
        $r = new ReflectionMethod('PmTable', 'prepare');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'loadSchema');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '1');
    }

    /**
    * @covers PmTable::loadSchema
    * @todo   Implement testloadSchema().
    */
    public function testloadSchema()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('loadSchema', $methods ), 'exists method loadSchema' );
        $r = new ReflectionMethod('PmTable', 'loadSchema');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::buildSchema
    * @todo   Implement testbuildSchema().
    */
    public function testbuildSchema()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('buildSchema', $methods ), 'exists method buildSchema' );
        $r = new ReflectionMethod('PmTable', 'buildSchema');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::remove
    * @todo   Implement testremove().
    */
    public function testremove()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('remove', $methods ), 'exists method remove' );
        $r = new ReflectionMethod('PmTable', 'remove');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::removeFromSchema
    * @todo   Implement testremoveFromSchema().
    */
    public function testremoveFromSchema()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeFromSchema', $methods ), 'exists method removeFromSchema' );
        $r = new ReflectionMethod('PmTable', 'removeFromSchema');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::removeModelFiles
    * @todo   Implement testremoveModelFiles().
    */
    public function testremoveModelFiles()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('removeModelFiles', $methods ), 'exists method removeModelFiles' );
        $r = new ReflectionMethod('PmTable', 'removeModelFiles');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::dropTable
    * @todo   Implement testdropTable().
    */
    public function testdropTable()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('dropTable', $methods ), 'exists method dropTable' );
        $r = new ReflectionMethod('PmTable', 'dropTable');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'tableName');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == true);
        $this->assertTrue( $params[0]->getDefaultValue() == '');
    }

    /**
    * @covers PmTable::saveSchema
    * @todo   Implement testsaveSchema().
    */
    public function testsaveSchema()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('saveSchema', $methods ), 'exists method saveSchema' );
        $r = new ReflectionMethod('PmTable', 'saveSchema');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::preparePropelIniFile
    * @todo   Implement testpreparePropelIniFile().
    */
    public function testpreparePropelIniFile()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('preparePropelIniFile', $methods ), 'exists method preparePropelIniFile' );
        $r = new ReflectionMethod('PmTable', 'preparePropelIniFile');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::upgradeDatabase
    * @todo   Implement testupgradeDatabase().
    */
    public function testupgradeDatabase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeDatabase', $methods ), 'exists method upgradeDatabase' );
        $r = new ReflectionMethod('PmTable', 'upgradeDatabase');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::upgradeDatabaseFor
    * @todo   Implement testupgradeDatabaseFor().
    */
    public function testupgradeDatabaseFor()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('upgradeDatabaseFor', $methods ), 'exists method upgradeDatabaseFor' );
        $r = new ReflectionMethod('PmTable', 'upgradeDatabaseFor');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'dataSource');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'tablesList');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == array());
    }

    /**
    * @covers PmTable::hasAutoIncrementPKey
    * @todo   Implement testhasAutoIncrementPKey().
    */
    public function testhasAutoIncrementPKey()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('hasAutoIncrementPKey', $methods ), 'exists method hasAutoIncrementPKey' );
        $r = new ReflectionMethod('PmTable', 'hasAutoIncrementPKey');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::getPropelSupportedColumnTypes
    * @todo   Implement testgetPropelSupportedColumnTypes().
    */
    public function testgetPropelSupportedColumnTypes()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('getPropelSupportedColumnTypes', $methods ),
            'exists method getPropelSupportedColumnTypes' );
        $r = new ReflectionMethod('PmTable', 'getPropelSupportedColumnTypes');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::toCamelCase
    * @todo   Implement testtoCamelCase().
    */
    public function testtoCamelCase()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('toCamelCase', $methods ), 'exists method toCamelCase' );
        $r = new ReflectionMethod('PmTable', 'toCamelCase');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'name');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
    }

    /**
    * @covers PmTable::phingbuildModel
    * @todo   Implement testphingbuildModel().
    */
    public function testphingbuildModel()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('phingbuildModel', $methods ), 'exists method phingbuildModel' );
        $r = new ReflectionMethod('PmTable', 'phingbuildModel');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::phingbuildSql
    * @todo   Implement testphingbuildSql().
    */
    public function testphingbuildSql()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('phingbuildSql', $methods ), 'exists method phingbuildSql' );
        $r = new ReflectionMethod('PmTable', 'phingbuildSql');
        $params = $r->getParameters();
    }

    /**
    * @covers PmTable::callPhing
    * @todo   Implement testcallPhing().
    */
    public function testcallPhing()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('callPhing', $methods ), 'exists method callPhing' );
        $r = new ReflectionMethod('PmTable', 'callPhing');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'target');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'buildFile');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == true);
        $this->assertTrue( $params[1]->getDefaultValue() == '');
        $this->assertTrue( $params[2]->getName() == 'options');
        $this->assertTrue( $params[2]->isArray() == false);
        $this->assertTrue( $params[2]->isOptional () == true);
        $this->assertTrue( $params[2]->getDefaultValue() == array());
        $this->assertTrue( $params[3]->getName() == 'verbose');
        $this->assertTrue( $params[3]->isArray() == false);
        $this->assertTrue( $params[3]->isOptional () == true);
        $this->assertTrue( $params[3]->getDefaultValue() == '1');
    }
}

